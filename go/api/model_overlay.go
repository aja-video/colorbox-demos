/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// Overlay struct for Overlay
type Overlay struct {
	// true if overlay is enabled else disabled
	Enabled *bool `json:"enabled,omitempty"`
	InVpidFormat *bool `json:"inVpidFormat,omitempty"`
	InVpidRange *bool `json:"inVpidRange,omitempty"`
	InVpidHdr *bool `json:"inVpidHdr,omitempty"`
	InVpidBitDepth *bool `json:"inVpidBitDepth,omitempty"`
	OutVpidFormat *bool `json:"outVpidFormat,omitempty"`
	OutVpidRange *bool `json:"outVpidRange,omitempty"`
	OutVpidHdr *bool `json:"outVpidHdr,omitempty"`
	OutVpidBitDepth *bool `json:"outVpidBitDepth,omitempty"`
	TimeCode *bool `json:"timeCode,omitempty"`
	ClosedCaption *bool `json:"closedCaption,omitempty"`
	UserTextEnabled *bool `json:"userTextEnabled,omitempty"`
	UserTextLine1 *string `json:"userTextLine1,omitempty"`
	UserTextLine2 *string `json:"userTextLine2,omitempty"`
	PipelineConfig *bool `json:"pipelineConfig,omitempty"`
	Location *Locations `json:"location,omitempty"`
}

// NewOverlay instantiates a new Overlay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverlay() *Overlay {
	this := Overlay{}
	var location Locations = LOCATIONS_BOTTOM_CENTER
	this.Location = &location
	return &this
}

// NewOverlayWithDefaults instantiates a new Overlay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverlayWithDefaults() *Overlay {
	this := Overlay{}
	var location Locations = LOCATIONS_BOTTOM_CENTER
	this.Location = &location
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Overlay) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}



// HasEnabled returns a boolean if a field has been set.
func (o *Overlay) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Overlay) SetEnabled(v bool) {
	tmp := v
	o.Enabled = &tmp
}

// GetInVpidFormat returns the InVpidFormat field value if set, zero value otherwise.
func (o *Overlay) GetInVpidFormat() bool {
	if o == nil || o.InVpidFormat == nil {
		var ret bool
		return ret
	}
	return *o.InVpidFormat
}

// GetInVpidFormatOk returns a tuple with the InVpidFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetInVpidFormatOk() (*bool, bool) {
	if o == nil || o.InVpidFormat == nil {
		return nil, false
	}
	return o.InVpidFormat, true
}



// HasInVpidFormat returns a boolean if a field has been set.
func (o *Overlay) HasInVpidFormat() bool {
	if o != nil && o.InVpidFormat != nil {
		return true
	}

	return false
}

// SetInVpidFormat gets a reference to the given bool and assigns it to the InVpidFormat field.
func (o *Overlay) SetInVpidFormat(v bool) {
	tmp := v
	o.InVpidFormat = &tmp
}

// GetInVpidRange returns the InVpidRange field value if set, zero value otherwise.
func (o *Overlay) GetInVpidRange() bool {
	if o == nil || o.InVpidRange == nil {
		var ret bool
		return ret
	}
	return *o.InVpidRange
}

// GetInVpidRangeOk returns a tuple with the InVpidRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetInVpidRangeOk() (*bool, bool) {
	if o == nil || o.InVpidRange == nil {
		return nil, false
	}
	return o.InVpidRange, true
}



// HasInVpidRange returns a boolean if a field has been set.
func (o *Overlay) HasInVpidRange() bool {
	if o != nil && o.InVpidRange != nil {
		return true
	}

	return false
}

// SetInVpidRange gets a reference to the given bool and assigns it to the InVpidRange field.
func (o *Overlay) SetInVpidRange(v bool) {
	tmp := v
	o.InVpidRange = &tmp
}

// GetInVpidHdr returns the InVpidHdr field value if set, zero value otherwise.
func (o *Overlay) GetInVpidHdr() bool {
	if o == nil || o.InVpidHdr == nil {
		var ret bool
		return ret
	}
	return *o.InVpidHdr
}

// GetInVpidHdrOk returns a tuple with the InVpidHdr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetInVpidHdrOk() (*bool, bool) {
	if o == nil || o.InVpidHdr == nil {
		return nil, false
	}
	return o.InVpidHdr, true
}



// HasInVpidHdr returns a boolean if a field has been set.
func (o *Overlay) HasInVpidHdr() bool {
	if o != nil && o.InVpidHdr != nil {
		return true
	}

	return false
}

// SetInVpidHdr gets a reference to the given bool and assigns it to the InVpidHdr field.
func (o *Overlay) SetInVpidHdr(v bool) {
	tmp := v
	o.InVpidHdr = &tmp
}

// GetInVpidBitDepth returns the InVpidBitDepth field value if set, zero value otherwise.
func (o *Overlay) GetInVpidBitDepth() bool {
	if o == nil || o.InVpidBitDepth == nil {
		var ret bool
		return ret
	}
	return *o.InVpidBitDepth
}

// GetInVpidBitDepthOk returns a tuple with the InVpidBitDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetInVpidBitDepthOk() (*bool, bool) {
	if o == nil || o.InVpidBitDepth == nil {
		return nil, false
	}
	return o.InVpidBitDepth, true
}



// HasInVpidBitDepth returns a boolean if a field has been set.
func (o *Overlay) HasInVpidBitDepth() bool {
	if o != nil && o.InVpidBitDepth != nil {
		return true
	}

	return false
}

// SetInVpidBitDepth gets a reference to the given bool and assigns it to the InVpidBitDepth field.
func (o *Overlay) SetInVpidBitDepth(v bool) {
	tmp := v
	o.InVpidBitDepth = &tmp
}

// GetOutVpidFormat returns the OutVpidFormat field value if set, zero value otherwise.
func (o *Overlay) GetOutVpidFormat() bool {
	if o == nil || o.OutVpidFormat == nil {
		var ret bool
		return ret
	}
	return *o.OutVpidFormat
}

// GetOutVpidFormatOk returns a tuple with the OutVpidFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetOutVpidFormatOk() (*bool, bool) {
	if o == nil || o.OutVpidFormat == nil {
		return nil, false
	}
	return o.OutVpidFormat, true
}



// HasOutVpidFormat returns a boolean if a field has been set.
func (o *Overlay) HasOutVpidFormat() bool {
	if o != nil && o.OutVpidFormat != nil {
		return true
	}

	return false
}

// SetOutVpidFormat gets a reference to the given bool and assigns it to the OutVpidFormat field.
func (o *Overlay) SetOutVpidFormat(v bool) {
	tmp := v
	o.OutVpidFormat = &tmp
}

// GetOutVpidRange returns the OutVpidRange field value if set, zero value otherwise.
func (o *Overlay) GetOutVpidRange() bool {
	if o == nil || o.OutVpidRange == nil {
		var ret bool
		return ret
	}
	return *o.OutVpidRange
}

// GetOutVpidRangeOk returns a tuple with the OutVpidRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetOutVpidRangeOk() (*bool, bool) {
	if o == nil || o.OutVpidRange == nil {
		return nil, false
	}
	return o.OutVpidRange, true
}



// HasOutVpidRange returns a boolean if a field has been set.
func (o *Overlay) HasOutVpidRange() bool {
	if o != nil && o.OutVpidRange != nil {
		return true
	}

	return false
}

// SetOutVpidRange gets a reference to the given bool and assigns it to the OutVpidRange field.
func (o *Overlay) SetOutVpidRange(v bool) {
	tmp := v
	o.OutVpidRange = &tmp
}

// GetOutVpidHdr returns the OutVpidHdr field value if set, zero value otherwise.
func (o *Overlay) GetOutVpidHdr() bool {
	if o == nil || o.OutVpidHdr == nil {
		var ret bool
		return ret
	}
	return *o.OutVpidHdr
}

// GetOutVpidHdrOk returns a tuple with the OutVpidHdr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetOutVpidHdrOk() (*bool, bool) {
	if o == nil || o.OutVpidHdr == nil {
		return nil, false
	}
	return o.OutVpidHdr, true
}



// HasOutVpidHdr returns a boolean if a field has been set.
func (o *Overlay) HasOutVpidHdr() bool {
	if o != nil && o.OutVpidHdr != nil {
		return true
	}

	return false
}

// SetOutVpidHdr gets a reference to the given bool and assigns it to the OutVpidHdr field.
func (o *Overlay) SetOutVpidHdr(v bool) {
	tmp := v
	o.OutVpidHdr = &tmp
}

// GetOutVpidBitDepth returns the OutVpidBitDepth field value if set, zero value otherwise.
func (o *Overlay) GetOutVpidBitDepth() bool {
	if o == nil || o.OutVpidBitDepth == nil {
		var ret bool
		return ret
	}
	return *o.OutVpidBitDepth
}

// GetOutVpidBitDepthOk returns a tuple with the OutVpidBitDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetOutVpidBitDepthOk() (*bool, bool) {
	if o == nil || o.OutVpidBitDepth == nil {
		return nil, false
	}
	return o.OutVpidBitDepth, true
}



// HasOutVpidBitDepth returns a boolean if a field has been set.
func (o *Overlay) HasOutVpidBitDepth() bool {
	if o != nil && o.OutVpidBitDepth != nil {
		return true
	}

	return false
}

// SetOutVpidBitDepth gets a reference to the given bool and assigns it to the OutVpidBitDepth field.
func (o *Overlay) SetOutVpidBitDepth(v bool) {
	tmp := v
	o.OutVpidBitDepth = &tmp
}

// GetTimeCode returns the TimeCode field value if set, zero value otherwise.
func (o *Overlay) GetTimeCode() bool {
	if o == nil || o.TimeCode == nil {
		var ret bool
		return ret
	}
	return *o.TimeCode
}

// GetTimeCodeOk returns a tuple with the TimeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetTimeCodeOk() (*bool, bool) {
	if o == nil || o.TimeCode == nil {
		return nil, false
	}
	return o.TimeCode, true
}



// HasTimeCode returns a boolean if a field has been set.
func (o *Overlay) HasTimeCode() bool {
	if o != nil && o.TimeCode != nil {
		return true
	}

	return false
}

// SetTimeCode gets a reference to the given bool and assigns it to the TimeCode field.
func (o *Overlay) SetTimeCode(v bool) {
	tmp := v
	o.TimeCode = &tmp
}

// GetClosedCaption returns the ClosedCaption field value if set, zero value otherwise.
func (o *Overlay) GetClosedCaption() bool {
	if o == nil || o.ClosedCaption == nil {
		var ret bool
		return ret
	}
	return *o.ClosedCaption
}

// GetClosedCaptionOk returns a tuple with the ClosedCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetClosedCaptionOk() (*bool, bool) {
	if o == nil || o.ClosedCaption == nil {
		return nil, false
	}
	return o.ClosedCaption, true
}



// HasClosedCaption returns a boolean if a field has been set.
func (o *Overlay) HasClosedCaption() bool {
	if o != nil && o.ClosedCaption != nil {
		return true
	}

	return false
}

// SetClosedCaption gets a reference to the given bool and assigns it to the ClosedCaption field.
func (o *Overlay) SetClosedCaption(v bool) {
	tmp := v
	o.ClosedCaption = &tmp
}

// GetUserTextEnabled returns the UserTextEnabled field value if set, zero value otherwise.
func (o *Overlay) GetUserTextEnabled() bool {
	if o == nil || o.UserTextEnabled == nil {
		var ret bool
		return ret
	}
	return *o.UserTextEnabled
}

// GetUserTextEnabledOk returns a tuple with the UserTextEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextEnabledOk() (*bool, bool) {
	if o == nil || o.UserTextEnabled == nil {
		return nil, false
	}
	return o.UserTextEnabled, true
}



// HasUserTextEnabled returns a boolean if a field has been set.
func (o *Overlay) HasUserTextEnabled() bool {
	if o != nil && o.UserTextEnabled != nil {
		return true
	}

	return false
}

// SetUserTextEnabled gets a reference to the given bool and assigns it to the UserTextEnabled field.
func (o *Overlay) SetUserTextEnabled(v bool) {
	tmp := v
	o.UserTextEnabled = &tmp
}

// GetUserTextLine1 returns the UserTextLine1 field value if set, zero value otherwise.
func (o *Overlay) GetUserTextLine1() string {
	if o == nil || o.UserTextLine1 == nil {
		var ret string
		return ret
	}
	return *o.UserTextLine1
}

// GetUserTextLine1Ok returns a tuple with the UserTextLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextLine1Ok() (*string, bool) {
	if o == nil || o.UserTextLine1 == nil {
		return nil, false
	}
	return o.UserTextLine1, true
}


// GetUserTextLine1Min returns the minimum length of field UserTextLine1.
func (o *Overlay) GetUserTextLine1Min() int {
	return 0
}

// GetUserTextLine1Max returns the maximum length of field UserTextLine1.
func (o *Overlay) GetUserTextLine1Max() int {
	return 110
}

// HasUserTextLine1 returns a boolean if a field has been set.
func (o *Overlay) HasUserTextLine1() bool {
	if o != nil && o.UserTextLine1 != nil {
		return true
	}

	return false
}

// SetUserTextLine1 gets a reference to the given string and assigns it to the UserTextLine1 field.
func (o *Overlay) SetUserTextLine1(v string) {
	tmp := v
	min := o.GetUserTextLine1Min()
	max := o.GetUserTextLine1Max()
	if len(tmp) < min { tmp = tmp[:min] }
	if len(tmp) > max { tmp = tmp[:max] }
	o.UserTextLine1 = &tmp
}

// GetUserTextLine2 returns the UserTextLine2 field value if set, zero value otherwise.
func (o *Overlay) GetUserTextLine2() string {
	if o == nil || o.UserTextLine2 == nil {
		var ret string
		return ret
	}
	return *o.UserTextLine2
}

// GetUserTextLine2Ok returns a tuple with the UserTextLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextLine2Ok() (*string, bool) {
	if o == nil || o.UserTextLine2 == nil {
		return nil, false
	}
	return o.UserTextLine2, true
}


// GetUserTextLine2Min returns the minimum length of field UserTextLine2.
func (o *Overlay) GetUserTextLine2Min() int {
	return 0
}

// GetUserTextLine2Max returns the maximum length of field UserTextLine2.
func (o *Overlay) GetUserTextLine2Max() int {
	return 110
}

// HasUserTextLine2 returns a boolean if a field has been set.
func (o *Overlay) HasUserTextLine2() bool {
	if o != nil && o.UserTextLine2 != nil {
		return true
	}

	return false
}

// SetUserTextLine2 gets a reference to the given string and assigns it to the UserTextLine2 field.
func (o *Overlay) SetUserTextLine2(v string) {
	tmp := v
	min := o.GetUserTextLine2Min()
	max := o.GetUserTextLine2Max()
	if len(tmp) < min { tmp = tmp[:min] }
	if len(tmp) > max { tmp = tmp[:max] }
	o.UserTextLine2 = &tmp
}

// GetPipelineConfig returns the PipelineConfig field value if set, zero value otherwise.
func (o *Overlay) GetPipelineConfig() bool {
	if o == nil || o.PipelineConfig == nil {
		var ret bool
		return ret
	}
	return *o.PipelineConfig
}

// GetPipelineConfigOk returns a tuple with the PipelineConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetPipelineConfigOk() (*bool, bool) {
	if o == nil || o.PipelineConfig == nil {
		return nil, false
	}
	return o.PipelineConfig, true
}



// HasPipelineConfig returns a boolean if a field has been set.
func (o *Overlay) HasPipelineConfig() bool {
	if o != nil && o.PipelineConfig != nil {
		return true
	}

	return false
}

// SetPipelineConfig gets a reference to the given bool and assigns it to the PipelineConfig field.
func (o *Overlay) SetPipelineConfig(v bool) {
	tmp := v
	o.PipelineConfig = &tmp
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Overlay) GetLocation() Locations {
	if o == nil || o.Location == nil {
		var ret Locations
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetLocationOk() (*Locations, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}



// HasLocation returns a boolean if a field has been set.
func (o *Overlay) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Locations and assigns it to the Location field.
func (o *Overlay) SetLocation(v Locations) {
	tmp := v
	o.Location = &tmp
}

func (o Overlay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.InVpidFormat != nil {
		toSerialize["inVpidFormat"] = o.InVpidFormat
	}
	if o.InVpidRange != nil {
		toSerialize["inVpidRange"] = o.InVpidRange
	}
	if o.InVpidHdr != nil {
		toSerialize["inVpidHdr"] = o.InVpidHdr
	}
	if o.InVpidBitDepth != nil {
		toSerialize["inVpidBitDepth"] = o.InVpidBitDepth
	}
	if o.OutVpidFormat != nil {
		toSerialize["outVpidFormat"] = o.OutVpidFormat
	}
	if o.OutVpidRange != nil {
		toSerialize["outVpidRange"] = o.OutVpidRange
	}
	if o.OutVpidHdr != nil {
		toSerialize["outVpidHdr"] = o.OutVpidHdr
	}
	if o.OutVpidBitDepth != nil {
		toSerialize["outVpidBitDepth"] = o.OutVpidBitDepth
	}
	if o.TimeCode != nil {
		toSerialize["timeCode"] = o.TimeCode
	}
	if o.ClosedCaption != nil {
		toSerialize["closedCaption"] = o.ClosedCaption
	}
	if o.UserTextEnabled != nil {
		toSerialize["userTextEnabled"] = o.UserTextEnabled
	}
	if o.UserTextLine1 != nil {
		toSerialize["userTextLine1"] = o.UserTextLine1
	}
	if o.UserTextLine2 != nil {
		toSerialize["userTextLine2"] = o.UserTextLine2
	}
	if o.PipelineConfig != nil {
		toSerialize["pipelineConfig"] = o.PipelineConfig
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}


func (o *Overlay) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasUserTextLine1() {
		var fieldChanged = false
		var v string = o.GetUserTextLine1()
		var min int = o.GetUserTextLine1Min()
		var max int = o.GetUserTextLine1Max()
		if len(v) < min {
			v = v[:min]
			fieldChanged= true
		}
		if len(v) > max {
			v = v[:max]
			fieldChanged = true
		}
		if fieldChanged {
			o.SetUserTextLine1(v)
			valueChanged = true
		}
	}
	if o.HasUserTextLine2() {
		var fieldChanged = false
		var v string = o.GetUserTextLine2()
		var min int = o.GetUserTextLine2Min()
		var max int = o.GetUserTextLine2Max()
		if len(v) < min {
			v = v[:min]
			fieldChanged= true
		}
		if len(v) > max {
			v = v[:max]
			fieldChanged = true
		}
		if fieldChanged {
			o.SetUserTextLine2(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableOverlay struct {
	value *Overlay
	isSet bool
}

func (v NullableOverlay) Get() *Overlay {
	return v.value
}

func (v *NullableOverlay) Set(val *Overlay) {
	v.value = val
	v.isSet = true
}

func (v NullableOverlay) IsSet() bool {
	return v.isSet
}

func (v *NullableOverlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverlay(val *Overlay) *NullableOverlay {
	return &NullableOverlay{value: val, isSet: true}
}

func (v NullableOverlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


