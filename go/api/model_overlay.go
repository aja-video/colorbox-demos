/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// Overlay struct for Overlay
type Overlay struct {
	// true if overlay is enabled else disabled
	Enabled *bool `json:"enabled,omitempty"`
	VpidFormat *bool `json:"vpidFormat,omitempty"`
	VpidRange *bool `json:"vpidRange,omitempty"`
	VpidHdr *bool `json:"vpidHdr,omitempty"`
	VpidBitDepth *bool `json:"vpidBitDepth,omitempty"`
	TimeCode *bool `json:"timeCode,omitempty"`
	ClosedCaption *bool `json:"closedCaption,omitempty"`
	UserTextEnabled *bool `json:"userTextEnabled,omitempty"`
	UserTextLine1 *string `json:"userTextLine1,omitempty"`
	UserTextLine2 *string `json:"userTextLine2,omitempty"`
	Location *Locations `json:"location,omitempty"`
}

// NewOverlay instantiates a new Overlay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverlay() *Overlay {
	this := Overlay{}
	var location Locations = LOCATIONS_BOTTOM_CENTER
	this.Location = &location
	return &this
}

// NewOverlayWithDefaults instantiates a new Overlay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverlayWithDefaults() *Overlay {
	this := Overlay{}
	var location Locations = LOCATIONS_BOTTOM_CENTER
	this.Location = &location
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Overlay) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}



// HasEnabled returns a boolean if a field has been set.
func (o *Overlay) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Overlay) SetEnabled(v bool) {
	tmp := v
	o.Enabled = &tmp
}

// GetVpidFormat returns the VpidFormat field value if set, zero value otherwise.
func (o *Overlay) GetVpidFormat() bool {
	if o == nil || o.VpidFormat == nil {
		var ret bool
		return ret
	}
	return *o.VpidFormat
}

// GetVpidFormatOk returns a tuple with the VpidFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetVpidFormatOk() (*bool, bool) {
	if o == nil || o.VpidFormat == nil {
		return nil, false
	}
	return o.VpidFormat, true
}



// HasVpidFormat returns a boolean if a field has been set.
func (o *Overlay) HasVpidFormat() bool {
	if o != nil && o.VpidFormat != nil {
		return true
	}

	return false
}

// SetVpidFormat gets a reference to the given bool and assigns it to the VpidFormat field.
func (o *Overlay) SetVpidFormat(v bool) {
	tmp := v
	o.VpidFormat = &tmp
}

// GetVpidRange returns the VpidRange field value if set, zero value otherwise.
func (o *Overlay) GetVpidRange() bool {
	if o == nil || o.VpidRange == nil {
		var ret bool
		return ret
	}
	return *o.VpidRange
}

// GetVpidRangeOk returns a tuple with the VpidRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetVpidRangeOk() (*bool, bool) {
	if o == nil || o.VpidRange == nil {
		return nil, false
	}
	return o.VpidRange, true
}



// HasVpidRange returns a boolean if a field has been set.
func (o *Overlay) HasVpidRange() bool {
	if o != nil && o.VpidRange != nil {
		return true
	}

	return false
}

// SetVpidRange gets a reference to the given bool and assigns it to the VpidRange field.
func (o *Overlay) SetVpidRange(v bool) {
	tmp := v
	o.VpidRange = &tmp
}

// GetVpidHdr returns the VpidHdr field value if set, zero value otherwise.
func (o *Overlay) GetVpidHdr() bool {
	if o == nil || o.VpidHdr == nil {
		var ret bool
		return ret
	}
	return *o.VpidHdr
}

// GetVpidHdrOk returns a tuple with the VpidHdr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetVpidHdrOk() (*bool, bool) {
	if o == nil || o.VpidHdr == nil {
		return nil, false
	}
	return o.VpidHdr, true
}



// HasVpidHdr returns a boolean if a field has been set.
func (o *Overlay) HasVpidHdr() bool {
	if o != nil && o.VpidHdr != nil {
		return true
	}

	return false
}

// SetVpidHdr gets a reference to the given bool and assigns it to the VpidHdr field.
func (o *Overlay) SetVpidHdr(v bool) {
	tmp := v
	o.VpidHdr = &tmp
}

// GetVpidBitDepth returns the VpidBitDepth field value if set, zero value otherwise.
func (o *Overlay) GetVpidBitDepth() bool {
	if o == nil || o.VpidBitDepth == nil {
		var ret bool
		return ret
	}
	return *o.VpidBitDepth
}

// GetVpidBitDepthOk returns a tuple with the VpidBitDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetVpidBitDepthOk() (*bool, bool) {
	if o == nil || o.VpidBitDepth == nil {
		return nil, false
	}
	return o.VpidBitDepth, true
}



// HasVpidBitDepth returns a boolean if a field has been set.
func (o *Overlay) HasVpidBitDepth() bool {
	if o != nil && o.VpidBitDepth != nil {
		return true
	}

	return false
}

// SetVpidBitDepth gets a reference to the given bool and assigns it to the VpidBitDepth field.
func (o *Overlay) SetVpidBitDepth(v bool) {
	tmp := v
	o.VpidBitDepth = &tmp
}

// GetTimeCode returns the TimeCode field value if set, zero value otherwise.
func (o *Overlay) GetTimeCode() bool {
	if o == nil || o.TimeCode == nil {
		var ret bool
		return ret
	}
	return *o.TimeCode
}

// GetTimeCodeOk returns a tuple with the TimeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetTimeCodeOk() (*bool, bool) {
	if o == nil || o.TimeCode == nil {
		return nil, false
	}
	return o.TimeCode, true
}



// HasTimeCode returns a boolean if a field has been set.
func (o *Overlay) HasTimeCode() bool {
	if o != nil && o.TimeCode != nil {
		return true
	}

	return false
}

// SetTimeCode gets a reference to the given bool and assigns it to the TimeCode field.
func (o *Overlay) SetTimeCode(v bool) {
	tmp := v
	o.TimeCode = &tmp
}

// GetClosedCaption returns the ClosedCaption field value if set, zero value otherwise.
func (o *Overlay) GetClosedCaption() bool {
	if o == nil || o.ClosedCaption == nil {
		var ret bool
		return ret
	}
	return *o.ClosedCaption
}

// GetClosedCaptionOk returns a tuple with the ClosedCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetClosedCaptionOk() (*bool, bool) {
	if o == nil || o.ClosedCaption == nil {
		return nil, false
	}
	return o.ClosedCaption, true
}



// HasClosedCaption returns a boolean if a field has been set.
func (o *Overlay) HasClosedCaption() bool {
	if o != nil && o.ClosedCaption != nil {
		return true
	}

	return false
}

// SetClosedCaption gets a reference to the given bool and assigns it to the ClosedCaption field.
func (o *Overlay) SetClosedCaption(v bool) {
	tmp := v
	o.ClosedCaption = &tmp
}

// GetUserTextEnabled returns the UserTextEnabled field value if set, zero value otherwise.
func (o *Overlay) GetUserTextEnabled() bool {
	if o == nil || o.UserTextEnabled == nil {
		var ret bool
		return ret
	}
	return *o.UserTextEnabled
}

// GetUserTextEnabledOk returns a tuple with the UserTextEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextEnabledOk() (*bool, bool) {
	if o == nil || o.UserTextEnabled == nil {
		return nil, false
	}
	return o.UserTextEnabled, true
}



// HasUserTextEnabled returns a boolean if a field has been set.
func (o *Overlay) HasUserTextEnabled() bool {
	if o != nil && o.UserTextEnabled != nil {
		return true
	}

	return false
}

// SetUserTextEnabled gets a reference to the given bool and assigns it to the UserTextEnabled field.
func (o *Overlay) SetUserTextEnabled(v bool) {
	tmp := v
	o.UserTextEnabled = &tmp
}

// GetUserTextLine1 returns the UserTextLine1 field value if set, zero value otherwise.
func (o *Overlay) GetUserTextLine1() string {
	if o == nil || o.UserTextLine1 == nil {
		var ret string
		return ret
	}
	return *o.UserTextLine1
}

// GetUserTextLine1Ok returns a tuple with the UserTextLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextLine1Ok() (*string, bool) {
	if o == nil || o.UserTextLine1 == nil {
		return nil, false
	}
	return o.UserTextLine1, true
}


// GetUserTextLine1Min returns the minimum length of field UserTextLine1.
func (o *Overlay) GetUserTextLine1Min() int {
	return 0
}

// GetUserTextLine1Max returns the maximum length of field UserTextLine1.
func (o *Overlay) GetUserTextLine1Max() int {
	return 110
}

// HasUserTextLine1 returns a boolean if a field has been set.
func (o *Overlay) HasUserTextLine1() bool {
	if o != nil && o.UserTextLine1 != nil {
		return true
	}

	return false
}

// SetUserTextLine1 gets a reference to the given string and assigns it to the UserTextLine1 field.
func (o *Overlay) SetUserTextLine1(v string) {
	tmp := v
	min := o.GetUserTextLine1Min()
	max := o.GetUserTextLine1Max()
	if len(tmp) < min { tmp = tmp[:min] }
	if len(tmp) > max { tmp = tmp[:max] }
	o.UserTextLine1 = &tmp
}

// GetUserTextLine2 returns the UserTextLine2 field value if set, zero value otherwise.
func (o *Overlay) GetUserTextLine2() string {
	if o == nil || o.UserTextLine2 == nil {
		var ret string
		return ret
	}
	return *o.UserTextLine2
}

// GetUserTextLine2Ok returns a tuple with the UserTextLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetUserTextLine2Ok() (*string, bool) {
	if o == nil || o.UserTextLine2 == nil {
		return nil, false
	}
	return o.UserTextLine2, true
}


// GetUserTextLine2Min returns the minimum length of field UserTextLine2.
func (o *Overlay) GetUserTextLine2Min() int {
	return 0
}

// GetUserTextLine2Max returns the maximum length of field UserTextLine2.
func (o *Overlay) GetUserTextLine2Max() int {
	return 110
}

// HasUserTextLine2 returns a boolean if a field has been set.
func (o *Overlay) HasUserTextLine2() bool {
	if o != nil && o.UserTextLine2 != nil {
		return true
	}

	return false
}

// SetUserTextLine2 gets a reference to the given string and assigns it to the UserTextLine2 field.
func (o *Overlay) SetUserTextLine2(v string) {
	tmp := v
	min := o.GetUserTextLine2Min()
	max := o.GetUserTextLine2Max()
	if len(tmp) < min { tmp = tmp[:min] }
	if len(tmp) > max { tmp = tmp[:max] }
	o.UserTextLine2 = &tmp
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Overlay) GetLocation() Locations {
	if o == nil || o.Location == nil {
		var ret Locations
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overlay) GetLocationOk() (*Locations, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}



// HasLocation returns a boolean if a field has been set.
func (o *Overlay) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Locations and assigns it to the Location field.
func (o *Overlay) SetLocation(v Locations) {
	tmp := v
	o.Location = &tmp
}

func (o Overlay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.VpidFormat != nil {
		toSerialize["vpidFormat"] = o.VpidFormat
	}
	if o.VpidRange != nil {
		toSerialize["vpidRange"] = o.VpidRange
	}
	if o.VpidHdr != nil {
		toSerialize["vpidHdr"] = o.VpidHdr
	}
	if o.VpidBitDepth != nil {
		toSerialize["vpidBitDepth"] = o.VpidBitDepth
	}
	if o.TimeCode != nil {
		toSerialize["timeCode"] = o.TimeCode
	}
	if o.ClosedCaption != nil {
		toSerialize["closedCaption"] = o.ClosedCaption
	}
	if o.UserTextEnabled != nil {
		toSerialize["userTextEnabled"] = o.UserTextEnabled
	}
	if o.UserTextLine1 != nil {
		toSerialize["userTextLine1"] = o.UserTextLine1
	}
	if o.UserTextLine2 != nil {
		toSerialize["userTextLine2"] = o.UserTextLine2
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}


func (o *Overlay) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasUserTextLine1() {
		var fieldChanged = false
		var v string = o.GetUserTextLine1()
		var min int = o.GetUserTextLine1Min()
		var max int = o.GetUserTextLine1Max()
		if len(v) < min {
			v = v[:min]
			fieldChanged= true
		}
		if len(v) > max {
			v = v[:max]
			fieldChanged = true
		}
		if fieldChanged {
			o.SetUserTextLine1(v)
			valueChanged = true
		}
	}
	if o.HasUserTextLine2() {
		var fieldChanged = false
		var v string = o.GetUserTextLine2()
		var min int = o.GetUserTextLine2Min()
		var max int = o.GetUserTextLine2Max()
		if len(v) < min {
			v = v[:min]
			fieldChanged= true
		}
		if len(v) > max {
			v = v[:max]
			fieldChanged = true
		}
		if fieldChanged {
			o.SetUserTextLine2(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableOverlay struct {
	value *Overlay
	isSet bool
}

func (v NullableOverlay) Get() *Overlay {
	return v.value
}

func (v *NullableOverlay) Set(val *Overlay) {
	v.value = val
	v.isSet = true
}

func (v NullableOverlay) IsSet() bool {
	return v.isSet
}

func (v *NullableOverlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverlay(val *Overlay) *NullableOverlay {
	return &NullableOverlay{value: val, isSet: true}
}

func (v NullableOverlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


