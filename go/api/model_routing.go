/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// Routing struct for Routing
type Routing struct {
	Mode *Mode `json:"mode,omitempty"`
	PreviewTap *PreviewTap `json:"previewTap,omitempty"`
	// This is the bypass state due to the button on the device being pressed
	PipelineBypassButton *bool `json:"pipelineBypassButton,omitempty"`
	// This is the bypass state set by the user in the UI
	PipelineBypassUser *bool `json:"pipelineBypassUser,omitempty"`
}

// NewRouting instantiates a new Routing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouting() *Routing {
	this := Routing{}
	var mode Mode = MODE_INPUT
	this.Mode = &mode
	var previewTap PreviewTap = PREVIEWTAP_OUTPUT
	this.PreviewTap = &previewTap
	return &this
}

// NewRoutingWithDefaults instantiates a new Routing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingWithDefaults() *Routing {
	this := Routing{}
	var mode Mode = MODE_INPUT
	this.Mode = &mode
	var previewTap PreviewTap = PREVIEWTAP_OUTPUT
	this.PreviewTap = &previewTap
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Routing) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}



// HasMode returns a boolean if a field has been set.
func (o *Routing) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *Routing) SetMode(v Mode) {
	tmp := v
	o.Mode = &tmp
}

// GetPreviewTap returns the PreviewTap field value if set, zero value otherwise.
func (o *Routing) GetPreviewTap() PreviewTap {
	if o == nil || o.PreviewTap == nil {
		var ret PreviewTap
		return ret
	}
	return *o.PreviewTap
}

// GetPreviewTapOk returns a tuple with the PreviewTap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetPreviewTapOk() (*PreviewTap, bool) {
	if o == nil || o.PreviewTap == nil {
		return nil, false
	}
	return o.PreviewTap, true
}



// HasPreviewTap returns a boolean if a field has been set.
func (o *Routing) HasPreviewTap() bool {
	if o != nil && o.PreviewTap != nil {
		return true
	}

	return false
}

// SetPreviewTap gets a reference to the given PreviewTap and assigns it to the PreviewTap field.
func (o *Routing) SetPreviewTap(v PreviewTap) {
	tmp := v
	o.PreviewTap = &tmp
}

// GetPipelineBypassButton returns the PipelineBypassButton field value if set, zero value otherwise.
func (o *Routing) GetPipelineBypassButton() bool {
	if o == nil || o.PipelineBypassButton == nil {
		var ret bool
		return ret
	}
	return *o.PipelineBypassButton
}

// GetPipelineBypassButtonOk returns a tuple with the PipelineBypassButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetPipelineBypassButtonOk() (*bool, bool) {
	if o == nil || o.PipelineBypassButton == nil {
		return nil, false
	}
	return o.PipelineBypassButton, true
}



// HasPipelineBypassButton returns a boolean if a field has been set.
func (o *Routing) HasPipelineBypassButton() bool {
	if o != nil && o.PipelineBypassButton != nil {
		return true
	}

	return false
}

// SetPipelineBypassButton gets a reference to the given bool and assigns it to the PipelineBypassButton field.
func (o *Routing) SetPipelineBypassButton(v bool) {
	tmp := v
	o.PipelineBypassButton = &tmp
}

// GetPipelineBypassUser returns the PipelineBypassUser field value if set, zero value otherwise.
func (o *Routing) GetPipelineBypassUser() bool {
	if o == nil || o.PipelineBypassUser == nil {
		var ret bool
		return ret
	}
	return *o.PipelineBypassUser
}

// GetPipelineBypassUserOk returns a tuple with the PipelineBypassUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetPipelineBypassUserOk() (*bool, bool) {
	if o == nil || o.PipelineBypassUser == nil {
		return nil, false
	}
	return o.PipelineBypassUser, true
}



// HasPipelineBypassUser returns a boolean if a field has been set.
func (o *Routing) HasPipelineBypassUser() bool {
	if o != nil && o.PipelineBypassUser != nil {
		return true
	}

	return false
}

// SetPipelineBypassUser gets a reference to the given bool and assigns it to the PipelineBypassUser field.
func (o *Routing) SetPipelineBypassUser(v bool) {
	tmp := v
	o.PipelineBypassUser = &tmp
}

func (o Routing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.PreviewTap != nil {
		toSerialize["previewTap"] = o.PreviewTap
	}
	if o.PipelineBypassButton != nil {
		toSerialize["pipelineBypassButton"] = o.PipelineBypassButton
	}
	if o.PipelineBypassUser != nil {
		toSerialize["pipelineBypassUser"] = o.PipelineBypassUser
	}
	return json.Marshal(toSerialize)
}


func (o *Routing) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	return valueChanged
}

type NullableRouting struct {
	value *Routing
	isSet bool
}

func (v NullableRouting) Get() *Routing {
	return v.value
}

func (v *NullableRouting) Set(val *Routing) {
	v.value = val
	v.isSet = true
}

func (v NullableRouting) IsSet() bool {
	return v.isSet
}

func (v *NullableRouting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouting(val *Routing) *NullableRouting {
	return &NullableRouting{value: val, isSet: true}
}

func (v NullableRouting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


