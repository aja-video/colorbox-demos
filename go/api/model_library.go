/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// Library the model 'Library'
type Library string

// List of Library
const (
	LIBRARY__1_D_LUT Library = "1D LUT"
	LIBRARY__3_D_LUT Library = "3D LUT"
	LIBRARY_MATRIX Library = "Matrix"
	LIBRARY_IMAGE Library = "Image"
	LIBRARY_SYSTEM_PRESET Library = "systemPreset"
)

// All allowed values of Library enum
var AllowedLibraryEnumValues = []Library{
	"1D LUT",
	"3D LUT",
	"Matrix",
	"Image",
	"systemPreset",
}

func (v *Library) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Library(value)
	for _, existing := range AllowedLibraryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Library", value)
}

// NewLibraryFromValue returns a pointer to a valid Library
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLibraryFromValue(v string) (*Library, error) {
	ev := Library(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Library: valid values are %v", v, AllowedLibraryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Library) IsValid() bool {
	for _, existing := range AllowedLibraryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Library value
func (v Library) Ptr() *Library {
	return &v
}

type NullableLibrary struct {
	value *Library
	isSet bool
}

func (v NullableLibrary) Get() *Library {
	return v.value
}

func (v *NullableLibrary) Set(val *Library) {
	v.value = val
	v.isSet = true
}

func (v NullableLibrary) IsSet() bool {
	return v.isSet
}

func (v *NullableLibrary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibrary(val *Library) *NullableLibrary {
	return &NullableLibrary{value: val, isSet: true}
}

func (v NullableLibrary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibrary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

