/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// CSCFilter the model 'CSCFilter'
type CSCFilter string

// List of CSCFilter
const (
	CSCFILTER_NONE CSCFilter = "None"
	CSCFILTER_AUTO CSCFilter = "Auto"
	CSCFILTER_FULL CSCFilter = "Full"
	CSCFILTER_LIGHT CSCFilter = "Light"
)

// All allowed values of CSCFilter enum
var AllowedCSCFilterEnumValues = []CSCFilter{
	"None",
	"Auto",
	"Full",
	"Light",
}

func (v *CSCFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSCFilter(value)
	for _, existing := range AllowedCSCFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSCFilter", value)
}

// NewCSCFilterFromValue returns a pointer to a valid CSCFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSCFilterFromValue(v string) (*CSCFilter, error) {
	ev := CSCFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSCFilter: valid values are %v", v, AllowedCSCFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSCFilter) IsValid() bool {
	for _, existing := range AllowedCSCFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSCFilter value
func (v CSCFilter) Ptr() *CSCFilter {
	return &v
}

type NullableCSCFilter struct {
	value *CSCFilter
	isSet bool
}

func (v NullableCSCFilter) Get() *CSCFilter {
	return v.value
}

func (v *NullableCSCFilter) Set(val *CSCFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCSCFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCSCFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSCFilter(val *CSCFilter) *NullableCSCFilter {
	return &NullableCSCFilter{value: val, isSet: true}
}

func (v NullableCSCFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSCFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

