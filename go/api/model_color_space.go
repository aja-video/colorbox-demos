/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// ColorSpace the model 'ColorSpace'
type ColorSpace string

// List of ColorSpace
const (
	COLORSPACE_AUTO ColorSpace = "Auto"
	COLORSPACE__422_YCB_CR ColorSpace = "4:2:2 YCbCr"
	COLORSPACE__444_RGB ColorSpace = "4:4:4 RGB"
)

// All allowed values of ColorSpace enum
var AllowedColorSpaceEnumValues = []ColorSpace{
	"Auto",
	"4:2:2 YCbCr",
	"4:4:4 RGB",
}

func (v *ColorSpace) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColorSpace(value)
	for _, existing := range AllowedColorSpaceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColorSpace", value)
}

// NewColorSpaceFromValue returns a pointer to a valid ColorSpace
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColorSpaceFromValue(v string) (*ColorSpace, error) {
	ev := ColorSpace(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColorSpace: valid values are %v", v, AllowedColorSpaceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColorSpace) IsValid() bool {
	for _, existing := range AllowedColorSpaceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ColorSpace value
func (v ColorSpace) Ptr() *ColorSpace {
	return &v
}

type NullableColorSpace struct {
	value *ColorSpace
	isSet bool
}

func (v NullableColorSpace) Get() *ColorSpace {
	return v.value
}

func (v *NullableColorSpace) Set(val *ColorSpace) {
	v.value = val
	v.isSet = true
}

func (v NullableColorSpace) IsSet() bool {
	return v.isSet
}

func (v *NullableColorSpace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorSpace(val *ColorSpace) *NullableColorSpace {
	return &NullableColorSpace{value: val, isSet: true}
}

func (v NullableColorSpace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorSpace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

