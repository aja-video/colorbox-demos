/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// IpConfig the model 'IpConfig'
type IpConfig string

// List of IpConfig
const (
	IPCONFIG_DHCP IpConfig = "DHCP"
	IPCONFIG_STATIC IpConfig = "Static"
)

// All allowed values of IpConfig enum
var AllowedIpConfigEnumValues = []IpConfig{
	"DHCP",
	"Static",
}

func (v *IpConfig) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpConfig(value)
	for _, existing := range AllowedIpConfigEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpConfig", value)
}

// NewIpConfigFromValue returns a pointer to a valid IpConfig
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpConfigFromValue(v string) (*IpConfig, error) {
	ev := IpConfig(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpConfig: valid values are %v", v, AllowedIpConfigEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpConfig) IsValid() bool {
	for _, existing := range AllowedIpConfigEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IpConfig value
func (v IpConfig) Ptr() *IpConfig {
	return &v
}

type NullableIpConfig struct {
	value *IpConfig
	isSet bool
}

func (v NullableIpConfig) Get() *IpConfig {
	return v.value
}

func (v *NullableIpConfig) Set(val *IpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpConfig(val *IpConfig) *NullableIpConfig {
	return &NullableIpConfig{value: val, isSet: true}
}

func (v NullableIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

