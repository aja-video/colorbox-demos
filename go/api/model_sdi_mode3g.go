/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// SdiMode3g the model 'SdiMode3g'
type SdiMode3g string

// List of SdiMode3g
const (
	SDIMODE3G_AUTO SdiMode3g = "Auto"
	SDIMODE3G_A SdiMode3g = "A"
	SDIMODE3G_B SdiMode3g = "B"
)

// All allowed values of SdiMode3g enum
var AllowedSdiMode3gEnumValues = []SdiMode3g{
	"Auto",
	"A",
	"B",
}

func (v *SdiMode3g) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SdiMode3g(value)
	for _, existing := range AllowedSdiMode3gEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SdiMode3g", value)
}

// NewSdiMode3gFromValue returns a pointer to a valid SdiMode3g
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSdiMode3gFromValue(v string) (*SdiMode3g, error) {
	ev := SdiMode3g(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SdiMode3g: valid values are %v", v, AllowedSdiMode3gEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SdiMode3g) IsValid() bool {
	for _, existing := range AllowedSdiMode3gEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SdiMode3g value
func (v SdiMode3g) Ptr() *SdiMode3g {
	return &v
}

type NullableSdiMode3g struct {
	value *SdiMode3g
	isSet bool
}

func (v NullableSdiMode3g) Get() *SdiMode3g {
	return v.value
}

func (v *NullableSdiMode3g) Set(val *SdiMode3g) {
	v.value = val
	v.isSet = true
}

func (v NullableSdiMode3g) IsSet() bool {
	return v.isSet
}

func (v *NullableSdiMode3g) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdiMode3g(val *SdiMode3g) *NullableSdiMode3g {
	return &NullableSdiMode3g{value: val, isSet: true}
}

func (v NullableSdiMode3g) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdiMode3g) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

