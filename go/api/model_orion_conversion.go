/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrionConversion the model 'OrionConversion'
type OrionConversion string

// List of OrionConversion
const (
	ORIONCONVERSION_HLG_TO_SDR OrionConversion = "HLG to SDR"
	ORIONCONVERSION_SDR_TO_HLG OrionConversion = "SDR to HLG"
	ORIONCONVERSION_HLG_COMPRESS OrionConversion = "HLG Compress"
	ORIONCONVERSION_PQ_TO_SDR OrionConversion = "PQ to SDR"
	ORIONCONVERSION_SDR_TO_PQ OrionConversion = "SDR to PQ"
	ORIONCONVERSION_PQ_COMPRESS OrionConversion = "PQ Compress"
	ORIONCONVERSION_HLG_TO_PQ OrionConversion = "HLG to PQ"
	ORIONCONVERSION_PQ_TO_HLG OrionConversion = "PQ to HLG"
)

// All allowed values of OrionConversion enum
var AllowedOrionConversionEnumValues = []OrionConversion{
	"HLG to SDR",
	"SDR to HLG",
	"HLG Compress",
	"PQ to SDR",
	"SDR to PQ",
	"PQ Compress",
	"HLG to PQ",
	"PQ to HLG",
}

func (v *OrionConversion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrionConversion(value)
	for _, existing := range AllowedOrionConversionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrionConversion", value)
}

// NewOrionConversionFromValue returns a pointer to a valid OrionConversion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrionConversionFromValue(v string) (*OrionConversion, error) {
	ev := OrionConversion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrionConversion: valid values are %v", v, AllowedOrionConversionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrionConversion) IsValid() bool {
	for _, existing := range AllowedOrionConversionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrionConversion value
func (v OrionConversion) Ptr() *OrionConversion {
	return &v
}

type NullableOrionConversion struct {
	value *OrionConversion
	isSet bool
}

func (v NullableOrionConversion) Get() *OrionConversion {
	return v.value
}

func (v *NullableOrionConversion) Set(val *OrionConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableOrionConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableOrionConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrionConversion(val *OrionConversion) *NullableOrionConversion {
	return &NullableOrionConversion{value: val, isSet: true}
}

func (v NullableOrionConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrionConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

