/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// ColorfrontLiveMode struct for ColorfrontLiveMode
type ColorfrontLiveMode struct {
	Engine *ColorfrontEngine `json:"engine,omitempty"`
	InDynRangeGamut *ColorfrontDynRangeGamutLiveModeIn `json:"inDynRangeGamut,omitempty"`
	OutDynRangeGamut *ColorfrontDynRangeGamutLiveModeOut `json:"outDynRangeGamut,omitempty"`
	SdrPreview *bool `json:"sdrPreview,omitempty"`
	HdrAmount *float32 `json:"hdrAmount,omitempty"`
	AmbLightComp *float32 `json:"ambLightComp,omitempty"`
	HdrLogLook *float32 `json:"hdrLogLook,omitempty"`
	SdrSoftness *float32 `json:"sdrSoftness,omitempty"`
	LiftMaster *float32 `json:"liftMaster,omitempty"`
	LiftRed *float32 `json:"liftRed,omitempty"`
	LiftGreen *float32 `json:"liftGreen,omitempty"`
	LiftBlue *float32 `json:"liftBlue,omitempty"`
	GammaMaster *float32 `json:"gammaMaster,omitempty"`
	GammaRed *float32 `json:"gammaRed,omitempty"`
	GammaGreen *float32 `json:"gammaGreen,omitempty"`
	GammaBlue *float32 `json:"gammaBlue,omitempty"`
	GainMaster *float32 `json:"gainMaster,omitempty"`
	GainRed *float32 `json:"gainRed,omitempty"`
	GainGreen *float32 `json:"gainGreen,omitempty"`
	GainBlue *float32 `json:"gainBlue,omitempty"`
	Saturation *float32 `json:"saturation,omitempty"`
	Exposure *float32 `json:"exposure,omitempty"`
	ColorTemp *float32 `json:"colorTemp,omitempty"`
	Tint *float32 `json:"tint,omitempty"`
	PqOutputNitLevel *float32 `json:"pqOutputNitLevel,omitempty"`
	P3ColorspaceClamp *bool `json:"p3ColorspaceClamp,omitempty"`
	Bt2408Mode *float32 `json:"bt2408Mode,omitempty"`
}

// NewColorfrontLiveMode instantiates a new ColorfrontLiveMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorfrontLiveMode() *ColorfrontLiveMode {
	this := ColorfrontLiveMode{}
	var engine ColorfrontEngine = COLORFRONTENGINE_DEFAULT
	this.Engine = &engine
	var inDynRangeGamut ColorfrontDynRangeGamutLiveModeIn = COLORFRONTDYNRANGEGAMUTLIVEMODEIN_SDR_BT_709_100_NITS
	this.InDynRangeGamut = &inDynRangeGamut
	var outDynRangeGamut ColorfrontDynRangeGamutLiveModeOut = COLORFRONTDYNRANGEGAMUTLIVEMODEOUT_SDR_BT_709_100_NITS
	this.OutDynRangeGamut = &outDynRangeGamut
	var sdrPreview bool = false
	this.SdrPreview = &sdrPreview
	var hdrAmount float32 = 0
	this.HdrAmount = &hdrAmount
	var ambLightComp float32 = 0
	this.AmbLightComp = &ambLightComp
	var hdrLogLook float32 = 0.5
	this.HdrLogLook = &hdrLogLook
	var sdrSoftness float32 = 0
	this.SdrSoftness = &sdrSoftness
	var liftMaster float32 = 0
	this.LiftMaster = &liftMaster
	var liftRed float32 = 0
	this.LiftRed = &liftRed
	var liftGreen float32 = 0
	this.LiftGreen = &liftGreen
	var liftBlue float32 = 0
	this.LiftBlue = &liftBlue
	var gammaMaster float32 = 1
	this.GammaMaster = &gammaMaster
	var gammaRed float32 = 1
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 1
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 1
	this.GammaBlue = &gammaBlue
	var gainMaster float32 = 1
	this.GainMaster = &gainMaster
	var gainRed float32 = 1
	this.GainRed = &gainRed
	var gainGreen float32 = 1
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1
	this.GainBlue = &gainBlue
	var saturation float32 = 1.0
	this.Saturation = &saturation
	var exposure float32 = 0
	this.Exposure = &exposure
	var colorTemp float32 = 0
	this.ColorTemp = &colorTemp
	var tint float32 = 0
	this.Tint = &tint
	var pqOutputNitLevel float32 = 1000
	this.PqOutputNitLevel = &pqOutputNitLevel
	var p3ColorspaceClamp bool = false
	this.P3ColorspaceClamp = &p3ColorspaceClamp
	var bt2408Mode float32 = 0
	this.Bt2408Mode = &bt2408Mode
	return &this
}

// NewColorfrontLiveModeWithDefaults instantiates a new ColorfrontLiveMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorfrontLiveModeWithDefaults() *ColorfrontLiveMode {
	this := ColorfrontLiveMode{}
	var engine ColorfrontEngine = COLORFRONTENGINE_DEFAULT
	this.Engine = &engine
	var inDynRangeGamut ColorfrontDynRangeGamutLiveModeIn = COLORFRONTDYNRANGEGAMUTLIVEMODEIN_SDR_BT_709_100_NITS
	this.InDynRangeGamut = &inDynRangeGamut
	var outDynRangeGamut ColorfrontDynRangeGamutLiveModeOut = COLORFRONTDYNRANGEGAMUTLIVEMODEOUT_SDR_BT_709_100_NITS
	this.OutDynRangeGamut = &outDynRangeGamut
	var sdrPreview bool = false
	this.SdrPreview = &sdrPreview
	var hdrAmount float32 = 0
	this.HdrAmount = &hdrAmount
	var ambLightComp float32 = 0
	this.AmbLightComp = &ambLightComp
	var hdrLogLook float32 = 0.5
	this.HdrLogLook = &hdrLogLook
	var sdrSoftness float32 = 0
	this.SdrSoftness = &sdrSoftness
	var liftMaster float32 = 0
	this.LiftMaster = &liftMaster
	var liftRed float32 = 0
	this.LiftRed = &liftRed
	var liftGreen float32 = 0
	this.LiftGreen = &liftGreen
	var liftBlue float32 = 0
	this.LiftBlue = &liftBlue
	var gammaMaster float32 = 1
	this.GammaMaster = &gammaMaster
	var gammaRed float32 = 1
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 1
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 1
	this.GammaBlue = &gammaBlue
	var gainMaster float32 = 1
	this.GainMaster = &gainMaster
	var gainRed float32 = 1
	this.GainRed = &gainRed
	var gainGreen float32 = 1
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1
	this.GainBlue = &gainBlue
	var saturation float32 = 1.0
	this.Saturation = &saturation
	var exposure float32 = 0
	this.Exposure = &exposure
	var colorTemp float32 = 0
	this.ColorTemp = &colorTemp
	var tint float32 = 0
	this.Tint = &tint
	var pqOutputNitLevel float32 = 1000
	this.PqOutputNitLevel = &pqOutputNitLevel
	var p3ColorspaceClamp bool = false
	this.P3ColorspaceClamp = &p3ColorspaceClamp
	var bt2408Mode float32 = 0
	this.Bt2408Mode = &bt2408Mode
	return &this
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetEngine() ColorfrontEngine {
	if o == nil || o.Engine == nil {
		var ret ColorfrontEngine
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetEngineOk() (*ColorfrontEngine, bool) {
	if o == nil || o.Engine == nil {
		return nil, false
	}
	return o.Engine, true
}



// HasEngine returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasEngine() bool {
	if o != nil && o.Engine != nil {
		return true
	}

	return false
}

// SetEngine gets a reference to the given ColorfrontEngine and assigns it to the Engine field.
func (o *ColorfrontLiveMode) SetEngine(v ColorfrontEngine) {
	tmp := v
	o.Engine = &tmp
}

// GetInDynRangeGamut returns the InDynRangeGamut field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetInDynRangeGamut() ColorfrontDynRangeGamutLiveModeIn {
	if o == nil || o.InDynRangeGamut == nil {
		var ret ColorfrontDynRangeGamutLiveModeIn
		return ret
	}
	return *o.InDynRangeGamut
}

// GetInDynRangeGamutOk returns a tuple with the InDynRangeGamut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetInDynRangeGamutOk() (*ColorfrontDynRangeGamutLiveModeIn, bool) {
	if o == nil || o.InDynRangeGamut == nil {
		return nil, false
	}
	return o.InDynRangeGamut, true
}



// HasInDynRangeGamut returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasInDynRangeGamut() bool {
	if o != nil && o.InDynRangeGamut != nil {
		return true
	}

	return false
}

// SetInDynRangeGamut gets a reference to the given ColorfrontDynRangeGamutLiveModeIn and assigns it to the InDynRangeGamut field.
func (o *ColorfrontLiveMode) SetInDynRangeGamut(v ColorfrontDynRangeGamutLiveModeIn) {
	tmp := v
	o.InDynRangeGamut = &tmp
}

// GetOutDynRangeGamut returns the OutDynRangeGamut field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetOutDynRangeGamut() ColorfrontDynRangeGamutLiveModeOut {
	if o == nil || o.OutDynRangeGamut == nil {
		var ret ColorfrontDynRangeGamutLiveModeOut
		return ret
	}
	return *o.OutDynRangeGamut
}

// GetOutDynRangeGamutOk returns a tuple with the OutDynRangeGamut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetOutDynRangeGamutOk() (*ColorfrontDynRangeGamutLiveModeOut, bool) {
	if o == nil || o.OutDynRangeGamut == nil {
		return nil, false
	}
	return o.OutDynRangeGamut, true
}



// HasOutDynRangeGamut returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasOutDynRangeGamut() bool {
	if o != nil && o.OutDynRangeGamut != nil {
		return true
	}

	return false
}

// SetOutDynRangeGamut gets a reference to the given ColorfrontDynRangeGamutLiveModeOut and assigns it to the OutDynRangeGamut field.
func (o *ColorfrontLiveMode) SetOutDynRangeGamut(v ColorfrontDynRangeGamutLiveModeOut) {
	tmp := v
	o.OutDynRangeGamut = &tmp
}

// GetSdrPreview returns the SdrPreview field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetSdrPreview() bool {
	if o == nil || o.SdrPreview == nil {
		var ret bool
		return ret
	}
	return *o.SdrPreview
}

// GetSdrPreviewOk returns a tuple with the SdrPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetSdrPreviewOk() (*bool, bool) {
	if o == nil || o.SdrPreview == nil {
		return nil, false
	}
	return o.SdrPreview, true
}



// HasSdrPreview returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasSdrPreview() bool {
	if o != nil && o.SdrPreview != nil {
		return true
	}

	return false
}

// SetSdrPreview gets a reference to the given bool and assigns it to the SdrPreview field.
func (o *ColorfrontLiveMode) SetSdrPreview(v bool) {
	tmp := v
	o.SdrPreview = &tmp
}

// GetHdrAmount returns the HdrAmount field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetHdrAmount() float32 {
	if o == nil || o.HdrAmount == nil {
		var ret float32
		return ret
	}
	return *o.HdrAmount
}

// GetHdrAmountOk returns a tuple with the HdrAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetHdrAmountOk() (*float32, bool) {
	if o == nil || o.HdrAmount == nil {
		return nil, false
	}
	return o.HdrAmount, true
}

// GetHdrAmountMin returns the minimum value for field HdrAmount.
func (o *ColorfrontLiveMode) GetHdrAmountMin() float32 {
	return -1.0
}

// GetHdrAmountMax returns the maximum value for field HdrAmount.
func (o *ColorfrontLiveMode) GetHdrAmountMax() float32 {
	return 1.0
}


// HasHdrAmount returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasHdrAmount() bool {
	if o != nil && o.HdrAmount != nil {
		return true
	}

	return false
}

// SetHdrAmount gets a reference to the given float32 and assigns it to the HdrAmount field.
func (o *ColorfrontLiveMode) SetHdrAmount(v float32) {
	tmp := v
	min := o.GetHdrAmountMin()
	max := o.GetHdrAmountMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.HdrAmount = &tmp
}

// GetAmbLightComp returns the AmbLightComp field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetAmbLightComp() float32 {
	if o == nil || o.AmbLightComp == nil {
		var ret float32
		return ret
	}
	return *o.AmbLightComp
}

// GetAmbLightCompOk returns a tuple with the AmbLightComp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetAmbLightCompOk() (*float32, bool) {
	if o == nil || o.AmbLightComp == nil {
		return nil, false
	}
	return o.AmbLightComp, true
}

// GetAmbLightCompMin returns the minimum value for field AmbLightComp.
func (o *ColorfrontLiveMode) GetAmbLightCompMin() float32 {
	return -1.0
}

// GetAmbLightCompMax returns the maximum value for field AmbLightComp.
func (o *ColorfrontLiveMode) GetAmbLightCompMax() float32 {
	return 1.0
}


// HasAmbLightComp returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasAmbLightComp() bool {
	if o != nil && o.AmbLightComp != nil {
		return true
	}

	return false
}

// SetAmbLightComp gets a reference to the given float32 and assigns it to the AmbLightComp field.
func (o *ColorfrontLiveMode) SetAmbLightComp(v float32) {
	tmp := v
	min := o.GetAmbLightCompMin()
	max := o.GetAmbLightCompMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.AmbLightComp = &tmp
}

// GetHdrLogLook returns the HdrLogLook field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetHdrLogLook() float32 {
	if o == nil || o.HdrLogLook == nil {
		var ret float32
		return ret
	}
	return *o.HdrLogLook
}

// GetHdrLogLookOk returns a tuple with the HdrLogLook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetHdrLogLookOk() (*float32, bool) {
	if o == nil || o.HdrLogLook == nil {
		return nil, false
	}
	return o.HdrLogLook, true
}

// GetHdrLogLookMin returns the minimum value for field HdrLogLook.
func (o *ColorfrontLiveMode) GetHdrLogLookMin() float32 {
	return 0.0
}

// GetHdrLogLookMax returns the maximum value for field HdrLogLook.
func (o *ColorfrontLiveMode) GetHdrLogLookMax() float32 {
	return 1.0
}


// HasHdrLogLook returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasHdrLogLook() bool {
	if o != nil && o.HdrLogLook != nil {
		return true
	}

	return false
}

// SetHdrLogLook gets a reference to the given float32 and assigns it to the HdrLogLook field.
func (o *ColorfrontLiveMode) SetHdrLogLook(v float32) {
	tmp := v
	min := o.GetHdrLogLookMin()
	max := o.GetHdrLogLookMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.HdrLogLook = &tmp
}

// GetSdrSoftness returns the SdrSoftness field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetSdrSoftness() float32 {
	if o == nil || o.SdrSoftness == nil {
		var ret float32
		return ret
	}
	return *o.SdrSoftness
}

// GetSdrSoftnessOk returns a tuple with the SdrSoftness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetSdrSoftnessOk() (*float32, bool) {
	if o == nil || o.SdrSoftness == nil {
		return nil, false
	}
	return o.SdrSoftness, true
}

// GetSdrSoftnessMin returns the minimum value for field SdrSoftness.
func (o *ColorfrontLiveMode) GetSdrSoftnessMin() float32 {
	return 0.0
}

// GetSdrSoftnessMax returns the maximum value for field SdrSoftness.
func (o *ColorfrontLiveMode) GetSdrSoftnessMax() float32 {
	return 1.0
}


// HasSdrSoftness returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasSdrSoftness() bool {
	if o != nil && o.SdrSoftness != nil {
		return true
	}

	return false
}

// SetSdrSoftness gets a reference to the given float32 and assigns it to the SdrSoftness field.
func (o *ColorfrontLiveMode) SetSdrSoftness(v float32) {
	tmp := v
	min := o.GetSdrSoftnessMin()
	max := o.GetSdrSoftnessMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.SdrSoftness = &tmp
}

// GetLiftMaster returns the LiftMaster field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetLiftMaster() float32 {
	if o == nil || o.LiftMaster == nil {
		var ret float32
		return ret
	}
	return *o.LiftMaster
}

// GetLiftMasterOk returns a tuple with the LiftMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetLiftMasterOk() (*float32, bool) {
	if o == nil || o.LiftMaster == nil {
		return nil, false
	}
	return o.LiftMaster, true
}

// GetLiftMasterMin returns the minimum value for field LiftMaster.
func (o *ColorfrontLiveMode) GetLiftMasterMin() float32 {
	return -1.0
}

// GetLiftMasterMax returns the maximum value for field LiftMaster.
func (o *ColorfrontLiveMode) GetLiftMasterMax() float32 {
	return 1.0
}


// HasLiftMaster returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasLiftMaster() bool {
	if o != nil && o.LiftMaster != nil {
		return true
	}

	return false
}

// SetLiftMaster gets a reference to the given float32 and assigns it to the LiftMaster field.
func (o *ColorfrontLiveMode) SetLiftMaster(v float32) {
	tmp := v
	min := o.GetLiftMasterMin()
	max := o.GetLiftMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftMaster = &tmp
}

// GetLiftRed returns the LiftRed field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetLiftRed() float32 {
	if o == nil || o.LiftRed == nil {
		var ret float32
		return ret
	}
	return *o.LiftRed
}

// GetLiftRedOk returns a tuple with the LiftRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetLiftRedOk() (*float32, bool) {
	if o == nil || o.LiftRed == nil {
		return nil, false
	}
	return o.LiftRed, true
}

// GetLiftRedMin returns the minimum value for field LiftRed.
func (o *ColorfrontLiveMode) GetLiftRedMin() float32 {
	return -1.0
}

// GetLiftRedMax returns the maximum value for field LiftRed.
func (o *ColorfrontLiveMode) GetLiftRedMax() float32 {
	return 1.0
}


// HasLiftRed returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasLiftRed() bool {
	if o != nil && o.LiftRed != nil {
		return true
	}

	return false
}

// SetLiftRed gets a reference to the given float32 and assigns it to the LiftRed field.
func (o *ColorfrontLiveMode) SetLiftRed(v float32) {
	tmp := v
	min := o.GetLiftRedMin()
	max := o.GetLiftRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftRed = &tmp
}

// GetLiftGreen returns the LiftGreen field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetLiftGreen() float32 {
	if o == nil || o.LiftGreen == nil {
		var ret float32
		return ret
	}
	return *o.LiftGreen
}

// GetLiftGreenOk returns a tuple with the LiftGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetLiftGreenOk() (*float32, bool) {
	if o == nil || o.LiftGreen == nil {
		return nil, false
	}
	return o.LiftGreen, true
}

// GetLiftGreenMin returns the minimum value for field LiftGreen.
func (o *ColorfrontLiveMode) GetLiftGreenMin() float32 {
	return -1.0
}

// GetLiftGreenMax returns the maximum value for field LiftGreen.
func (o *ColorfrontLiveMode) GetLiftGreenMax() float32 {
	return 1.0
}


// HasLiftGreen returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasLiftGreen() bool {
	if o != nil && o.LiftGreen != nil {
		return true
	}

	return false
}

// SetLiftGreen gets a reference to the given float32 and assigns it to the LiftGreen field.
func (o *ColorfrontLiveMode) SetLiftGreen(v float32) {
	tmp := v
	min := o.GetLiftGreenMin()
	max := o.GetLiftGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftGreen = &tmp
}

// GetLiftBlue returns the LiftBlue field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetLiftBlue() float32 {
	if o == nil || o.LiftBlue == nil {
		var ret float32
		return ret
	}
	return *o.LiftBlue
}

// GetLiftBlueOk returns a tuple with the LiftBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetLiftBlueOk() (*float32, bool) {
	if o == nil || o.LiftBlue == nil {
		return nil, false
	}
	return o.LiftBlue, true
}

// GetLiftBlueMin returns the minimum value for field LiftBlue.
func (o *ColorfrontLiveMode) GetLiftBlueMin() float32 {
	return -1.0
}

// GetLiftBlueMax returns the maximum value for field LiftBlue.
func (o *ColorfrontLiveMode) GetLiftBlueMax() float32 {
	return 1.0
}


// HasLiftBlue returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasLiftBlue() bool {
	if o != nil && o.LiftBlue != nil {
		return true
	}

	return false
}

// SetLiftBlue gets a reference to the given float32 and assigns it to the LiftBlue field.
func (o *ColorfrontLiveMode) SetLiftBlue(v float32) {
	tmp := v
	min := o.GetLiftBlueMin()
	max := o.GetLiftBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftBlue = &tmp
}

// GetGammaMaster returns the GammaMaster field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGammaMaster() float32 {
	if o == nil || o.GammaMaster == nil {
		var ret float32
		return ret
	}
	return *o.GammaMaster
}

// GetGammaMasterOk returns a tuple with the GammaMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGammaMasterOk() (*float32, bool) {
	if o == nil || o.GammaMaster == nil {
		return nil, false
	}
	return o.GammaMaster, true
}

// GetGammaMasterMin returns the minimum value for field GammaMaster.
func (o *ColorfrontLiveMode) GetGammaMasterMin() float32 {
	return 0.0
}

// GetGammaMasterMax returns the maximum value for field GammaMaster.
func (o *ColorfrontLiveMode) GetGammaMasterMax() float32 {
	return 2.0
}


// HasGammaMaster returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGammaMaster() bool {
	if o != nil && o.GammaMaster != nil {
		return true
	}

	return false
}

// SetGammaMaster gets a reference to the given float32 and assigns it to the GammaMaster field.
func (o *ColorfrontLiveMode) SetGammaMaster(v float32) {
	tmp := v
	min := o.GetGammaMasterMin()
	max := o.GetGammaMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaMaster = &tmp
}

// GetGammaRed returns the GammaRed field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGammaRed() float32 {
	if o == nil || o.GammaRed == nil {
		var ret float32
		return ret
	}
	return *o.GammaRed
}

// GetGammaRedOk returns a tuple with the GammaRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGammaRedOk() (*float32, bool) {
	if o == nil || o.GammaRed == nil {
		return nil, false
	}
	return o.GammaRed, true
}

// GetGammaRedMin returns the minimum value for field GammaRed.
func (o *ColorfrontLiveMode) GetGammaRedMin() float32 {
	return 0.0
}

// GetGammaRedMax returns the maximum value for field GammaRed.
func (o *ColorfrontLiveMode) GetGammaRedMax() float32 {
	return 2.0
}


// HasGammaRed returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGammaRed() bool {
	if o != nil && o.GammaRed != nil {
		return true
	}

	return false
}

// SetGammaRed gets a reference to the given float32 and assigns it to the GammaRed field.
func (o *ColorfrontLiveMode) SetGammaRed(v float32) {
	tmp := v
	min := o.GetGammaRedMin()
	max := o.GetGammaRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaRed = &tmp
}

// GetGammaGreen returns the GammaGreen field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGammaGreen() float32 {
	if o == nil || o.GammaGreen == nil {
		var ret float32
		return ret
	}
	return *o.GammaGreen
}

// GetGammaGreenOk returns a tuple with the GammaGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGammaGreenOk() (*float32, bool) {
	if o == nil || o.GammaGreen == nil {
		return nil, false
	}
	return o.GammaGreen, true
}

// GetGammaGreenMin returns the minimum value for field GammaGreen.
func (o *ColorfrontLiveMode) GetGammaGreenMin() float32 {
	return 0.0
}

// GetGammaGreenMax returns the maximum value for field GammaGreen.
func (o *ColorfrontLiveMode) GetGammaGreenMax() float32 {
	return 2.0
}


// HasGammaGreen returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGammaGreen() bool {
	if o != nil && o.GammaGreen != nil {
		return true
	}

	return false
}

// SetGammaGreen gets a reference to the given float32 and assigns it to the GammaGreen field.
func (o *ColorfrontLiveMode) SetGammaGreen(v float32) {
	tmp := v
	min := o.GetGammaGreenMin()
	max := o.GetGammaGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaGreen = &tmp
}

// GetGammaBlue returns the GammaBlue field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGammaBlue() float32 {
	if o == nil || o.GammaBlue == nil {
		var ret float32
		return ret
	}
	return *o.GammaBlue
}

// GetGammaBlueOk returns a tuple with the GammaBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGammaBlueOk() (*float32, bool) {
	if o == nil || o.GammaBlue == nil {
		return nil, false
	}
	return o.GammaBlue, true
}

// GetGammaBlueMin returns the minimum value for field GammaBlue.
func (o *ColorfrontLiveMode) GetGammaBlueMin() float32 {
	return 0.0
}

// GetGammaBlueMax returns the maximum value for field GammaBlue.
func (o *ColorfrontLiveMode) GetGammaBlueMax() float32 {
	return 2.0
}


// HasGammaBlue returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGammaBlue() bool {
	if o != nil && o.GammaBlue != nil {
		return true
	}

	return false
}

// SetGammaBlue gets a reference to the given float32 and assigns it to the GammaBlue field.
func (o *ColorfrontLiveMode) SetGammaBlue(v float32) {
	tmp := v
	min := o.GetGammaBlueMin()
	max := o.GetGammaBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaBlue = &tmp
}

// GetGainMaster returns the GainMaster field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGainMaster() float32 {
	if o == nil || o.GainMaster == nil {
		var ret float32
		return ret
	}
	return *o.GainMaster
}

// GetGainMasterOk returns a tuple with the GainMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGainMasterOk() (*float32, bool) {
	if o == nil || o.GainMaster == nil {
		return nil, false
	}
	return o.GainMaster, true
}

// GetGainMasterMin returns the minimum value for field GainMaster.
func (o *ColorfrontLiveMode) GetGainMasterMin() float32 {
	return 0.0
}

// GetGainMasterMax returns the maximum value for field GainMaster.
func (o *ColorfrontLiveMode) GetGainMasterMax() float32 {
	return 5.0
}


// HasGainMaster returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGainMaster() bool {
	if o != nil && o.GainMaster != nil {
		return true
	}

	return false
}

// SetGainMaster gets a reference to the given float32 and assigns it to the GainMaster field.
func (o *ColorfrontLiveMode) SetGainMaster(v float32) {
	tmp := v
	min := o.GetGainMasterMin()
	max := o.GetGainMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainMaster = &tmp
}

// GetGainRed returns the GainRed field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGainRed() float32 {
	if o == nil || o.GainRed == nil {
		var ret float32
		return ret
	}
	return *o.GainRed
}

// GetGainRedOk returns a tuple with the GainRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGainRedOk() (*float32, bool) {
	if o == nil || o.GainRed == nil {
		return nil, false
	}
	return o.GainRed, true
}

// GetGainRedMin returns the minimum value for field GainRed.
func (o *ColorfrontLiveMode) GetGainRedMin() float32 {
	return 0.0
}

// GetGainRedMax returns the maximum value for field GainRed.
func (o *ColorfrontLiveMode) GetGainRedMax() float32 {
	return 5.0
}


// HasGainRed returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGainRed() bool {
	if o != nil && o.GainRed != nil {
		return true
	}

	return false
}

// SetGainRed gets a reference to the given float32 and assigns it to the GainRed field.
func (o *ColorfrontLiveMode) SetGainRed(v float32) {
	tmp := v
	min := o.GetGainRedMin()
	max := o.GetGainRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainRed = &tmp
}

// GetGainGreen returns the GainGreen field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGainGreen() float32 {
	if o == nil || o.GainGreen == nil {
		var ret float32
		return ret
	}
	return *o.GainGreen
}

// GetGainGreenOk returns a tuple with the GainGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGainGreenOk() (*float32, bool) {
	if o == nil || o.GainGreen == nil {
		return nil, false
	}
	return o.GainGreen, true
}

// GetGainGreenMin returns the minimum value for field GainGreen.
func (o *ColorfrontLiveMode) GetGainGreenMin() float32 {
	return 0.0
}

// GetGainGreenMax returns the maximum value for field GainGreen.
func (o *ColorfrontLiveMode) GetGainGreenMax() float32 {
	return 5.0
}


// HasGainGreen returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGainGreen() bool {
	if o != nil && o.GainGreen != nil {
		return true
	}

	return false
}

// SetGainGreen gets a reference to the given float32 and assigns it to the GainGreen field.
func (o *ColorfrontLiveMode) SetGainGreen(v float32) {
	tmp := v
	min := o.GetGainGreenMin()
	max := o.GetGainGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainGreen = &tmp
}

// GetGainBlue returns the GainBlue field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetGainBlue() float32 {
	if o == nil || o.GainBlue == nil {
		var ret float32
		return ret
	}
	return *o.GainBlue
}

// GetGainBlueOk returns a tuple with the GainBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetGainBlueOk() (*float32, bool) {
	if o == nil || o.GainBlue == nil {
		return nil, false
	}
	return o.GainBlue, true
}

// GetGainBlueMin returns the minimum value for field GainBlue.
func (o *ColorfrontLiveMode) GetGainBlueMin() float32 {
	return 0.0
}

// GetGainBlueMax returns the maximum value for field GainBlue.
func (o *ColorfrontLiveMode) GetGainBlueMax() float32 {
	return 5.0
}


// HasGainBlue returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasGainBlue() bool {
	if o != nil && o.GainBlue != nil {
		return true
	}

	return false
}

// SetGainBlue gets a reference to the given float32 and assigns it to the GainBlue field.
func (o *ColorfrontLiveMode) SetGainBlue(v float32) {
	tmp := v
	min := o.GetGainBlueMin()
	max := o.GetGainBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainBlue = &tmp
}

// GetSaturation returns the Saturation field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetSaturation() float32 {
	if o == nil || o.Saturation == nil {
		var ret float32
		return ret
	}
	return *o.Saturation
}

// GetSaturationOk returns a tuple with the Saturation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetSaturationOk() (*float32, bool) {
	if o == nil || o.Saturation == nil {
		return nil, false
	}
	return o.Saturation, true
}

// GetSaturationMin returns the minimum value for field Saturation.
func (o *ColorfrontLiveMode) GetSaturationMin() float32 {
	return 0.0
}

// GetSaturationMax returns the maximum value for field Saturation.
func (o *ColorfrontLiveMode) GetSaturationMax() float32 {
	return 2.0
}


// HasSaturation returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasSaturation() bool {
	if o != nil && o.Saturation != nil {
		return true
	}

	return false
}

// SetSaturation gets a reference to the given float32 and assigns it to the Saturation field.
func (o *ColorfrontLiveMode) SetSaturation(v float32) {
	tmp := v
	min := o.GetSaturationMin()
	max := o.GetSaturationMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Saturation = &tmp
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetExposure() float32 {
	if o == nil || o.Exposure == nil {
		var ret float32
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetExposureOk() (*float32, bool) {
	if o == nil || o.Exposure == nil {
		return nil, false
	}
	return o.Exposure, true
}

// GetExposureMin returns the minimum value for field Exposure.
func (o *ColorfrontLiveMode) GetExposureMin() float32 {
	return -4.0
}

// GetExposureMax returns the maximum value for field Exposure.
func (o *ColorfrontLiveMode) GetExposureMax() float32 {
	return 4.0
}


// HasExposure returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasExposure() bool {
	if o != nil && o.Exposure != nil {
		return true
	}

	return false
}

// SetExposure gets a reference to the given float32 and assigns it to the Exposure field.
func (o *ColorfrontLiveMode) SetExposure(v float32) {
	tmp := v
	min := o.GetExposureMin()
	max := o.GetExposureMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Exposure = &tmp
}

// GetColorTemp returns the ColorTemp field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetColorTemp() float32 {
	if o == nil || o.ColorTemp == nil {
		var ret float32
		return ret
	}
	return *o.ColorTemp
}

// GetColorTempOk returns a tuple with the ColorTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetColorTempOk() (*float32, bool) {
	if o == nil || o.ColorTemp == nil {
		return nil, false
	}
	return o.ColorTemp, true
}

// GetColorTempMin returns the minimum value for field ColorTemp.
func (o *ColorfrontLiveMode) GetColorTempMin() float32 {
	return -10.0
}

// GetColorTempMax returns the maximum value for field ColorTemp.
func (o *ColorfrontLiveMode) GetColorTempMax() float32 {
	return 10.0
}


// HasColorTemp returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasColorTemp() bool {
	if o != nil && o.ColorTemp != nil {
		return true
	}

	return false
}

// SetColorTemp gets a reference to the given float32 and assigns it to the ColorTemp field.
func (o *ColorfrontLiveMode) SetColorTemp(v float32) {
	tmp := v
	min := o.GetColorTempMin()
	max := o.GetColorTempMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.ColorTemp = &tmp
}

// GetTint returns the Tint field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetTint() float32 {
	if o == nil || o.Tint == nil {
		var ret float32
		return ret
	}
	return *o.Tint
}

// GetTintOk returns a tuple with the Tint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetTintOk() (*float32, bool) {
	if o == nil || o.Tint == nil {
		return nil, false
	}
	return o.Tint, true
}

// GetTintMin returns the minimum value for field Tint.
func (o *ColorfrontLiveMode) GetTintMin() float32 {
	return -16.0
}

// GetTintMax returns the maximum value for field Tint.
func (o *ColorfrontLiveMode) GetTintMax() float32 {
	return 16.0
}


// HasTint returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasTint() bool {
	if o != nil && o.Tint != nil {
		return true
	}

	return false
}

// SetTint gets a reference to the given float32 and assigns it to the Tint field.
func (o *ColorfrontLiveMode) SetTint(v float32) {
	tmp := v
	min := o.GetTintMin()
	max := o.GetTintMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Tint = &tmp
}

// GetPqOutputNitLevel returns the PqOutputNitLevel field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetPqOutputNitLevel() float32 {
	if o == nil || o.PqOutputNitLevel == nil {
		var ret float32
		return ret
	}
	return *o.PqOutputNitLevel
}

// GetPqOutputNitLevelOk returns a tuple with the PqOutputNitLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetPqOutputNitLevelOk() (*float32, bool) {
	if o == nil || o.PqOutputNitLevel == nil {
		return nil, false
	}
	return o.PqOutputNitLevel, true
}

// GetPqOutputNitLevelMin returns the minimum value for field PqOutputNitLevel.
func (o *ColorfrontLiveMode) GetPqOutputNitLevelMin() float32 {
	return 48
}

// GetPqOutputNitLevelMax returns the maximum value for field PqOutputNitLevel.
func (o *ColorfrontLiveMode) GetPqOutputNitLevelMax() float32 {
	return 4000
}


// HasPqOutputNitLevel returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasPqOutputNitLevel() bool {
	if o != nil && o.PqOutputNitLevel != nil {
		return true
	}

	return false
}

// SetPqOutputNitLevel gets a reference to the given float32 and assigns it to the PqOutputNitLevel field.
func (o *ColorfrontLiveMode) SetPqOutputNitLevel(v float32) {
	tmp := v
	min := o.GetPqOutputNitLevelMin()
	max := o.GetPqOutputNitLevelMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.PqOutputNitLevel = &tmp
}

// GetP3ColorspaceClamp returns the P3ColorspaceClamp field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetP3ColorspaceClamp() bool {
	if o == nil || o.P3ColorspaceClamp == nil {
		var ret bool
		return ret
	}
	return *o.P3ColorspaceClamp
}

// GetP3ColorspaceClampOk returns a tuple with the P3ColorspaceClamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetP3ColorspaceClampOk() (*bool, bool) {
	if o == nil || o.P3ColorspaceClamp == nil {
		return nil, false
	}
	return o.P3ColorspaceClamp, true
}



// HasP3ColorspaceClamp returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasP3ColorspaceClamp() bool {
	if o != nil && o.P3ColorspaceClamp != nil {
		return true
	}

	return false
}

// SetP3ColorspaceClamp gets a reference to the given bool and assigns it to the P3ColorspaceClamp field.
func (o *ColorfrontLiveMode) SetP3ColorspaceClamp(v bool) {
	tmp := v
	o.P3ColorspaceClamp = &tmp
}

// GetBt2408Mode returns the Bt2408Mode field value if set, zero value otherwise.
func (o *ColorfrontLiveMode) GetBt2408Mode() float32 {
	if o == nil || o.Bt2408Mode == nil {
		var ret float32
		return ret
	}
	return *o.Bt2408Mode
}

// GetBt2408ModeOk returns a tuple with the Bt2408Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontLiveMode) GetBt2408ModeOk() (*float32, bool) {
	if o == nil || o.Bt2408Mode == nil {
		return nil, false
	}
	return o.Bt2408Mode, true
}

// GetBt2408ModeMin returns the minimum value for field Bt2408Mode.
func (o *ColorfrontLiveMode) GetBt2408ModeMin() float32 {
	return 0.0
}

// GetBt2408ModeMax returns the maximum value for field Bt2408Mode.
func (o *ColorfrontLiveMode) GetBt2408ModeMax() float32 {
	return 1.0
}


// HasBt2408Mode returns a boolean if a field has been set.
func (o *ColorfrontLiveMode) HasBt2408Mode() bool {
	if o != nil && o.Bt2408Mode != nil {
		return true
	}

	return false
}

// SetBt2408Mode gets a reference to the given float32 and assigns it to the Bt2408Mode field.
func (o *ColorfrontLiveMode) SetBt2408Mode(v float32) {
	tmp := v
	min := o.GetBt2408ModeMin()
	max := o.GetBt2408ModeMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Bt2408Mode = &tmp
}

func (o ColorfrontLiveMode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Engine != nil {
		toSerialize["engine"] = o.Engine
	}
	if o.InDynRangeGamut != nil {
		toSerialize["inDynRangeGamut"] = o.InDynRangeGamut
	}
	if o.OutDynRangeGamut != nil {
		toSerialize["outDynRangeGamut"] = o.OutDynRangeGamut
	}
	if o.SdrPreview != nil {
		toSerialize["sdrPreview"] = o.SdrPreview
	}
	if o.HdrAmount != nil {
		toSerialize["hdrAmount"] = o.HdrAmount
	}
	if o.AmbLightComp != nil {
		toSerialize["ambLightComp"] = o.AmbLightComp
	}
	if o.HdrLogLook != nil {
		toSerialize["hdrLogLook"] = o.HdrLogLook
	}
	if o.SdrSoftness != nil {
		toSerialize["sdrSoftness"] = o.SdrSoftness
	}
	if o.LiftMaster != nil {
		toSerialize["liftMaster"] = o.LiftMaster
	}
	if o.LiftRed != nil {
		toSerialize["liftRed"] = o.LiftRed
	}
	if o.LiftGreen != nil {
		toSerialize["liftGreen"] = o.LiftGreen
	}
	if o.LiftBlue != nil {
		toSerialize["liftBlue"] = o.LiftBlue
	}
	if o.GammaMaster != nil {
		toSerialize["gammaMaster"] = o.GammaMaster
	}
	if o.GammaRed != nil {
		toSerialize["gammaRed"] = o.GammaRed
	}
	if o.GammaGreen != nil {
		toSerialize["gammaGreen"] = o.GammaGreen
	}
	if o.GammaBlue != nil {
		toSerialize["gammaBlue"] = o.GammaBlue
	}
	if o.GainMaster != nil {
		toSerialize["gainMaster"] = o.GainMaster
	}
	if o.GainRed != nil {
		toSerialize["gainRed"] = o.GainRed
	}
	if o.GainGreen != nil {
		toSerialize["gainGreen"] = o.GainGreen
	}
	if o.GainBlue != nil {
		toSerialize["gainBlue"] = o.GainBlue
	}
	if o.Saturation != nil {
		toSerialize["saturation"] = o.Saturation
	}
	if o.Exposure != nil {
		toSerialize["exposure"] = o.Exposure
	}
	if o.ColorTemp != nil {
		toSerialize["colorTemp"] = o.ColorTemp
	}
	if o.Tint != nil {
		toSerialize["tint"] = o.Tint
	}
	if o.PqOutputNitLevel != nil {
		toSerialize["pqOutputNitLevel"] = o.PqOutputNitLevel
	}
	if o.P3ColorspaceClamp != nil {
		toSerialize["p3ColorspaceClamp"] = o.P3ColorspaceClamp
	}
	if o.Bt2408Mode != nil {
		toSerialize["bt2408Mode"] = o.Bt2408Mode
	}
	return json.Marshal(toSerialize)
}


func (o *ColorfrontLiveMode) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasHdrAmount() {
		var fieldChanged = false
		var v float32 = o.GetHdrAmount()
		var min float32 = o.GetHdrAmountMin()
		var max float32 = o.GetHdrAmountMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetHdrAmount(v)
			valueChanged = true
		}
	}
	if o.HasAmbLightComp() {
		var fieldChanged = false
		var v float32 = o.GetAmbLightComp()
		var min float32 = o.GetAmbLightCompMin()
		var max float32 = o.GetAmbLightCompMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetAmbLightComp(v)
			valueChanged = true
		}
	}
	if o.HasHdrLogLook() {
		var fieldChanged = false
		var v float32 = o.GetHdrLogLook()
		var min float32 = o.GetHdrLogLookMin()
		var max float32 = o.GetHdrLogLookMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetHdrLogLook(v)
			valueChanged = true
		}
	}
	if o.HasSdrSoftness() {
		var fieldChanged = false
		var v float32 = o.GetSdrSoftness()
		var min float32 = o.GetSdrSoftnessMin()
		var max float32 = o.GetSdrSoftnessMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetSdrSoftness(v)
			valueChanged = true
		}
	}
	if o.HasLiftMaster() {
		var fieldChanged = false
		var v float32 = o.GetLiftMaster()
		var min float32 = o.GetLiftMasterMin()
		var max float32 = o.GetLiftMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftMaster(v)
			valueChanged = true
		}
	}
	if o.HasLiftRed() {
		var fieldChanged = false
		var v float32 = o.GetLiftRed()
		var min float32 = o.GetLiftRedMin()
		var max float32 = o.GetLiftRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftRed(v)
			valueChanged = true
		}
	}
	if o.HasLiftGreen() {
		var fieldChanged = false
		var v float32 = o.GetLiftGreen()
		var min float32 = o.GetLiftGreenMin()
		var max float32 = o.GetLiftGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftGreen(v)
			valueChanged = true
		}
	}
	if o.HasLiftBlue() {
		var fieldChanged = false
		var v float32 = o.GetLiftBlue()
		var min float32 = o.GetLiftBlueMin()
		var max float32 = o.GetLiftBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftBlue(v)
			valueChanged = true
		}
	}
	if o.HasGammaMaster() {
		var fieldChanged = false
		var v float32 = o.GetGammaMaster()
		var min float32 = o.GetGammaMasterMin()
		var max float32 = o.GetGammaMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaMaster(v)
			valueChanged = true
		}
	}
	if o.HasGammaRed() {
		var fieldChanged = false
		var v float32 = o.GetGammaRed()
		var min float32 = o.GetGammaRedMin()
		var max float32 = o.GetGammaRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaRed(v)
			valueChanged = true
		}
	}
	if o.HasGammaGreen() {
		var fieldChanged = false
		var v float32 = o.GetGammaGreen()
		var min float32 = o.GetGammaGreenMin()
		var max float32 = o.GetGammaGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaGreen(v)
			valueChanged = true
		}
	}
	if o.HasGammaBlue() {
		var fieldChanged = false
		var v float32 = o.GetGammaBlue()
		var min float32 = o.GetGammaBlueMin()
		var max float32 = o.GetGammaBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaBlue(v)
			valueChanged = true
		}
	}
	if o.HasGainMaster() {
		var fieldChanged = false
		var v float32 = o.GetGainMaster()
		var min float32 = o.GetGainMasterMin()
		var max float32 = o.GetGainMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainMaster(v)
			valueChanged = true
		}
	}
	if o.HasGainRed() {
		var fieldChanged = false
		var v float32 = o.GetGainRed()
		var min float32 = o.GetGainRedMin()
		var max float32 = o.GetGainRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainRed(v)
			valueChanged = true
		}
	}
	if o.HasGainGreen() {
		var fieldChanged = false
		var v float32 = o.GetGainGreen()
		var min float32 = o.GetGainGreenMin()
		var max float32 = o.GetGainGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainGreen(v)
			valueChanged = true
		}
	}
	if o.HasGainBlue() {
		var fieldChanged = false
		var v float32 = o.GetGainBlue()
		var min float32 = o.GetGainBlueMin()
		var max float32 = o.GetGainBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainBlue(v)
			valueChanged = true
		}
	}
	if o.HasSaturation() {
		var fieldChanged = false
		var v float32 = o.GetSaturation()
		var min float32 = o.GetSaturationMin()
		var max float32 = o.GetSaturationMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetSaturation(v)
			valueChanged = true
		}
	}
	if o.HasExposure() {
		var fieldChanged = false
		var v float32 = o.GetExposure()
		var min float32 = o.GetExposureMin()
		var max float32 = o.GetExposureMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetExposure(v)
			valueChanged = true
		}
	}
	if o.HasColorTemp() {
		var fieldChanged = false
		var v float32 = o.GetColorTemp()
		var min float32 = o.GetColorTempMin()
		var max float32 = o.GetColorTempMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetColorTemp(v)
			valueChanged = true
		}
	}
	if o.HasTint() {
		var fieldChanged = false
		var v float32 = o.GetTint()
		var min float32 = o.GetTintMin()
		var max float32 = o.GetTintMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetTint(v)
			valueChanged = true
		}
	}
	if o.HasPqOutputNitLevel() {
		var fieldChanged = false
		var v float32 = o.GetPqOutputNitLevel()
		var min float32 = o.GetPqOutputNitLevelMin()
		var max float32 = o.GetPqOutputNitLevelMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetPqOutputNitLevel(v)
			valueChanged = true
		}
	}
	if o.HasBt2408Mode() {
		var fieldChanged = false
		var v float32 = o.GetBt2408Mode()
		var min float32 = o.GetBt2408ModeMin()
		var max float32 = o.GetBt2408ModeMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBt2408Mode(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableColorfrontLiveMode struct {
	value *ColorfrontLiveMode
	isSet bool
}

func (v NullableColorfrontLiveMode) Get() *ColorfrontLiveMode {
	return v.value
}

func (v *NullableColorfrontLiveMode) Set(val *ColorfrontLiveMode) {
	v.value = val
	v.isSet = true
}

func (v NullableColorfrontLiveMode) IsSet() bool {
	return v.isSet
}

func (v *NullableColorfrontLiveMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorfrontLiveMode(val *ColorfrontLiveMode) *NullableColorfrontLiveMode {
	return &NullableColorfrontLiveMode{value: val, isSet: true}
}

func (v NullableColorfrontLiveMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorfrontLiveMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


