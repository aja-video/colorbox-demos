/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// FrameStore struct for FrameStore
type FrameStore struct {
	// true if frame store is enabled else disabled
	Enabled *bool `json:"enabled,omitempty"`
	// true if frame store can be dynamically adjusted
	Dynamic *bool `json:"dynamic,omitempty"`
	// The custom name for the captured image
	ImageName *string `json:"imageName,omitempty"`
	// Flag to append the timecode of the captured image onto the filename
	TimecodeAppended *bool `json:"timecodeAppended,omitempty"`
	FileType *FileTypeChoice `json:"fileType,omitempty"`
	// library entry number, zero is black
	LibraryEntry *int32 `json:"libraryEntry,omitempty"`
	Format *VideoFormat `json:"format,omitempty"`
	Convert *VideoConvertChoice `json:"convert,omitempty"`
	RgbRange *RgbRange `json:"rgbRange,omitempty"`
}

// NewFrameStore instantiates a new FrameStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameStore() *FrameStore {
	this := FrameStore{}
	var convert VideoConvertChoice = VIDEOCONVERTCHOICE_VIDEO_CONVERT_ACTUAL
	this.Convert = &convert
	return &this
}

// NewFrameStoreWithDefaults instantiates a new FrameStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameStoreWithDefaults() *FrameStore {
	this := FrameStore{}
	var convert VideoConvertChoice = VIDEOCONVERTCHOICE_VIDEO_CONVERT_ACTUAL
	this.Convert = &convert
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FrameStore) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}



// HasEnabled returns a boolean if a field has been set.
func (o *FrameStore) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FrameStore) SetEnabled(v bool) {
	tmp := v
	o.Enabled = &tmp
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *FrameStore) GetDynamic() bool {
	if o == nil || o.Dynamic == nil {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetDynamicOk() (*bool, bool) {
	if o == nil || o.Dynamic == nil {
		return nil, false
	}
	return o.Dynamic, true
}



// HasDynamic returns a boolean if a field has been set.
func (o *FrameStore) HasDynamic() bool {
	if o != nil && o.Dynamic != nil {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *FrameStore) SetDynamic(v bool) {
	tmp := v
	o.Dynamic = &tmp
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *FrameStore) GetImageName() string {
	if o == nil || o.ImageName == nil {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetImageNameOk() (*string, bool) {
	if o == nil || o.ImageName == nil {
		return nil, false
	}
	return o.ImageName, true
}



// HasImageName returns a boolean if a field has been set.
func (o *FrameStore) HasImageName() bool {
	if o != nil && o.ImageName != nil {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *FrameStore) SetImageName(v string) {
	tmp := v
	o.ImageName = &tmp
}

// GetTimecodeAppended returns the TimecodeAppended field value if set, zero value otherwise.
func (o *FrameStore) GetTimecodeAppended() bool {
	if o == nil || o.TimecodeAppended == nil {
		var ret bool
		return ret
	}
	return *o.TimecodeAppended
}

// GetTimecodeAppendedOk returns a tuple with the TimecodeAppended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetTimecodeAppendedOk() (*bool, bool) {
	if o == nil || o.TimecodeAppended == nil {
		return nil, false
	}
	return o.TimecodeAppended, true
}



// HasTimecodeAppended returns a boolean if a field has been set.
func (o *FrameStore) HasTimecodeAppended() bool {
	if o != nil && o.TimecodeAppended != nil {
		return true
	}

	return false
}

// SetTimecodeAppended gets a reference to the given bool and assigns it to the TimecodeAppended field.
func (o *FrameStore) SetTimecodeAppended(v bool) {
	tmp := v
	o.TimecodeAppended = &tmp
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *FrameStore) GetFileType() FileTypeChoice {
	if o == nil || o.FileType == nil {
		var ret FileTypeChoice
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetFileTypeOk() (*FileTypeChoice, bool) {
	if o == nil || o.FileType == nil {
		return nil, false
	}
	return o.FileType, true
}



// HasFileType returns a boolean if a field has been set.
func (o *FrameStore) HasFileType() bool {
	if o != nil && o.FileType != nil {
		return true
	}

	return false
}

// SetFileType gets a reference to the given FileTypeChoice and assigns it to the FileType field.
func (o *FrameStore) SetFileType(v FileTypeChoice) {
	tmp := v
	o.FileType = &tmp
}

// GetLibraryEntry returns the LibraryEntry field value if set, zero value otherwise.
func (o *FrameStore) GetLibraryEntry() int32 {
	if o == nil || o.LibraryEntry == nil {
		var ret int32
		return ret
	}
	return *o.LibraryEntry
}

// GetLibraryEntryOk returns a tuple with the LibraryEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetLibraryEntryOk() (*int32, bool) {
	if o == nil || o.LibraryEntry == nil {
		return nil, false
	}
	return o.LibraryEntry, true
}



// HasLibraryEntry returns a boolean if a field has been set.
func (o *FrameStore) HasLibraryEntry() bool {
	if o != nil && o.LibraryEntry != nil {
		return true
	}

	return false
}

// SetLibraryEntry gets a reference to the given int32 and assigns it to the LibraryEntry field.
func (o *FrameStore) SetLibraryEntry(v int32) {
	tmp := v
	o.LibraryEntry = &tmp
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *FrameStore) GetFormat() VideoFormat {
	if o == nil || o.Format == nil {
		var ret VideoFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetFormatOk() (*VideoFormat, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}



// HasFormat returns a boolean if a field has been set.
func (o *FrameStore) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given VideoFormat and assigns it to the Format field.
func (o *FrameStore) SetFormat(v VideoFormat) {
	tmp := v
	o.Format = &tmp
}

// GetConvert returns the Convert field value if set, zero value otherwise.
func (o *FrameStore) GetConvert() VideoConvertChoice {
	if o == nil || o.Convert == nil {
		var ret VideoConvertChoice
		return ret
	}
	return *o.Convert
}

// GetConvertOk returns a tuple with the Convert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetConvertOk() (*VideoConvertChoice, bool) {
	if o == nil || o.Convert == nil {
		return nil, false
	}
	return o.Convert, true
}



// HasConvert returns a boolean if a field has been set.
func (o *FrameStore) HasConvert() bool {
	if o != nil && o.Convert != nil {
		return true
	}

	return false
}

// SetConvert gets a reference to the given VideoConvertChoice and assigns it to the Convert field.
func (o *FrameStore) SetConvert(v VideoConvertChoice) {
	tmp := v
	o.Convert = &tmp
}

// GetRgbRange returns the RgbRange field value if set, zero value otherwise.
func (o *FrameStore) GetRgbRange() RgbRange {
	if o == nil || o.RgbRange == nil {
		var ret RgbRange
		return ret
	}
	return *o.RgbRange
}

// GetRgbRangeOk returns a tuple with the RgbRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameStore) GetRgbRangeOk() (*RgbRange, bool) {
	if o == nil || o.RgbRange == nil {
		return nil, false
	}
	return o.RgbRange, true
}



// HasRgbRange returns a boolean if a field has been set.
func (o *FrameStore) HasRgbRange() bool {
	if o != nil && o.RgbRange != nil {
		return true
	}

	return false
}

// SetRgbRange gets a reference to the given RgbRange and assigns it to the RgbRange field.
func (o *FrameStore) SetRgbRange(v RgbRange) {
	tmp := v
	o.RgbRange = &tmp
}

func (o FrameStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Dynamic != nil {
		toSerialize["dynamic"] = o.Dynamic
	}
	if o.ImageName != nil {
		toSerialize["imageName"] = o.ImageName
	}
	if o.TimecodeAppended != nil {
		toSerialize["timecodeAppended"] = o.TimecodeAppended
	}
	if o.FileType != nil {
		toSerialize["fileType"] = o.FileType
	}
	if o.LibraryEntry != nil {
		toSerialize["libraryEntry"] = o.LibraryEntry
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Convert != nil {
		toSerialize["convert"] = o.Convert
	}
	if o.RgbRange != nil {
		toSerialize["rgbRange"] = o.RgbRange
	}
	return json.Marshal(toSerialize)
}


func (o *FrameStore) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasImageName() {
		var fieldChanged = false
		var v string = o.GetImageName()
		if fieldChanged {
			o.SetImageName(v)
			valueChanged = true
		}
	}
	if o.HasLibraryEntry() {
		var fieldChanged = false
		var v int32 = o.GetLibraryEntry()
		if fieldChanged {
			o.SetLibraryEntry(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableFrameStore struct {
	value *FrameStore
	isSet bool
}

func (v NullableFrameStore) Get() *FrameStore {
	return v.value
}

func (v *NullableFrameStore) Set(val *FrameStore) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameStore) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameStore(val *FrameStore) *NullableFrameStore {
	return &NullableFrameStore{value: val, isSet: true}
}

func (v NullableFrameStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


