/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// LibraryControl struct for LibraryControl
type LibraryControl struct {
	Library *Library `json:"library,omitempty"`
	// The library entry to act on(starting at 1)
	Entry *int32 `json:"entry,omitempty"`
	Action *LibraryAction `json:"action,omitempty"`
	// Data to be used with action
	Data *string `json:"data,omitempty"`
	// Message to alert when things go wrong
	ErrorMsg *string `json:"errorMsg,omitempty"`
}

// NewLibraryControl instantiates a new LibraryControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryControl() *LibraryControl {
	this := LibraryControl{}
	return &this
}

// NewLibraryControlWithDefaults instantiates a new LibraryControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryControlWithDefaults() *LibraryControl {
	this := LibraryControl{}
	return &this
}

// GetLibrary returns the Library field value if set, zero value otherwise.
func (o *LibraryControl) GetLibrary() Library {
	if o == nil || o.Library == nil {
		var ret Library
		return ret
	}
	return *o.Library
}

// GetLibraryOk returns a tuple with the Library field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControl) GetLibraryOk() (*Library, bool) {
	if o == nil || o.Library == nil {
		return nil, false
	}
	return o.Library, true
}



// HasLibrary returns a boolean if a field has been set.
func (o *LibraryControl) HasLibrary() bool {
	if o != nil && o.Library != nil {
		return true
	}

	return false
}

// SetLibrary gets a reference to the given Library and assigns it to the Library field.
func (o *LibraryControl) SetLibrary(v Library) {
	tmp := v
	o.Library = &tmp
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *LibraryControl) GetEntry() int32 {
	if o == nil || o.Entry == nil {
		var ret int32
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControl) GetEntryOk() (*int32, bool) {
	if o == nil || o.Entry == nil {
		return nil, false
	}
	return o.Entry, true
}



// HasEntry returns a boolean if a field has been set.
func (o *LibraryControl) HasEntry() bool {
	if o != nil && o.Entry != nil {
		return true
	}

	return false
}

// SetEntry gets a reference to the given int32 and assigns it to the Entry field.
func (o *LibraryControl) SetEntry(v int32) {
	tmp := v
	o.Entry = &tmp
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *LibraryControl) GetAction() LibraryAction {
	if o == nil || o.Action == nil {
		var ret LibraryAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControl) GetActionOk() (*LibraryAction, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}



// HasAction returns a boolean if a field has been set.
func (o *LibraryControl) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given LibraryAction and assigns it to the Action field.
func (o *LibraryControl) SetAction(v LibraryAction) {
	tmp := v
	o.Action = &tmp
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *LibraryControl) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControl) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}



// HasData returns a boolean if a field has been set.
func (o *LibraryControl) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *LibraryControl) SetData(v string) {
	tmp := v
	o.Data = &tmp
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *LibraryControl) GetErrorMsg() string {
	if o == nil || o.ErrorMsg == nil {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryControl) GetErrorMsgOk() (*string, bool) {
	if o == nil || o.ErrorMsg == nil {
		return nil, false
	}
	return o.ErrorMsg, true
}



// HasErrorMsg returns a boolean if a field has been set.
func (o *LibraryControl) HasErrorMsg() bool {
	if o != nil && o.ErrorMsg != nil {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *LibraryControl) SetErrorMsg(v string) {
	tmp := v
	o.ErrorMsg = &tmp
}

func (o LibraryControl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Library != nil {
		toSerialize["library"] = o.Library
	}
	if o.Entry != nil {
		toSerialize["entry"] = o.Entry
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ErrorMsg != nil {
		toSerialize["errorMsg"] = o.ErrorMsg
	}
	return json.Marshal(toSerialize)
}


func (o *LibraryControl) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasEntry() {
		var fieldChanged = false
		var v int32 = o.GetEntry()
		if fieldChanged {
			o.SetEntry(v)
			valueChanged = true
		}
	}
	if o.HasData() {
		var fieldChanged = false
		var v string = o.GetData()
		if fieldChanged {
			o.SetData(v)
			valueChanged = true
		}
	}
	if o.HasErrorMsg() {
		var fieldChanged = false
		var v string = o.GetErrorMsg()
		if fieldChanged {
			o.SetErrorMsg(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableLibraryControl struct {
	value *LibraryControl
	isSet bool
}

func (v NullableLibraryControl) Get() *LibraryControl {
	return v.value
}

func (v *NullableLibraryControl) Set(val *LibraryControl) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryControl) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryControl(val *LibraryControl) *NullableLibraryControl {
	return &NullableLibraryControl{value: val, isSet: true}
}

func (v NullableLibraryControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


