/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// RgbRange the model 'RgbRange'
type RgbRange string

// List of RgbRange
const (
	RGBRANGE_AUTO RgbRange = "Auto"
	RGBRANGE_SMPTE_FULL RgbRange = "SMPTE Full"
	RGBRANGE_SMPTE_NARROW RgbRange = "SMPTE Narrow"
)

// All allowed values of RgbRange enum
var AllowedRgbRangeEnumValues = []RgbRange{
	"Auto",
	"SMPTE Full",
	"SMPTE Narrow",
}

func (v *RgbRange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RgbRange(value)
	for _, existing := range AllowedRgbRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RgbRange", value)
}

// NewRgbRangeFromValue returns a pointer to a valid RgbRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRgbRangeFromValue(v string) (*RgbRange, error) {
	ev := RgbRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RgbRange: valid values are %v", v, AllowedRgbRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RgbRange) IsValid() bool {
	for _, existing := range AllowedRgbRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RgbRange value
func (v RgbRange) Ptr() *RgbRange {
	return &v
}

type NullableRgbRange struct {
	value *RgbRange
	isSet bool
}

func (v NullableRgbRange) Get() *RgbRange {
	return v.value
}

func (v *NullableRgbRange) Set(val *RgbRange) {
	v.value = val
	v.isSet = true
}

func (v NullableRgbRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRgbRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRgbRange(val *RgbRange) *NullableRgbRange {
	return &NullableRgbRange{value: val, isSet: true}
}

func (v NullableRgbRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRgbRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

