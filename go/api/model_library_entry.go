/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// LibraryEntry struct for LibraryEntry
type LibraryEntry struct {
	UserName *string `json:"userName,omitempty"`
	FileName *string `json:"fileName,omitempty"`
}

// NewLibraryEntry instantiates a new LibraryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryEntry() *LibraryEntry {
	this := LibraryEntry{}
	return &this
}

// NewLibraryEntryWithDefaults instantiates a new LibraryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryEntryWithDefaults() *LibraryEntry {
	this := LibraryEntry{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *LibraryEntry) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryEntry) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}



// HasUserName returns a boolean if a field has been set.
func (o *LibraryEntry) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *LibraryEntry) SetUserName(v string) {
	tmp := v
	o.UserName = &tmp
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *LibraryEntry) GetFileName() string {
	if o == nil || o.FileName == nil {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryEntry) GetFileNameOk() (*string, bool) {
	if o == nil || o.FileName == nil {
		return nil, false
	}
	return o.FileName, true
}



// HasFileName returns a boolean if a field has been set.
func (o *LibraryEntry) HasFileName() bool {
	if o != nil && o.FileName != nil {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *LibraryEntry) SetFileName(v string) {
	tmp := v
	o.FileName = &tmp
}

func (o LibraryEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	if o.FileName != nil {
		toSerialize["fileName"] = o.FileName
	}
	return json.Marshal(toSerialize)
}


func (o *LibraryEntry) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasUserName() {
		var fieldChanged = false
		var v string = o.GetUserName()
		if fieldChanged {
			o.SetUserName(v)
			valueChanged = true
		}
	}
	if o.HasFileName() {
		var fieldChanged = false
		var v string = o.GetFileName()
		if fieldChanged {
			o.SetFileName(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableLibraryEntry struct {
	value *LibraryEntry
	isSet bool
}

func (v NullableLibraryEntry) Get() *LibraryEntry {
	return v.value
}

func (v *NullableLibraryEntry) Set(val *LibraryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryEntry(val *LibraryEntry) *NullableLibraryEntry {
	return &NullableLibraryEntry{value: val, isSet: true}
}

func (v NullableLibraryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


