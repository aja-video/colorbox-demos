/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// SystemStatus struct for SystemStatus
type SystemStatus struct {
	SafebootVersion *string `json:"safebootVersion,omitempty"`
	MainbootVersion *string `json:"mainbootVersion,omitempty"`
	RunningVersion *string `json:"runningVersion,omitempty"`
	Safeboot *bool `json:"safeboot,omitempty"`
	UpdateMsg []string `json:"updateMsg,omitempty"`
}

// NewSystemStatus instantiates a new SystemStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemStatus() *SystemStatus {
	this := SystemStatus{}
	return &this
}

// NewSystemStatusWithDefaults instantiates a new SystemStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemStatusWithDefaults() *SystemStatus {
	this := SystemStatus{}
	return &this
}

// GetSafebootVersion returns the SafebootVersion field value if set, zero value otherwise.
func (o *SystemStatus) GetSafebootVersion() string {
	if o == nil || o.SafebootVersion == nil {
		var ret string
		return ret
	}
	return *o.SafebootVersion
}

// GetSafebootVersionOk returns a tuple with the SafebootVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStatus) GetSafebootVersionOk() (*string, bool) {
	if o == nil || o.SafebootVersion == nil {
		return nil, false
	}
	return o.SafebootVersion, true
}



// HasSafebootVersion returns a boolean if a field has been set.
func (o *SystemStatus) HasSafebootVersion() bool {
	if o != nil && o.SafebootVersion != nil {
		return true
	}

	return false
}

// SetSafebootVersion gets a reference to the given string and assigns it to the SafebootVersion field.
func (o *SystemStatus) SetSafebootVersion(v string) {
	tmp := v
	o.SafebootVersion = &tmp
}

// GetMainbootVersion returns the MainbootVersion field value if set, zero value otherwise.
func (o *SystemStatus) GetMainbootVersion() string {
	if o == nil || o.MainbootVersion == nil {
		var ret string
		return ret
	}
	return *o.MainbootVersion
}

// GetMainbootVersionOk returns a tuple with the MainbootVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStatus) GetMainbootVersionOk() (*string, bool) {
	if o == nil || o.MainbootVersion == nil {
		return nil, false
	}
	return o.MainbootVersion, true
}



// HasMainbootVersion returns a boolean if a field has been set.
func (o *SystemStatus) HasMainbootVersion() bool {
	if o != nil && o.MainbootVersion != nil {
		return true
	}

	return false
}

// SetMainbootVersion gets a reference to the given string and assigns it to the MainbootVersion field.
func (o *SystemStatus) SetMainbootVersion(v string) {
	tmp := v
	o.MainbootVersion = &tmp
}

// GetRunningVersion returns the RunningVersion field value if set, zero value otherwise.
func (o *SystemStatus) GetRunningVersion() string {
	if o == nil || o.RunningVersion == nil {
		var ret string
		return ret
	}
	return *o.RunningVersion
}

// GetRunningVersionOk returns a tuple with the RunningVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStatus) GetRunningVersionOk() (*string, bool) {
	if o == nil || o.RunningVersion == nil {
		return nil, false
	}
	return o.RunningVersion, true
}



// HasRunningVersion returns a boolean if a field has been set.
func (o *SystemStatus) HasRunningVersion() bool {
	if o != nil && o.RunningVersion != nil {
		return true
	}

	return false
}

// SetRunningVersion gets a reference to the given string and assigns it to the RunningVersion field.
func (o *SystemStatus) SetRunningVersion(v string) {
	tmp := v
	o.RunningVersion = &tmp
}

// GetSafeboot returns the Safeboot field value if set, zero value otherwise.
func (o *SystemStatus) GetSafeboot() bool {
	if o == nil || o.Safeboot == nil {
		var ret bool
		return ret
	}
	return *o.Safeboot
}

// GetSafebootOk returns a tuple with the Safeboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStatus) GetSafebootOk() (*bool, bool) {
	if o == nil || o.Safeboot == nil {
		return nil, false
	}
	return o.Safeboot, true
}



// HasSafeboot returns a boolean if a field has been set.
func (o *SystemStatus) HasSafeboot() bool {
	if o != nil && o.Safeboot != nil {
		return true
	}

	return false
}

// SetSafeboot gets a reference to the given bool and assigns it to the Safeboot field.
func (o *SystemStatus) SetSafeboot(v bool) {
	tmp := v
	o.Safeboot = &tmp
}

// GetUpdateMsg returns the UpdateMsg field value if set, zero value otherwise.
func (o *SystemStatus) GetUpdateMsg() []string {
	if o == nil || o.UpdateMsg == nil {
		var ret []string
		return ret
	}
	return o.UpdateMsg
}

// GetUpdateMsgOk returns a tuple with the UpdateMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStatus) GetUpdateMsgOk() ([]string, bool) {
	if o == nil || o.UpdateMsg == nil {
		return nil, false
	}
	return o.UpdateMsg, true
}



// HasUpdateMsg returns a boolean if a field has been set.
func (o *SystemStatus) HasUpdateMsg() bool {
	if o != nil && o.UpdateMsg != nil {
		return true
	}

	return false
}

// SetUpdateMsg gets a reference to the given []string and assigns it to the UpdateMsg field.
func (o *SystemStatus) SetUpdateMsg(v []string) {
	tmp := v
	o.UpdateMsg = tmp
}

func (o SystemStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SafebootVersion != nil {
		toSerialize["safebootVersion"] = o.SafebootVersion
	}
	if o.MainbootVersion != nil {
		toSerialize["mainbootVersion"] = o.MainbootVersion
	}
	if o.RunningVersion != nil {
		toSerialize["runningVersion"] = o.RunningVersion
	}
	if o.Safeboot != nil {
		toSerialize["safeboot"] = o.Safeboot
	}
	if o.UpdateMsg != nil {
		toSerialize["updateMsg"] = o.UpdateMsg
	}
	return json.Marshal(toSerialize)
}


func (o *SystemStatus) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasSafebootVersion() {
		var fieldChanged = false
		var v string = o.GetSafebootVersion()
		if fieldChanged {
			o.SetSafebootVersion(v)
			valueChanged = true
		}
	}
	if o.HasMainbootVersion() {
		var fieldChanged = false
		var v string = o.GetMainbootVersion()
		if fieldChanged {
			o.SetMainbootVersion(v)
			valueChanged = true
		}
	}
	if o.HasRunningVersion() {
		var fieldChanged = false
		var v string = o.GetRunningVersion()
		if fieldChanged {
			o.SetRunningVersion(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableSystemStatus struct {
	value *SystemStatus
	isSet bool
}

func (v NullableSystemStatus) Get() *SystemStatus {
	return v.value
}

func (v *NullableSystemStatus) Set(val *SystemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemStatus(val *SystemStatus) *NullableSystemStatus {
	return &NullableSystemStatus{value: val, isSet: true}
}

func (v NullableSystemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


