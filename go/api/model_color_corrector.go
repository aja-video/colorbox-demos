/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// ColorCorrector struct for ColorCorrector
type ColorCorrector struct {
	BlackRed *float32 `json:"blackRed,omitempty"`
	BlackGreen *float32 `json:"blackGreen,omitempty"`
	BlackBlue *float32 `json:"blackBlue,omitempty"`
	GainRed *float32 `json:"gainRed,omitempty"`
	GainGreen *float32 `json:"gainGreen,omitempty"`
	GainBlue *float32 `json:"gainBlue,omitempty"`
	GammaRed *float32 `json:"gammaRed,omitempty"`
	GammaGreen *float32 `json:"gammaGreen,omitempty"`
	GammaBlue *float32 `json:"gammaBlue,omitempty"`
	UnitsBlack *string `json:"unitsBlack,omitempty"`
	UnitsGain *string `json:"unitsGain,omitempty"`
	UnitsGamma *string `json:"unitsGamma,omitempty"`
}

// NewColorCorrector instantiates a new ColorCorrector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorCorrector() *ColorCorrector {
	this := ColorCorrector{}
	var blackRed float32 = 0.0
	this.BlackRed = &blackRed
	var blackGreen float32 = 0.0
	this.BlackGreen = &blackGreen
	var blackBlue float32 = 0.0
	this.BlackBlue = &blackBlue
	var gainRed float32 = 1.0
	this.GainRed = &gainRed
	var gainGreen float32 = 1.0
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1.0
	this.GainBlue = &gainBlue
	var gammaRed float32 = 0.0
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 0.0
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 0.0
	this.GammaBlue = &gammaBlue
	var unitsBlack string = "IRE"
	this.UnitsBlack = &unitsBlack
	var unitsGain string = ""
	this.UnitsGain = &unitsGain
	var unitsGamma string = ""
	this.UnitsGamma = &unitsGamma
	return &this
}

// NewColorCorrectorWithDefaults instantiates a new ColorCorrector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorCorrectorWithDefaults() *ColorCorrector {
	this := ColorCorrector{}
	var blackRed float32 = 0.0
	this.BlackRed = &blackRed
	var blackGreen float32 = 0.0
	this.BlackGreen = &blackGreen
	var blackBlue float32 = 0.0
	this.BlackBlue = &blackBlue
	var gainRed float32 = 1.0
	this.GainRed = &gainRed
	var gainGreen float32 = 1.0
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1.0
	this.GainBlue = &gainBlue
	var gammaRed float32 = 0.0
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 0.0
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 0.0
	this.GammaBlue = &gammaBlue
	var unitsBlack string = "IRE"
	this.UnitsBlack = &unitsBlack
	var unitsGain string = ""
	this.UnitsGain = &unitsGain
	var unitsGamma string = ""
	this.UnitsGamma = &unitsGamma
	return &this
}

// GetBlackRed returns the BlackRed field value if set, zero value otherwise.
func (o *ColorCorrector) GetBlackRed() float32 {
	if o == nil || o.BlackRed == nil {
		var ret float32
		return ret
	}
	return *o.BlackRed
}

// GetBlackRedOk returns a tuple with the BlackRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetBlackRedOk() (*float32, bool) {
	if o == nil || o.BlackRed == nil {
		return nil, false
	}
	return o.BlackRed, true
}

// GetBlackRedMin returns the minimum value for field BlackRed.
func (o *ColorCorrector) GetBlackRedMin() float32 {
	return -20.0
}

// GetBlackRedMax returns the maximum value for field BlackRed.
func (o *ColorCorrector) GetBlackRedMax() float32 {
	return 20.0
}


// HasBlackRed returns a boolean if a field has been set.
func (o *ColorCorrector) HasBlackRed() bool {
	if o != nil && o.BlackRed != nil {
		return true
	}

	return false
}

// SetBlackRed gets a reference to the given float32 and assigns it to the BlackRed field.
func (o *ColorCorrector) SetBlackRed(v float32) {
	tmp := v
	min := o.GetBlackRedMin()
	max := o.GetBlackRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.BlackRed = &tmp
}

// GetBlackGreen returns the BlackGreen field value if set, zero value otherwise.
func (o *ColorCorrector) GetBlackGreen() float32 {
	if o == nil || o.BlackGreen == nil {
		var ret float32
		return ret
	}
	return *o.BlackGreen
}

// GetBlackGreenOk returns a tuple with the BlackGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetBlackGreenOk() (*float32, bool) {
	if o == nil || o.BlackGreen == nil {
		return nil, false
	}
	return o.BlackGreen, true
}

// GetBlackGreenMin returns the minimum value for field BlackGreen.
func (o *ColorCorrector) GetBlackGreenMin() float32 {
	return -20.0
}

// GetBlackGreenMax returns the maximum value for field BlackGreen.
func (o *ColorCorrector) GetBlackGreenMax() float32 {
	return 20.0
}


// HasBlackGreen returns a boolean if a field has been set.
func (o *ColorCorrector) HasBlackGreen() bool {
	if o != nil && o.BlackGreen != nil {
		return true
	}

	return false
}

// SetBlackGreen gets a reference to the given float32 and assigns it to the BlackGreen field.
func (o *ColorCorrector) SetBlackGreen(v float32) {
	tmp := v
	min := o.GetBlackGreenMin()
	max := o.GetBlackGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.BlackGreen = &tmp
}

// GetBlackBlue returns the BlackBlue field value if set, zero value otherwise.
func (o *ColorCorrector) GetBlackBlue() float32 {
	if o == nil || o.BlackBlue == nil {
		var ret float32
		return ret
	}
	return *o.BlackBlue
}

// GetBlackBlueOk returns a tuple with the BlackBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetBlackBlueOk() (*float32, bool) {
	if o == nil || o.BlackBlue == nil {
		return nil, false
	}
	return o.BlackBlue, true
}

// GetBlackBlueMin returns the minimum value for field BlackBlue.
func (o *ColorCorrector) GetBlackBlueMin() float32 {
	return -20.0
}

// GetBlackBlueMax returns the maximum value for field BlackBlue.
func (o *ColorCorrector) GetBlackBlueMax() float32 {
	return 20.0
}


// HasBlackBlue returns a boolean if a field has been set.
func (o *ColorCorrector) HasBlackBlue() bool {
	if o != nil && o.BlackBlue != nil {
		return true
	}

	return false
}

// SetBlackBlue gets a reference to the given float32 and assigns it to the BlackBlue field.
func (o *ColorCorrector) SetBlackBlue(v float32) {
	tmp := v
	min := o.GetBlackBlueMin()
	max := o.GetBlackBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.BlackBlue = &tmp
}

// GetGainRed returns the GainRed field value if set, zero value otherwise.
func (o *ColorCorrector) GetGainRed() float32 {
	if o == nil || o.GainRed == nil {
		var ret float32
		return ret
	}
	return *o.GainRed
}

// GetGainRedOk returns a tuple with the GainRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGainRedOk() (*float32, bool) {
	if o == nil || o.GainRed == nil {
		return nil, false
	}
	return o.GainRed, true
}

// GetGainRedMin returns the minimum value for field GainRed.
func (o *ColorCorrector) GetGainRedMin() float32 {
	return 0
}

// GetGainRedMax returns the maximum value for field GainRed.
func (o *ColorCorrector) GetGainRedMax() float32 {
	return 1.5
}


// HasGainRed returns a boolean if a field has been set.
func (o *ColorCorrector) HasGainRed() bool {
	if o != nil && o.GainRed != nil {
		return true
	}

	return false
}

// SetGainRed gets a reference to the given float32 and assigns it to the GainRed field.
func (o *ColorCorrector) SetGainRed(v float32) {
	tmp := v
	min := o.GetGainRedMin()
	max := o.GetGainRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainRed = &tmp
}

// GetGainGreen returns the GainGreen field value if set, zero value otherwise.
func (o *ColorCorrector) GetGainGreen() float32 {
	if o == nil || o.GainGreen == nil {
		var ret float32
		return ret
	}
	return *o.GainGreen
}

// GetGainGreenOk returns a tuple with the GainGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGainGreenOk() (*float32, bool) {
	if o == nil || o.GainGreen == nil {
		return nil, false
	}
	return o.GainGreen, true
}

// GetGainGreenMin returns the minimum value for field GainGreen.
func (o *ColorCorrector) GetGainGreenMin() float32 {
	return 0
}

// GetGainGreenMax returns the maximum value for field GainGreen.
func (o *ColorCorrector) GetGainGreenMax() float32 {
	return 1.5
}


// HasGainGreen returns a boolean if a field has been set.
func (o *ColorCorrector) HasGainGreen() bool {
	if o != nil && o.GainGreen != nil {
		return true
	}

	return false
}

// SetGainGreen gets a reference to the given float32 and assigns it to the GainGreen field.
func (o *ColorCorrector) SetGainGreen(v float32) {
	tmp := v
	min := o.GetGainGreenMin()
	max := o.GetGainGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainGreen = &tmp
}

// GetGainBlue returns the GainBlue field value if set, zero value otherwise.
func (o *ColorCorrector) GetGainBlue() float32 {
	if o == nil || o.GainBlue == nil {
		var ret float32
		return ret
	}
	return *o.GainBlue
}

// GetGainBlueOk returns a tuple with the GainBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGainBlueOk() (*float32, bool) {
	if o == nil || o.GainBlue == nil {
		return nil, false
	}
	return o.GainBlue, true
}

// GetGainBlueMin returns the minimum value for field GainBlue.
func (o *ColorCorrector) GetGainBlueMin() float32 {
	return 0
}

// GetGainBlueMax returns the maximum value for field GainBlue.
func (o *ColorCorrector) GetGainBlueMax() float32 {
	return 1.5
}


// HasGainBlue returns a boolean if a field has been set.
func (o *ColorCorrector) HasGainBlue() bool {
	if o != nil && o.GainBlue != nil {
		return true
	}

	return false
}

// SetGainBlue gets a reference to the given float32 and assigns it to the GainBlue field.
func (o *ColorCorrector) SetGainBlue(v float32) {
	tmp := v
	min := o.GetGainBlueMin()
	max := o.GetGainBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainBlue = &tmp
}

// GetGammaRed returns the GammaRed field value if set, zero value otherwise.
func (o *ColorCorrector) GetGammaRed() float32 {
	if o == nil || o.GammaRed == nil {
		var ret float32
		return ret
	}
	return *o.GammaRed
}

// GetGammaRedOk returns a tuple with the GammaRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGammaRedOk() (*float32, bool) {
	if o == nil || o.GammaRed == nil {
		return nil, false
	}
	return o.GammaRed, true
}

// GetGammaRedMin returns the minimum value for field GammaRed.
func (o *ColorCorrector) GetGammaRedMin() float32 {
	return -1.0
}

// GetGammaRedMax returns the maximum value for field GammaRed.
func (o *ColorCorrector) GetGammaRedMax() float32 {
	return 1.0
}


// HasGammaRed returns a boolean if a field has been set.
func (o *ColorCorrector) HasGammaRed() bool {
	if o != nil && o.GammaRed != nil {
		return true
	}

	return false
}

// SetGammaRed gets a reference to the given float32 and assigns it to the GammaRed field.
func (o *ColorCorrector) SetGammaRed(v float32) {
	tmp := v
	min := o.GetGammaRedMin()
	max := o.GetGammaRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaRed = &tmp
}

// GetGammaGreen returns the GammaGreen field value if set, zero value otherwise.
func (o *ColorCorrector) GetGammaGreen() float32 {
	if o == nil || o.GammaGreen == nil {
		var ret float32
		return ret
	}
	return *o.GammaGreen
}

// GetGammaGreenOk returns a tuple with the GammaGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGammaGreenOk() (*float32, bool) {
	if o == nil || o.GammaGreen == nil {
		return nil, false
	}
	return o.GammaGreen, true
}

// GetGammaGreenMin returns the minimum value for field GammaGreen.
func (o *ColorCorrector) GetGammaGreenMin() float32 {
	return -1.0
}

// GetGammaGreenMax returns the maximum value for field GammaGreen.
func (o *ColorCorrector) GetGammaGreenMax() float32 {
	return 1.0
}


// HasGammaGreen returns a boolean if a field has been set.
func (o *ColorCorrector) HasGammaGreen() bool {
	if o != nil && o.GammaGreen != nil {
		return true
	}

	return false
}

// SetGammaGreen gets a reference to the given float32 and assigns it to the GammaGreen field.
func (o *ColorCorrector) SetGammaGreen(v float32) {
	tmp := v
	min := o.GetGammaGreenMin()
	max := o.GetGammaGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaGreen = &tmp
}

// GetGammaBlue returns the GammaBlue field value if set, zero value otherwise.
func (o *ColorCorrector) GetGammaBlue() float32 {
	if o == nil || o.GammaBlue == nil {
		var ret float32
		return ret
	}
	return *o.GammaBlue
}

// GetGammaBlueOk returns a tuple with the GammaBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetGammaBlueOk() (*float32, bool) {
	if o == nil || o.GammaBlue == nil {
		return nil, false
	}
	return o.GammaBlue, true
}

// GetGammaBlueMin returns the minimum value for field GammaBlue.
func (o *ColorCorrector) GetGammaBlueMin() float32 {
	return -1.0
}

// GetGammaBlueMax returns the maximum value for field GammaBlue.
func (o *ColorCorrector) GetGammaBlueMax() float32 {
	return 1.0
}


// HasGammaBlue returns a boolean if a field has been set.
func (o *ColorCorrector) HasGammaBlue() bool {
	if o != nil && o.GammaBlue != nil {
		return true
	}

	return false
}

// SetGammaBlue gets a reference to the given float32 and assigns it to the GammaBlue field.
func (o *ColorCorrector) SetGammaBlue(v float32) {
	tmp := v
	min := o.GetGammaBlueMin()
	max := o.GetGammaBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaBlue = &tmp
}

// GetUnitsBlack returns the UnitsBlack field value if set, zero value otherwise.
func (o *ColorCorrector) GetUnitsBlack() string {
	if o == nil || o.UnitsBlack == nil {
		var ret string
		return ret
	}
	return *o.UnitsBlack
}

// GetUnitsBlackOk returns a tuple with the UnitsBlack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetUnitsBlackOk() (*string, bool) {
	if o == nil || o.UnitsBlack == nil {
		return nil, false
	}
	return o.UnitsBlack, true
}



// HasUnitsBlack returns a boolean if a field has been set.
func (o *ColorCorrector) HasUnitsBlack() bool {
	if o != nil && o.UnitsBlack != nil {
		return true
	}

	return false
}

// SetUnitsBlack gets a reference to the given string and assigns it to the UnitsBlack field.
func (o *ColorCorrector) SetUnitsBlack(v string) {
	tmp := v
	o.UnitsBlack = &tmp
}

// GetUnitsGain returns the UnitsGain field value if set, zero value otherwise.
func (o *ColorCorrector) GetUnitsGain() string {
	if o == nil || o.UnitsGain == nil {
		var ret string
		return ret
	}
	return *o.UnitsGain
}

// GetUnitsGainOk returns a tuple with the UnitsGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetUnitsGainOk() (*string, bool) {
	if o == nil || o.UnitsGain == nil {
		return nil, false
	}
	return o.UnitsGain, true
}



// HasUnitsGain returns a boolean if a field has been set.
func (o *ColorCorrector) HasUnitsGain() bool {
	if o != nil && o.UnitsGain != nil {
		return true
	}

	return false
}

// SetUnitsGain gets a reference to the given string and assigns it to the UnitsGain field.
func (o *ColorCorrector) SetUnitsGain(v string) {
	tmp := v
	o.UnitsGain = &tmp
}

// GetUnitsGamma returns the UnitsGamma field value if set, zero value otherwise.
func (o *ColorCorrector) GetUnitsGamma() string {
	if o == nil || o.UnitsGamma == nil {
		var ret string
		return ret
	}
	return *o.UnitsGamma
}

// GetUnitsGammaOk returns a tuple with the UnitsGamma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorCorrector) GetUnitsGammaOk() (*string, bool) {
	if o == nil || o.UnitsGamma == nil {
		return nil, false
	}
	return o.UnitsGamma, true
}



// HasUnitsGamma returns a boolean if a field has been set.
func (o *ColorCorrector) HasUnitsGamma() bool {
	if o != nil && o.UnitsGamma != nil {
		return true
	}

	return false
}

// SetUnitsGamma gets a reference to the given string and assigns it to the UnitsGamma field.
func (o *ColorCorrector) SetUnitsGamma(v string) {
	tmp := v
	o.UnitsGamma = &tmp
}

func (o ColorCorrector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlackRed != nil {
		toSerialize["blackRed"] = o.BlackRed
	}
	if o.BlackGreen != nil {
		toSerialize["blackGreen"] = o.BlackGreen
	}
	if o.BlackBlue != nil {
		toSerialize["blackBlue"] = o.BlackBlue
	}
	if o.GainRed != nil {
		toSerialize["gainRed"] = o.GainRed
	}
	if o.GainGreen != nil {
		toSerialize["gainGreen"] = o.GainGreen
	}
	if o.GainBlue != nil {
		toSerialize["gainBlue"] = o.GainBlue
	}
	if o.GammaRed != nil {
		toSerialize["gammaRed"] = o.GammaRed
	}
	if o.GammaGreen != nil {
		toSerialize["gammaGreen"] = o.GammaGreen
	}
	if o.GammaBlue != nil {
		toSerialize["gammaBlue"] = o.GammaBlue
	}
	if o.UnitsBlack != nil {
		toSerialize["unitsBlack"] = o.UnitsBlack
	}
	if o.UnitsGain != nil {
		toSerialize["unitsGain"] = o.UnitsGain
	}
	if o.UnitsGamma != nil {
		toSerialize["unitsGamma"] = o.UnitsGamma
	}
	return json.Marshal(toSerialize)
}


func (o *ColorCorrector) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasBlackRed() {
		var fieldChanged = false
		var v float32 = o.GetBlackRed()
		var min float32 = o.GetBlackRedMin()
		var max float32 = o.GetBlackRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBlackRed(v)
			valueChanged = true
		}
	}
	if o.HasBlackGreen() {
		var fieldChanged = false
		var v float32 = o.GetBlackGreen()
		var min float32 = o.GetBlackGreenMin()
		var max float32 = o.GetBlackGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBlackGreen(v)
			valueChanged = true
		}
	}
	if o.HasBlackBlue() {
		var fieldChanged = false
		var v float32 = o.GetBlackBlue()
		var min float32 = o.GetBlackBlueMin()
		var max float32 = o.GetBlackBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBlackBlue(v)
			valueChanged = true
		}
	}
	if o.HasGainRed() {
		var fieldChanged = false
		var v float32 = o.GetGainRed()
		var min float32 = o.GetGainRedMin()
		var max float32 = o.GetGainRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainRed(v)
			valueChanged = true
		}
	}
	if o.HasGainGreen() {
		var fieldChanged = false
		var v float32 = o.GetGainGreen()
		var min float32 = o.GetGainGreenMin()
		var max float32 = o.GetGainGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainGreen(v)
			valueChanged = true
		}
	}
	if o.HasGainBlue() {
		var fieldChanged = false
		var v float32 = o.GetGainBlue()
		var min float32 = o.GetGainBlueMin()
		var max float32 = o.GetGainBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainBlue(v)
			valueChanged = true
		}
	}
	if o.HasGammaRed() {
		var fieldChanged = false
		var v float32 = o.GetGammaRed()
		var min float32 = o.GetGammaRedMin()
		var max float32 = o.GetGammaRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaRed(v)
			valueChanged = true
		}
	}
	if o.HasGammaGreen() {
		var fieldChanged = false
		var v float32 = o.GetGammaGreen()
		var min float32 = o.GetGammaGreenMin()
		var max float32 = o.GetGammaGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaGreen(v)
			valueChanged = true
		}
	}
	if o.HasGammaBlue() {
		var fieldChanged = false
		var v float32 = o.GetGammaBlue()
		var min float32 = o.GetGammaBlueMin()
		var max float32 = o.GetGammaBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaBlue(v)
			valueChanged = true
		}
	}
	if o.HasUnitsBlack() {
		var fieldChanged = false
		var v string = o.GetUnitsBlack()
		if fieldChanged {
			o.SetUnitsBlack(v)
			valueChanged = true
		}
	}
	if o.HasUnitsGain() {
		var fieldChanged = false
		var v string = o.GetUnitsGain()
		if fieldChanged {
			o.SetUnitsGain(v)
			valueChanged = true
		}
	}
	if o.HasUnitsGamma() {
		var fieldChanged = false
		var v string = o.GetUnitsGamma()
		if fieldChanged {
			o.SetUnitsGamma(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableColorCorrector struct {
	value *ColorCorrector
	isSet bool
}

func (v NullableColorCorrector) Get() *ColorCorrector {
	return v.value
}

func (v *NullableColorCorrector) Set(val *ColorCorrector) {
	v.value = val
	v.isSet = true
}

func (v NullableColorCorrector) IsSet() bool {
	return v.isSet
}

func (v *NullableColorCorrector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorCorrector(val *ColorCorrector) *NullableColorCorrector {
	return &NullableColorCorrector{value: val, isSet: true}
}

func (v NullableColorCorrector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorCorrector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


