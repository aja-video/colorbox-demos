/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// AncCaptureFilter struct for AncCaptureFilter
type AncCaptureFilter struct {
	Enable *bool `json:"enable,omitempty"`
	Dids []float32 `json:"dids,omitempty"`
}

// NewAncCaptureFilter instantiates a new AncCaptureFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAncCaptureFilter() *AncCaptureFilter {
	this := AncCaptureFilter{}
	var enable bool = false
	this.Enable = &enable
	return &this
}

// NewAncCaptureFilterWithDefaults instantiates a new AncCaptureFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAncCaptureFilterWithDefaults() *AncCaptureFilter {
	this := AncCaptureFilter{}
	var enable bool = false
	this.Enable = &enable
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *AncCaptureFilter) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncCaptureFilter) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}



// HasEnable returns a boolean if a field has been set.
func (o *AncCaptureFilter) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *AncCaptureFilter) SetEnable(v bool) {
	tmp := v
	o.Enable = &tmp
}

// GetDids returns the Dids field value if set, zero value otherwise.
func (o *AncCaptureFilter) GetDids() []float32 {
	if o == nil || o.Dids == nil {
		var ret []float32
		return ret
	}
	return o.Dids
}

// GetDidsOk returns a tuple with the Dids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncCaptureFilter) GetDidsOk() ([]float32, bool) {
	if o == nil || o.Dids == nil {
		return nil, false
	}
	return o.Dids, true
}



// HasDids returns a boolean if a field has been set.
func (o *AncCaptureFilter) HasDids() bool {
	if o != nil && o.Dids != nil {
		return true
	}

	return false
}

// SetDids gets a reference to the given []float32 and assigns it to the Dids field.
func (o *AncCaptureFilter) SetDids(v []float32) {
	tmp := v
	o.Dids = tmp
}

func (o AncCaptureFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.Dids != nil {
		toSerialize["dids"] = o.Dids
	}
	return json.Marshal(toSerialize)
}


func (o *AncCaptureFilter) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	return valueChanged
}

type NullableAncCaptureFilter struct {
	value *AncCaptureFilter
	isSet bool
}

func (v NullableAncCaptureFilter) Get() *AncCaptureFilter {
	return v.value
}

func (v *NullableAncCaptureFilter) Set(val *AncCaptureFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAncCaptureFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAncCaptureFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAncCaptureFilter(val *AncCaptureFilter) *NullableAncCaptureFilter {
	return &NullableAncCaptureFilter{value: val, isSet: true}
}

func (v NullableAncCaptureFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAncCaptureFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


