/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// Locations the model 'Locations'
type Locations string

// List of Locations
const (
	LOCATIONS_TOP_LEFT Locations = "Top Left"
	LOCATIONS_TOP_CENTER Locations = "Top Center"
	LOCATIONS_TOP_RIGHT Locations = "Top Right"
	LOCATIONS_BOTTOM_LEFT Locations = "Bottom Left"
	LOCATIONS_BOTTOM_CENTER Locations = "Bottom Center"
	LOCATIONS_BOTTOM_RIGHT Locations = "Bottom Right"
)

// All allowed values of Locations enum
var AllowedLocationsEnumValues = []Locations{
	"Top Left",
	"Top Center",
	"Top Right",
	"Bottom Left",
	"Bottom Center",
	"Bottom Right",
}

func (v *Locations) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Locations(value)
	for _, existing := range AllowedLocationsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Locations", value)
}

// NewLocationsFromValue returns a pointer to a valid Locations
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationsFromValue(v string) (*Locations, error) {
	ev := Locations(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Locations: valid values are %v", v, AllowedLocationsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Locations) IsValid() bool {
	for _, existing := range AllowedLocationsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Locations value
func (v Locations) Ptr() *Locations {
	return &v
}

type NullableLocations struct {
	value *Locations
	isSet bool
}

func (v NullableLocations) Get() *Locations {
	return v.value
}

func (v *NullableLocations) Set(val *Locations) {
	v.value = val
	v.isSet = true
}

func (v NullableLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocations(val *Locations) *NullableLocations {
	return &NullableLocations{value: val, isSet: true}
}

func (v NullableLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

