/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// CalibrationPattern Holds the information for a calibration pattern patch
type CalibrationPattern struct {
	BgColor *PatternColor `json:"bgColor,omitempty"`
	FgColor *PatternColor `json:"fgColor,omitempty"`
	FgRect *PatternRect `json:"fgRect,omitempty"`
	// For internal use only
	Stamp *string `json:"stamp,omitempty"`
}

// NewCalibrationPattern instantiates a new CalibrationPattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalibrationPattern() *CalibrationPattern {
	this := CalibrationPattern{}
	return &this
}

// NewCalibrationPatternWithDefaults instantiates a new CalibrationPattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalibrationPatternWithDefaults() *CalibrationPattern {
	this := CalibrationPattern{}
	return &this
}

// GetBgColor returns the BgColor field value if set, zero value otherwise.
func (o *CalibrationPattern) GetBgColor() PatternColor {
	if o == nil || o.BgColor == nil {
		var ret PatternColor
		return ret
	}
	return *o.BgColor
}

// GetBgColorOk returns a tuple with the BgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalibrationPattern) GetBgColorOk() (*PatternColor, bool) {
	if o == nil || o.BgColor == nil {
		return nil, false
	}
	return o.BgColor, true
}



// HasBgColor returns a boolean if a field has been set.
func (o *CalibrationPattern) HasBgColor() bool {
	if o != nil && o.BgColor != nil {
		return true
	}

	return false
}

// SetBgColor gets a reference to the given PatternColor and assigns it to the BgColor field.
func (o *CalibrationPattern) SetBgColor(v PatternColor) {
	tmp := v
	o.BgColor = &tmp
}

// GetFgColor returns the FgColor field value if set, zero value otherwise.
func (o *CalibrationPattern) GetFgColor() PatternColor {
	if o == nil || o.FgColor == nil {
		var ret PatternColor
		return ret
	}
	return *o.FgColor
}

// GetFgColorOk returns a tuple with the FgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalibrationPattern) GetFgColorOk() (*PatternColor, bool) {
	if o == nil || o.FgColor == nil {
		return nil, false
	}
	return o.FgColor, true
}



// HasFgColor returns a boolean if a field has been set.
func (o *CalibrationPattern) HasFgColor() bool {
	if o != nil && o.FgColor != nil {
		return true
	}

	return false
}

// SetFgColor gets a reference to the given PatternColor and assigns it to the FgColor field.
func (o *CalibrationPattern) SetFgColor(v PatternColor) {
	tmp := v
	o.FgColor = &tmp
}

// GetFgRect returns the FgRect field value if set, zero value otherwise.
func (o *CalibrationPattern) GetFgRect() PatternRect {
	if o == nil || o.FgRect == nil {
		var ret PatternRect
		return ret
	}
	return *o.FgRect
}

// GetFgRectOk returns a tuple with the FgRect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalibrationPattern) GetFgRectOk() (*PatternRect, bool) {
	if o == nil || o.FgRect == nil {
		return nil, false
	}
	return o.FgRect, true
}



// HasFgRect returns a boolean if a field has been set.
func (o *CalibrationPattern) HasFgRect() bool {
	if o != nil && o.FgRect != nil {
		return true
	}

	return false
}

// SetFgRect gets a reference to the given PatternRect and assigns it to the FgRect field.
func (o *CalibrationPattern) SetFgRect(v PatternRect) {
	tmp := v
	o.FgRect = &tmp
}

// GetStamp returns the Stamp field value if set, zero value otherwise.
func (o *CalibrationPattern) GetStamp() string {
	if o == nil || o.Stamp == nil {
		var ret string
		return ret
	}
	return *o.Stamp
}

// GetStampOk returns a tuple with the Stamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalibrationPattern) GetStampOk() (*string, bool) {
	if o == nil || o.Stamp == nil {
		return nil, false
	}
	return o.Stamp, true
}



// HasStamp returns a boolean if a field has been set.
func (o *CalibrationPattern) HasStamp() bool {
	if o != nil && o.Stamp != nil {
		return true
	}

	return false
}

// SetStamp gets a reference to the given string and assigns it to the Stamp field.
func (o *CalibrationPattern) SetStamp(v string) {
	tmp := v
	o.Stamp = &tmp
}

func (o CalibrationPattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BgColor != nil {
		toSerialize["bgColor"] = o.BgColor
	}
	if o.FgColor != nil {
		toSerialize["fgColor"] = o.FgColor
	}
	if o.FgRect != nil {
		toSerialize["fgRect"] = o.FgRect
	}
	if o.Stamp != nil {
		toSerialize["stamp"] = o.Stamp
	}
	return json.Marshal(toSerialize)
}


func (o *CalibrationPattern) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasStamp() {
		var fieldChanged = false
		var v string = o.GetStamp()
		if fieldChanged {
			o.SetStamp(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableCalibrationPattern struct {
	value *CalibrationPattern
	isSet bool
}

func (v NullableCalibrationPattern) Get() *CalibrationPattern {
	return v.value
}

func (v *NullableCalibrationPattern) Set(val *CalibrationPattern) {
	v.value = val
	v.isSet = true
}

func (v NullableCalibrationPattern) IsSet() bool {
	return v.isSet
}

func (v *NullableCalibrationPattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalibrationPattern(val *CalibrationPattern) *NullableCalibrationPattern {
	return &NullableCalibrationPattern{value: val, isSet: true}
}

func (v NullableCalibrationPattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalibrationPattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


