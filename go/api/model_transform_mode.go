/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransformMode the model 'TransformMode'
type TransformMode string

// List of TransformMode
const (
	TRANSFORMMODE_LUT TransformMode = "LUT"
	TRANSFORMMODE_COLORFRONT TransformMode = "COLORFRONT"
	TRANSFORMMODE_ORION TransformMode = "ORION"
	TRANSFORMMODE_BBC TransformMode = "BBC"
	TRANSFORMMODE_NBC TransformMode = "NBC"
)

// All allowed values of TransformMode enum
var AllowedTransformModeEnumValues = []TransformMode{
	"LUT",
	"COLORFRONT",
	"ORION",
	"BBC",
	"NBC",
}

func (v *TransformMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransformMode(value)
	for _, existing := range AllowedTransformModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransformMode", value)
}

// NewTransformModeFromValue returns a pointer to a valid TransformMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransformModeFromValue(v string) (*TransformMode, error) {
	ev := TransformMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransformMode: valid values are %v", v, AllowedTransformModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransformMode) IsValid() bool {
	for _, existing := range AllowedTransformModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransformMode value
func (v TransformMode) Ptr() *TransformMode {
	return &v
}

type NullableTransformMode struct {
	value *TransformMode
	isSet bool
}

func (v NullableTransformMode) Get() *TransformMode {
	return v.value
}

func (v *NullableTransformMode) Set(val *TransformMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformMode(val *TransformMode) *NullableTransformMode {
	return &NullableTransformMode{value: val, isSet: true}
}

func (v NullableTransformMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

