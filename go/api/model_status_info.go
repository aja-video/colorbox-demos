/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// StatusInfo struct for StatusInfo
type StatusInfo struct {
	// The upper bound for the state to be considered StatusStateGood
	UpperBoundGood *float32 `json:"upperBoundGood,omitempty"`
	// The upper bound for the state to be considered StatusStateMaybe
	UpperBoundMaybe *float32 `json:"upperBoundMaybe,omitempty"`
	// The instantaneous value for this status object
	Value *string `json:"value,omitempty"`
	// A descriptive label of what this status object represents
	Label *string `json:"label,omitempty"`
	// A second value that is optional
	ExtraValue *string `json:"extraValue,omitempty"`
	// A second descriptive label for the extraValue
	ExtraLabel *string `json:"extraLabel,omitempty"`
	State *StatusState `json:"state,omitempty"`
}

// NewStatusInfo instantiates a new StatusInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusInfo() *StatusInfo {
	this := StatusInfo{}
	var state StatusState = STATUSSTATE_STATUS_STATE_UNKNOWN
	this.State = &state
	return &this
}

// NewStatusInfoWithDefaults instantiates a new StatusInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusInfoWithDefaults() *StatusInfo {
	this := StatusInfo{}
	var state StatusState = STATUSSTATE_STATUS_STATE_UNKNOWN
	this.State = &state
	return &this
}

// GetUpperBoundGood returns the UpperBoundGood field value if set, zero value otherwise.
func (o *StatusInfo) GetUpperBoundGood() float32 {
	if o == nil || o.UpperBoundGood == nil {
		var ret float32
		return ret
	}
	return *o.UpperBoundGood
}

// GetUpperBoundGoodOk returns a tuple with the UpperBoundGood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetUpperBoundGoodOk() (*float32, bool) {
	if o == nil || o.UpperBoundGood == nil {
		return nil, false
	}
	return o.UpperBoundGood, true
}



// HasUpperBoundGood returns a boolean if a field has been set.
func (o *StatusInfo) HasUpperBoundGood() bool {
	if o != nil && o.UpperBoundGood != nil {
		return true
	}

	return false
}

// SetUpperBoundGood gets a reference to the given float32 and assigns it to the UpperBoundGood field.
func (o *StatusInfo) SetUpperBoundGood(v float32) {
	tmp := v
	o.UpperBoundGood = &tmp
}

// GetUpperBoundMaybe returns the UpperBoundMaybe field value if set, zero value otherwise.
func (o *StatusInfo) GetUpperBoundMaybe() float32 {
	if o == nil || o.UpperBoundMaybe == nil {
		var ret float32
		return ret
	}
	return *o.UpperBoundMaybe
}

// GetUpperBoundMaybeOk returns a tuple with the UpperBoundMaybe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetUpperBoundMaybeOk() (*float32, bool) {
	if o == nil || o.UpperBoundMaybe == nil {
		return nil, false
	}
	return o.UpperBoundMaybe, true
}



// HasUpperBoundMaybe returns a boolean if a field has been set.
func (o *StatusInfo) HasUpperBoundMaybe() bool {
	if o != nil && o.UpperBoundMaybe != nil {
		return true
	}

	return false
}

// SetUpperBoundMaybe gets a reference to the given float32 and assigns it to the UpperBoundMaybe field.
func (o *StatusInfo) SetUpperBoundMaybe(v float32) {
	tmp := v
	o.UpperBoundMaybe = &tmp
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *StatusInfo) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}



// HasValue returns a boolean if a field has been set.
func (o *StatusInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *StatusInfo) SetValue(v string) {
	tmp := v
	o.Value = &tmp
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *StatusInfo) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}



// HasLabel returns a boolean if a field has been set.
func (o *StatusInfo) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *StatusInfo) SetLabel(v string) {
	tmp := v
	o.Label = &tmp
}

// GetExtraValue returns the ExtraValue field value if set, zero value otherwise.
func (o *StatusInfo) GetExtraValue() string {
	if o == nil || o.ExtraValue == nil {
		var ret string
		return ret
	}
	return *o.ExtraValue
}

// GetExtraValueOk returns a tuple with the ExtraValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetExtraValueOk() (*string, bool) {
	if o == nil || o.ExtraValue == nil {
		return nil, false
	}
	return o.ExtraValue, true
}



// HasExtraValue returns a boolean if a field has been set.
func (o *StatusInfo) HasExtraValue() bool {
	if o != nil && o.ExtraValue != nil {
		return true
	}

	return false
}

// SetExtraValue gets a reference to the given string and assigns it to the ExtraValue field.
func (o *StatusInfo) SetExtraValue(v string) {
	tmp := v
	o.ExtraValue = &tmp
}

// GetExtraLabel returns the ExtraLabel field value if set, zero value otherwise.
func (o *StatusInfo) GetExtraLabel() string {
	if o == nil || o.ExtraLabel == nil {
		var ret string
		return ret
	}
	return *o.ExtraLabel
}

// GetExtraLabelOk returns a tuple with the ExtraLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetExtraLabelOk() (*string, bool) {
	if o == nil || o.ExtraLabel == nil {
		return nil, false
	}
	return o.ExtraLabel, true
}



// HasExtraLabel returns a boolean if a field has been set.
func (o *StatusInfo) HasExtraLabel() bool {
	if o != nil && o.ExtraLabel != nil {
		return true
	}

	return false
}

// SetExtraLabel gets a reference to the given string and assigns it to the ExtraLabel field.
func (o *StatusInfo) SetExtraLabel(v string) {
	tmp := v
	o.ExtraLabel = &tmp
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StatusInfo) GetState() StatusState {
	if o == nil || o.State == nil {
		var ret StatusState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusInfo) GetStateOk() (*StatusState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}



// HasState returns a boolean if a field has been set.
func (o *StatusInfo) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given StatusState and assigns it to the State field.
func (o *StatusInfo) SetState(v StatusState) {
	tmp := v
	o.State = &tmp
}

func (o StatusInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpperBoundGood != nil {
		toSerialize["upperBoundGood"] = o.UpperBoundGood
	}
	if o.UpperBoundMaybe != nil {
		toSerialize["upperBoundMaybe"] = o.UpperBoundMaybe
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.ExtraValue != nil {
		toSerialize["extraValue"] = o.ExtraValue
	}
	if o.ExtraLabel != nil {
		toSerialize["extraLabel"] = o.ExtraLabel
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}


func (o *StatusInfo) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasUpperBoundGood() {
		var fieldChanged = false
		var v float32 = o.GetUpperBoundGood()
		if fieldChanged {
			o.SetUpperBoundGood(v)
			valueChanged = true
		}
	}
	if o.HasUpperBoundMaybe() {
		var fieldChanged = false
		var v float32 = o.GetUpperBoundMaybe()
		if fieldChanged {
			o.SetUpperBoundMaybe(v)
			valueChanged = true
		}
	}
	if o.HasValue() {
		var fieldChanged = false
		var v string = o.GetValue()
		if fieldChanged {
			o.SetValue(v)
			valueChanged = true
		}
	}
	if o.HasLabel() {
		var fieldChanged = false
		var v string = o.GetLabel()
		if fieldChanged {
			o.SetLabel(v)
			valueChanged = true
		}
	}
	if o.HasExtraValue() {
		var fieldChanged = false
		var v string = o.GetExtraValue()
		if fieldChanged {
			o.SetExtraValue(v)
			valueChanged = true
		}
	}
	if o.HasExtraLabel() {
		var fieldChanged = false
		var v string = o.GetExtraLabel()
		if fieldChanged {
			o.SetExtraLabel(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableStatusInfo struct {
	value *StatusInfo
	isSet bool
}

func (v NullableStatusInfo) Get() *StatusInfo {
	return v.value
}

func (v *NullableStatusInfo) Set(val *StatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusInfo(val *StatusInfo) *NullableStatusInfo {
	return &NullableStatusInfo{value: val, isSet: true}
}

func (v NullableStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


