/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// ColorfrontTvMode struct for ColorfrontTvMode
type ColorfrontTvMode struct {
	Engine *ColorfrontEngine `json:"engine,omitempty"`
	InDynRangeGamut *ColorfrontDynRangeGamutTvModeIn `json:"inDynRangeGamut,omitempty"`
	OutDynRangeGamut *ColorfrontDynRangeGamutTvModeOut `json:"outDynRangeGamut,omitempty"`
	Brightness *float32 `json:"brightness,omitempty"`
	Highlight *float32 `json:"highlight,omitempty"`
	Colorfulness *float32 `json:"colorfulness,omitempty"`
	SuperHighlight *float32 `json:"superHighlight,omitempty"`
	Roundtrip *bool `json:"roundtrip,omitempty"`
	ClampToLegal *bool `json:"clampToLegal,omitempty"`
	ColorCorrector *bool `json:"colorCorrector,omitempty"`
	LiftMaster *float32 `json:"liftMaster,omitempty"`
	LiftRed *float32 `json:"liftRed,omitempty"`
	LiftGreen *float32 `json:"liftGreen,omitempty"`
	LiftBlue *float32 `json:"liftBlue,omitempty"`
	GammaMaster *float32 `json:"gammaMaster,omitempty"`
	GammaRed *float32 `json:"gammaRed,omitempty"`
	GammaGreen *float32 `json:"gammaGreen,omitempty"`
	GammaBlue *float32 `json:"gammaBlue,omitempty"`
	GainMaster *float32 `json:"gainMaster,omitempty"`
	GainRed *float32 `json:"gainRed,omitempty"`
	GainGreen *float32 `json:"gainGreen,omitempty"`
	GainBlue *float32 `json:"gainBlue,omitempty"`
	Saturation *float32 `json:"saturation,omitempty"`
	CameraCorrection *bool `json:"cameraCorrection,omitempty"`
	Exposure *float32 `json:"exposure,omitempty"`
	ColorTemp *float32 `json:"colorTemp,omitempty"`
	Tint *float32 `json:"tint,omitempty"`
}

// NewColorfrontTvMode instantiates a new ColorfrontTvMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorfrontTvMode() *ColorfrontTvMode {
	this := ColorfrontTvMode{}
	var engine ColorfrontEngine = COLORFRONTENGINE_DEFAULT
	this.Engine = &engine
	var inDynRangeGamut ColorfrontDynRangeGamutTvModeIn = COLORFRONTDYNRANGEGAMUTTVMODEIN_SDR_BT_709
	this.InDynRangeGamut = &inDynRangeGamut
	var outDynRangeGamut ColorfrontDynRangeGamutTvModeOut = COLORFRONTDYNRANGEGAMUTTVMODEOUT_SDR_BT_709
	this.OutDynRangeGamut = &outDynRangeGamut
	var brightness float32 = 0
	this.Brightness = &brightness
	var highlight float32 = 0
	this.Highlight = &highlight
	var colorfulness float32 = 0
	this.Colorfulness = &colorfulness
	var superHighlight float32 = 0
	this.SuperHighlight = &superHighlight
	var roundtrip bool = false
	this.Roundtrip = &roundtrip
	var clampToLegal bool = false
	this.ClampToLegal = &clampToLegal
	var colorCorrector bool = false
	this.ColorCorrector = &colorCorrector
	var liftMaster float32 = 0
	this.LiftMaster = &liftMaster
	var liftRed float32 = 0
	this.LiftRed = &liftRed
	var liftGreen float32 = 0
	this.LiftGreen = &liftGreen
	var liftBlue float32 = 0
	this.LiftBlue = &liftBlue
	var gammaMaster float32 = 1
	this.GammaMaster = &gammaMaster
	var gammaRed float32 = 1
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 1
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 1
	this.GammaBlue = &gammaBlue
	var gainMaster float32 = 1
	this.GainMaster = &gainMaster
	var gainRed float32 = 1
	this.GainRed = &gainRed
	var gainGreen float32 = 1
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1
	this.GainBlue = &gainBlue
	var saturation float32 = 1.0
	this.Saturation = &saturation
	var cameraCorrection bool = false
	this.CameraCorrection = &cameraCorrection
	var exposure float32 = 0
	this.Exposure = &exposure
	var colorTemp float32 = 0
	this.ColorTemp = &colorTemp
	var tint float32 = 0
	this.Tint = &tint
	return &this
}

// NewColorfrontTvModeWithDefaults instantiates a new ColorfrontTvMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorfrontTvModeWithDefaults() *ColorfrontTvMode {
	this := ColorfrontTvMode{}
	var engine ColorfrontEngine = COLORFRONTENGINE_DEFAULT
	this.Engine = &engine
	var inDynRangeGamut ColorfrontDynRangeGamutTvModeIn = COLORFRONTDYNRANGEGAMUTTVMODEIN_SDR_BT_709
	this.InDynRangeGamut = &inDynRangeGamut
	var outDynRangeGamut ColorfrontDynRangeGamutTvModeOut = COLORFRONTDYNRANGEGAMUTTVMODEOUT_SDR_BT_709
	this.OutDynRangeGamut = &outDynRangeGamut
	var brightness float32 = 0
	this.Brightness = &brightness
	var highlight float32 = 0
	this.Highlight = &highlight
	var colorfulness float32 = 0
	this.Colorfulness = &colorfulness
	var superHighlight float32 = 0
	this.SuperHighlight = &superHighlight
	var roundtrip bool = false
	this.Roundtrip = &roundtrip
	var clampToLegal bool = false
	this.ClampToLegal = &clampToLegal
	var colorCorrector bool = false
	this.ColorCorrector = &colorCorrector
	var liftMaster float32 = 0
	this.LiftMaster = &liftMaster
	var liftRed float32 = 0
	this.LiftRed = &liftRed
	var liftGreen float32 = 0
	this.LiftGreen = &liftGreen
	var liftBlue float32 = 0
	this.LiftBlue = &liftBlue
	var gammaMaster float32 = 1
	this.GammaMaster = &gammaMaster
	var gammaRed float32 = 1
	this.GammaRed = &gammaRed
	var gammaGreen float32 = 1
	this.GammaGreen = &gammaGreen
	var gammaBlue float32 = 1
	this.GammaBlue = &gammaBlue
	var gainMaster float32 = 1
	this.GainMaster = &gainMaster
	var gainRed float32 = 1
	this.GainRed = &gainRed
	var gainGreen float32 = 1
	this.GainGreen = &gainGreen
	var gainBlue float32 = 1
	this.GainBlue = &gainBlue
	var saturation float32 = 1.0
	this.Saturation = &saturation
	var cameraCorrection bool = false
	this.CameraCorrection = &cameraCorrection
	var exposure float32 = 0
	this.Exposure = &exposure
	var colorTemp float32 = 0
	this.ColorTemp = &colorTemp
	var tint float32 = 0
	this.Tint = &tint
	return &this
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetEngine() ColorfrontEngine {
	if o == nil || o.Engine == nil {
		var ret ColorfrontEngine
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetEngineOk() (*ColorfrontEngine, bool) {
	if o == nil || o.Engine == nil {
		return nil, false
	}
	return o.Engine, true
}



// HasEngine returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasEngine() bool {
	if o != nil && o.Engine != nil {
		return true
	}

	return false
}

// SetEngine gets a reference to the given ColorfrontEngine and assigns it to the Engine field.
func (o *ColorfrontTvMode) SetEngine(v ColorfrontEngine) {
	tmp := v
	o.Engine = &tmp
}

// GetInDynRangeGamut returns the InDynRangeGamut field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetInDynRangeGamut() ColorfrontDynRangeGamutTvModeIn {
	if o == nil || o.InDynRangeGamut == nil {
		var ret ColorfrontDynRangeGamutTvModeIn
		return ret
	}
	return *o.InDynRangeGamut
}

// GetInDynRangeGamutOk returns a tuple with the InDynRangeGamut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetInDynRangeGamutOk() (*ColorfrontDynRangeGamutTvModeIn, bool) {
	if o == nil || o.InDynRangeGamut == nil {
		return nil, false
	}
	return o.InDynRangeGamut, true
}



// HasInDynRangeGamut returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasInDynRangeGamut() bool {
	if o != nil && o.InDynRangeGamut != nil {
		return true
	}

	return false
}

// SetInDynRangeGamut gets a reference to the given ColorfrontDynRangeGamutTvModeIn and assigns it to the InDynRangeGamut field.
func (o *ColorfrontTvMode) SetInDynRangeGamut(v ColorfrontDynRangeGamutTvModeIn) {
	tmp := v
	o.InDynRangeGamut = &tmp
}

// GetOutDynRangeGamut returns the OutDynRangeGamut field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetOutDynRangeGamut() ColorfrontDynRangeGamutTvModeOut {
	if o == nil || o.OutDynRangeGamut == nil {
		var ret ColorfrontDynRangeGamutTvModeOut
		return ret
	}
	return *o.OutDynRangeGamut
}

// GetOutDynRangeGamutOk returns a tuple with the OutDynRangeGamut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetOutDynRangeGamutOk() (*ColorfrontDynRangeGamutTvModeOut, bool) {
	if o == nil || o.OutDynRangeGamut == nil {
		return nil, false
	}
	return o.OutDynRangeGamut, true
}



// HasOutDynRangeGamut returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasOutDynRangeGamut() bool {
	if o != nil && o.OutDynRangeGamut != nil {
		return true
	}

	return false
}

// SetOutDynRangeGamut gets a reference to the given ColorfrontDynRangeGamutTvModeOut and assigns it to the OutDynRangeGamut field.
func (o *ColorfrontTvMode) SetOutDynRangeGamut(v ColorfrontDynRangeGamutTvModeOut) {
	tmp := v
	o.OutDynRangeGamut = &tmp
}

// GetBrightness returns the Brightness field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetBrightness() float32 {
	if o == nil || o.Brightness == nil {
		var ret float32
		return ret
	}
	return *o.Brightness
}

// GetBrightnessOk returns a tuple with the Brightness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetBrightnessOk() (*float32, bool) {
	if o == nil || o.Brightness == nil {
		return nil, false
	}
	return o.Brightness, true
}

// GetBrightnessMin returns the minimum value for field Brightness.
func (o *ColorfrontTvMode) GetBrightnessMin() float32 {
	return -1.0
}

// GetBrightnessMax returns the maximum value for field Brightness.
func (o *ColorfrontTvMode) GetBrightnessMax() float32 {
	return 1.0
}


// HasBrightness returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasBrightness() bool {
	if o != nil && o.Brightness != nil {
		return true
	}

	return false
}

// SetBrightness gets a reference to the given float32 and assigns it to the Brightness field.
func (o *ColorfrontTvMode) SetBrightness(v float32) {
	tmp := v
	min := o.GetBrightnessMin()
	max := o.GetBrightnessMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Brightness = &tmp
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetHighlight() float32 {
	if o == nil || o.Highlight == nil {
		var ret float32
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetHighlightOk() (*float32, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// GetHighlightMin returns the minimum value for field Highlight.
func (o *ColorfrontTvMode) GetHighlightMin() float32 {
	return -1.0
}

// GetHighlightMax returns the maximum value for field Highlight.
func (o *ColorfrontTvMode) GetHighlightMax() float32 {
	return 1.0
}


// HasHighlight returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given float32 and assigns it to the Highlight field.
func (o *ColorfrontTvMode) SetHighlight(v float32) {
	tmp := v
	min := o.GetHighlightMin()
	max := o.GetHighlightMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Highlight = &tmp
}

// GetColorfulness returns the Colorfulness field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetColorfulness() float32 {
	if o == nil || o.Colorfulness == nil {
		var ret float32
		return ret
	}
	return *o.Colorfulness
}

// GetColorfulnessOk returns a tuple with the Colorfulness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetColorfulnessOk() (*float32, bool) {
	if o == nil || o.Colorfulness == nil {
		return nil, false
	}
	return o.Colorfulness, true
}

// GetColorfulnessMin returns the minimum value for field Colorfulness.
func (o *ColorfrontTvMode) GetColorfulnessMin() float32 {
	return -1.0
}

// GetColorfulnessMax returns the maximum value for field Colorfulness.
func (o *ColorfrontTvMode) GetColorfulnessMax() float32 {
	return 1.0
}


// HasColorfulness returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasColorfulness() bool {
	if o != nil && o.Colorfulness != nil {
		return true
	}

	return false
}

// SetColorfulness gets a reference to the given float32 and assigns it to the Colorfulness field.
func (o *ColorfrontTvMode) SetColorfulness(v float32) {
	tmp := v
	min := o.GetColorfulnessMin()
	max := o.GetColorfulnessMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Colorfulness = &tmp
}

// GetSuperHighlight returns the SuperHighlight field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetSuperHighlight() float32 {
	if o == nil || o.SuperHighlight == nil {
		var ret float32
		return ret
	}
	return *o.SuperHighlight
}

// GetSuperHighlightOk returns a tuple with the SuperHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetSuperHighlightOk() (*float32, bool) {
	if o == nil || o.SuperHighlight == nil {
		return nil, false
	}
	return o.SuperHighlight, true
}

// GetSuperHighlightMin returns the minimum value for field SuperHighlight.
func (o *ColorfrontTvMode) GetSuperHighlightMin() float32 {
	return -1.0
}

// GetSuperHighlightMax returns the maximum value for field SuperHighlight.
func (o *ColorfrontTvMode) GetSuperHighlightMax() float32 {
	return 1.0
}


// HasSuperHighlight returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasSuperHighlight() bool {
	if o != nil && o.SuperHighlight != nil {
		return true
	}

	return false
}

// SetSuperHighlight gets a reference to the given float32 and assigns it to the SuperHighlight field.
func (o *ColorfrontTvMode) SetSuperHighlight(v float32) {
	tmp := v
	min := o.GetSuperHighlightMin()
	max := o.GetSuperHighlightMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.SuperHighlight = &tmp
}

// GetRoundtrip returns the Roundtrip field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetRoundtrip() bool {
	if o == nil || o.Roundtrip == nil {
		var ret bool
		return ret
	}
	return *o.Roundtrip
}

// GetRoundtripOk returns a tuple with the Roundtrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetRoundtripOk() (*bool, bool) {
	if o == nil || o.Roundtrip == nil {
		return nil, false
	}
	return o.Roundtrip, true
}



// HasRoundtrip returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasRoundtrip() bool {
	if o != nil && o.Roundtrip != nil {
		return true
	}

	return false
}

// SetRoundtrip gets a reference to the given bool and assigns it to the Roundtrip field.
func (o *ColorfrontTvMode) SetRoundtrip(v bool) {
	tmp := v
	o.Roundtrip = &tmp
}

// GetClampToLegal returns the ClampToLegal field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetClampToLegal() bool {
	if o == nil || o.ClampToLegal == nil {
		var ret bool
		return ret
	}
	return *o.ClampToLegal
}

// GetClampToLegalOk returns a tuple with the ClampToLegal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetClampToLegalOk() (*bool, bool) {
	if o == nil || o.ClampToLegal == nil {
		return nil, false
	}
	return o.ClampToLegal, true
}



// HasClampToLegal returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasClampToLegal() bool {
	if o != nil && o.ClampToLegal != nil {
		return true
	}

	return false
}

// SetClampToLegal gets a reference to the given bool and assigns it to the ClampToLegal field.
func (o *ColorfrontTvMode) SetClampToLegal(v bool) {
	tmp := v
	o.ClampToLegal = &tmp
}

// GetColorCorrector returns the ColorCorrector field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetColorCorrector() bool {
	if o == nil || o.ColorCorrector == nil {
		var ret bool
		return ret
	}
	return *o.ColorCorrector
}

// GetColorCorrectorOk returns a tuple with the ColorCorrector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetColorCorrectorOk() (*bool, bool) {
	if o == nil || o.ColorCorrector == nil {
		return nil, false
	}
	return o.ColorCorrector, true
}



// HasColorCorrector returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasColorCorrector() bool {
	if o != nil && o.ColorCorrector != nil {
		return true
	}

	return false
}

// SetColorCorrector gets a reference to the given bool and assigns it to the ColorCorrector field.
func (o *ColorfrontTvMode) SetColorCorrector(v bool) {
	tmp := v
	o.ColorCorrector = &tmp
}

// GetLiftMaster returns the LiftMaster field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetLiftMaster() float32 {
	if o == nil || o.LiftMaster == nil {
		var ret float32
		return ret
	}
	return *o.LiftMaster
}

// GetLiftMasterOk returns a tuple with the LiftMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetLiftMasterOk() (*float32, bool) {
	if o == nil || o.LiftMaster == nil {
		return nil, false
	}
	return o.LiftMaster, true
}

// GetLiftMasterMin returns the minimum value for field LiftMaster.
func (o *ColorfrontTvMode) GetLiftMasterMin() float32 {
	return -1.0
}

// GetLiftMasterMax returns the maximum value for field LiftMaster.
func (o *ColorfrontTvMode) GetLiftMasterMax() float32 {
	return 1.0
}


// HasLiftMaster returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasLiftMaster() bool {
	if o != nil && o.LiftMaster != nil {
		return true
	}

	return false
}

// SetLiftMaster gets a reference to the given float32 and assigns it to the LiftMaster field.
func (o *ColorfrontTvMode) SetLiftMaster(v float32) {
	tmp := v
	min := o.GetLiftMasterMin()
	max := o.GetLiftMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftMaster = &tmp
}

// GetLiftRed returns the LiftRed field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetLiftRed() float32 {
	if o == nil || o.LiftRed == nil {
		var ret float32
		return ret
	}
	return *o.LiftRed
}

// GetLiftRedOk returns a tuple with the LiftRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetLiftRedOk() (*float32, bool) {
	if o == nil || o.LiftRed == nil {
		return nil, false
	}
	return o.LiftRed, true
}

// GetLiftRedMin returns the minimum value for field LiftRed.
func (o *ColorfrontTvMode) GetLiftRedMin() float32 {
	return -1.0
}

// GetLiftRedMax returns the maximum value for field LiftRed.
func (o *ColorfrontTvMode) GetLiftRedMax() float32 {
	return 1.0
}


// HasLiftRed returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasLiftRed() bool {
	if o != nil && o.LiftRed != nil {
		return true
	}

	return false
}

// SetLiftRed gets a reference to the given float32 and assigns it to the LiftRed field.
func (o *ColorfrontTvMode) SetLiftRed(v float32) {
	tmp := v
	min := o.GetLiftRedMin()
	max := o.GetLiftRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftRed = &tmp
}

// GetLiftGreen returns the LiftGreen field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetLiftGreen() float32 {
	if o == nil || o.LiftGreen == nil {
		var ret float32
		return ret
	}
	return *o.LiftGreen
}

// GetLiftGreenOk returns a tuple with the LiftGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetLiftGreenOk() (*float32, bool) {
	if o == nil || o.LiftGreen == nil {
		return nil, false
	}
	return o.LiftGreen, true
}

// GetLiftGreenMin returns the minimum value for field LiftGreen.
func (o *ColorfrontTvMode) GetLiftGreenMin() float32 {
	return -1.0
}

// GetLiftGreenMax returns the maximum value for field LiftGreen.
func (o *ColorfrontTvMode) GetLiftGreenMax() float32 {
	return 1.0
}


// HasLiftGreen returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasLiftGreen() bool {
	if o != nil && o.LiftGreen != nil {
		return true
	}

	return false
}

// SetLiftGreen gets a reference to the given float32 and assigns it to the LiftGreen field.
func (o *ColorfrontTvMode) SetLiftGreen(v float32) {
	tmp := v
	min := o.GetLiftGreenMin()
	max := o.GetLiftGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftGreen = &tmp
}

// GetLiftBlue returns the LiftBlue field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetLiftBlue() float32 {
	if o == nil || o.LiftBlue == nil {
		var ret float32
		return ret
	}
	return *o.LiftBlue
}

// GetLiftBlueOk returns a tuple with the LiftBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetLiftBlueOk() (*float32, bool) {
	if o == nil || o.LiftBlue == nil {
		return nil, false
	}
	return o.LiftBlue, true
}

// GetLiftBlueMin returns the minimum value for field LiftBlue.
func (o *ColorfrontTvMode) GetLiftBlueMin() float32 {
	return -1.0
}

// GetLiftBlueMax returns the maximum value for field LiftBlue.
func (o *ColorfrontTvMode) GetLiftBlueMax() float32 {
	return 1.0
}


// HasLiftBlue returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasLiftBlue() bool {
	if o != nil && o.LiftBlue != nil {
		return true
	}

	return false
}

// SetLiftBlue gets a reference to the given float32 and assigns it to the LiftBlue field.
func (o *ColorfrontTvMode) SetLiftBlue(v float32) {
	tmp := v
	min := o.GetLiftBlueMin()
	max := o.GetLiftBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.LiftBlue = &tmp
}

// GetGammaMaster returns the GammaMaster field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGammaMaster() float32 {
	if o == nil || o.GammaMaster == nil {
		var ret float32
		return ret
	}
	return *o.GammaMaster
}

// GetGammaMasterOk returns a tuple with the GammaMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGammaMasterOk() (*float32, bool) {
	if o == nil || o.GammaMaster == nil {
		return nil, false
	}
	return o.GammaMaster, true
}

// GetGammaMasterMin returns the minimum value for field GammaMaster.
func (o *ColorfrontTvMode) GetGammaMasterMin() float32 {
	return 0.0
}

// GetGammaMasterMax returns the maximum value for field GammaMaster.
func (o *ColorfrontTvMode) GetGammaMasterMax() float32 {
	return 2.0
}


// HasGammaMaster returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGammaMaster() bool {
	if o != nil && o.GammaMaster != nil {
		return true
	}

	return false
}

// SetGammaMaster gets a reference to the given float32 and assigns it to the GammaMaster field.
func (o *ColorfrontTvMode) SetGammaMaster(v float32) {
	tmp := v
	min := o.GetGammaMasterMin()
	max := o.GetGammaMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaMaster = &tmp
}

// GetGammaRed returns the GammaRed field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGammaRed() float32 {
	if o == nil || o.GammaRed == nil {
		var ret float32
		return ret
	}
	return *o.GammaRed
}

// GetGammaRedOk returns a tuple with the GammaRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGammaRedOk() (*float32, bool) {
	if o == nil || o.GammaRed == nil {
		return nil, false
	}
	return o.GammaRed, true
}

// GetGammaRedMin returns the minimum value for field GammaRed.
func (o *ColorfrontTvMode) GetGammaRedMin() float32 {
	return 0.0
}

// GetGammaRedMax returns the maximum value for field GammaRed.
func (o *ColorfrontTvMode) GetGammaRedMax() float32 {
	return 2.0
}


// HasGammaRed returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGammaRed() bool {
	if o != nil && o.GammaRed != nil {
		return true
	}

	return false
}

// SetGammaRed gets a reference to the given float32 and assigns it to the GammaRed field.
func (o *ColorfrontTvMode) SetGammaRed(v float32) {
	tmp := v
	min := o.GetGammaRedMin()
	max := o.GetGammaRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaRed = &tmp
}

// GetGammaGreen returns the GammaGreen field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGammaGreen() float32 {
	if o == nil || o.GammaGreen == nil {
		var ret float32
		return ret
	}
	return *o.GammaGreen
}

// GetGammaGreenOk returns a tuple with the GammaGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGammaGreenOk() (*float32, bool) {
	if o == nil || o.GammaGreen == nil {
		return nil, false
	}
	return o.GammaGreen, true
}

// GetGammaGreenMin returns the minimum value for field GammaGreen.
func (o *ColorfrontTvMode) GetGammaGreenMin() float32 {
	return 0.0
}

// GetGammaGreenMax returns the maximum value for field GammaGreen.
func (o *ColorfrontTvMode) GetGammaGreenMax() float32 {
	return 2.0
}


// HasGammaGreen returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGammaGreen() bool {
	if o != nil && o.GammaGreen != nil {
		return true
	}

	return false
}

// SetGammaGreen gets a reference to the given float32 and assigns it to the GammaGreen field.
func (o *ColorfrontTvMode) SetGammaGreen(v float32) {
	tmp := v
	min := o.GetGammaGreenMin()
	max := o.GetGammaGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaGreen = &tmp
}

// GetGammaBlue returns the GammaBlue field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGammaBlue() float32 {
	if o == nil || o.GammaBlue == nil {
		var ret float32
		return ret
	}
	return *o.GammaBlue
}

// GetGammaBlueOk returns a tuple with the GammaBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGammaBlueOk() (*float32, bool) {
	if o == nil || o.GammaBlue == nil {
		return nil, false
	}
	return o.GammaBlue, true
}

// GetGammaBlueMin returns the minimum value for field GammaBlue.
func (o *ColorfrontTvMode) GetGammaBlueMin() float32 {
	return 0.0
}

// GetGammaBlueMax returns the maximum value for field GammaBlue.
func (o *ColorfrontTvMode) GetGammaBlueMax() float32 {
	return 2.0
}


// HasGammaBlue returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGammaBlue() bool {
	if o != nil && o.GammaBlue != nil {
		return true
	}

	return false
}

// SetGammaBlue gets a reference to the given float32 and assigns it to the GammaBlue field.
func (o *ColorfrontTvMode) SetGammaBlue(v float32) {
	tmp := v
	min := o.GetGammaBlueMin()
	max := o.GetGammaBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GammaBlue = &tmp
}

// GetGainMaster returns the GainMaster field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGainMaster() float32 {
	if o == nil || o.GainMaster == nil {
		var ret float32
		return ret
	}
	return *o.GainMaster
}

// GetGainMasterOk returns a tuple with the GainMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGainMasterOk() (*float32, bool) {
	if o == nil || o.GainMaster == nil {
		return nil, false
	}
	return o.GainMaster, true
}

// GetGainMasterMin returns the minimum value for field GainMaster.
func (o *ColorfrontTvMode) GetGainMasterMin() float32 {
	return 0.0
}

// GetGainMasterMax returns the maximum value for field GainMaster.
func (o *ColorfrontTvMode) GetGainMasterMax() float32 {
	return 5.0
}


// HasGainMaster returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGainMaster() bool {
	if o != nil && o.GainMaster != nil {
		return true
	}

	return false
}

// SetGainMaster gets a reference to the given float32 and assigns it to the GainMaster field.
func (o *ColorfrontTvMode) SetGainMaster(v float32) {
	tmp := v
	min := o.GetGainMasterMin()
	max := o.GetGainMasterMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainMaster = &tmp
}

// GetGainRed returns the GainRed field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGainRed() float32 {
	if o == nil || o.GainRed == nil {
		var ret float32
		return ret
	}
	return *o.GainRed
}

// GetGainRedOk returns a tuple with the GainRed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGainRedOk() (*float32, bool) {
	if o == nil || o.GainRed == nil {
		return nil, false
	}
	return o.GainRed, true
}

// GetGainRedMin returns the minimum value for field GainRed.
func (o *ColorfrontTvMode) GetGainRedMin() float32 {
	return 0.0
}

// GetGainRedMax returns the maximum value for field GainRed.
func (o *ColorfrontTvMode) GetGainRedMax() float32 {
	return 5.0
}


// HasGainRed returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGainRed() bool {
	if o != nil && o.GainRed != nil {
		return true
	}

	return false
}

// SetGainRed gets a reference to the given float32 and assigns it to the GainRed field.
func (o *ColorfrontTvMode) SetGainRed(v float32) {
	tmp := v
	min := o.GetGainRedMin()
	max := o.GetGainRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainRed = &tmp
}

// GetGainGreen returns the GainGreen field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGainGreen() float32 {
	if o == nil || o.GainGreen == nil {
		var ret float32
		return ret
	}
	return *o.GainGreen
}

// GetGainGreenOk returns a tuple with the GainGreen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGainGreenOk() (*float32, bool) {
	if o == nil || o.GainGreen == nil {
		return nil, false
	}
	return o.GainGreen, true
}

// GetGainGreenMin returns the minimum value for field GainGreen.
func (o *ColorfrontTvMode) GetGainGreenMin() float32 {
	return 0.0
}

// GetGainGreenMax returns the maximum value for field GainGreen.
func (o *ColorfrontTvMode) GetGainGreenMax() float32 {
	return 5.0
}


// HasGainGreen returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGainGreen() bool {
	if o != nil && o.GainGreen != nil {
		return true
	}

	return false
}

// SetGainGreen gets a reference to the given float32 and assigns it to the GainGreen field.
func (o *ColorfrontTvMode) SetGainGreen(v float32) {
	tmp := v
	min := o.GetGainGreenMin()
	max := o.GetGainGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainGreen = &tmp
}

// GetGainBlue returns the GainBlue field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetGainBlue() float32 {
	if o == nil || o.GainBlue == nil {
		var ret float32
		return ret
	}
	return *o.GainBlue
}

// GetGainBlueOk returns a tuple with the GainBlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetGainBlueOk() (*float32, bool) {
	if o == nil || o.GainBlue == nil {
		return nil, false
	}
	return o.GainBlue, true
}

// GetGainBlueMin returns the minimum value for field GainBlue.
func (o *ColorfrontTvMode) GetGainBlueMin() float32 {
	return 0.0
}

// GetGainBlueMax returns the maximum value for field GainBlue.
func (o *ColorfrontTvMode) GetGainBlueMax() float32 {
	return 5.0
}


// HasGainBlue returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasGainBlue() bool {
	if o != nil && o.GainBlue != nil {
		return true
	}

	return false
}

// SetGainBlue gets a reference to the given float32 and assigns it to the GainBlue field.
func (o *ColorfrontTvMode) SetGainBlue(v float32) {
	tmp := v
	min := o.GetGainBlueMin()
	max := o.GetGainBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.GainBlue = &tmp
}

// GetSaturation returns the Saturation field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetSaturation() float32 {
	if o == nil || o.Saturation == nil {
		var ret float32
		return ret
	}
	return *o.Saturation
}

// GetSaturationOk returns a tuple with the Saturation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetSaturationOk() (*float32, bool) {
	if o == nil || o.Saturation == nil {
		return nil, false
	}
	return o.Saturation, true
}

// GetSaturationMin returns the minimum value for field Saturation.
func (o *ColorfrontTvMode) GetSaturationMin() float32 {
	return 0.0
}

// GetSaturationMax returns the maximum value for field Saturation.
func (o *ColorfrontTvMode) GetSaturationMax() float32 {
	return 2.0
}


// HasSaturation returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasSaturation() bool {
	if o != nil && o.Saturation != nil {
		return true
	}

	return false
}

// SetSaturation gets a reference to the given float32 and assigns it to the Saturation field.
func (o *ColorfrontTvMode) SetSaturation(v float32) {
	tmp := v
	min := o.GetSaturationMin()
	max := o.GetSaturationMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Saturation = &tmp
}

// GetCameraCorrection returns the CameraCorrection field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetCameraCorrection() bool {
	if o == nil || o.CameraCorrection == nil {
		var ret bool
		return ret
	}
	return *o.CameraCorrection
}

// GetCameraCorrectionOk returns a tuple with the CameraCorrection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetCameraCorrectionOk() (*bool, bool) {
	if o == nil || o.CameraCorrection == nil {
		return nil, false
	}
	return o.CameraCorrection, true
}



// HasCameraCorrection returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasCameraCorrection() bool {
	if o != nil && o.CameraCorrection != nil {
		return true
	}

	return false
}

// SetCameraCorrection gets a reference to the given bool and assigns it to the CameraCorrection field.
func (o *ColorfrontTvMode) SetCameraCorrection(v bool) {
	tmp := v
	o.CameraCorrection = &tmp
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetExposure() float32 {
	if o == nil || o.Exposure == nil {
		var ret float32
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetExposureOk() (*float32, bool) {
	if o == nil || o.Exposure == nil {
		return nil, false
	}
	return o.Exposure, true
}

// GetExposureMin returns the minimum value for field Exposure.
func (o *ColorfrontTvMode) GetExposureMin() float32 {
	return -4.0
}

// GetExposureMax returns the maximum value for field Exposure.
func (o *ColorfrontTvMode) GetExposureMax() float32 {
	return 4.0
}


// HasExposure returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasExposure() bool {
	if o != nil && o.Exposure != nil {
		return true
	}

	return false
}

// SetExposure gets a reference to the given float32 and assigns it to the Exposure field.
func (o *ColorfrontTvMode) SetExposure(v float32) {
	tmp := v
	min := o.GetExposureMin()
	max := o.GetExposureMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Exposure = &tmp
}

// GetColorTemp returns the ColorTemp field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetColorTemp() float32 {
	if o == nil || o.ColorTemp == nil {
		var ret float32
		return ret
	}
	return *o.ColorTemp
}

// GetColorTempOk returns a tuple with the ColorTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetColorTempOk() (*float32, bool) {
	if o == nil || o.ColorTemp == nil {
		return nil, false
	}
	return o.ColorTemp, true
}

// GetColorTempMin returns the minimum value for field ColorTemp.
func (o *ColorfrontTvMode) GetColorTempMin() float32 {
	return -10.0
}

// GetColorTempMax returns the maximum value for field ColorTemp.
func (o *ColorfrontTvMode) GetColorTempMax() float32 {
	return 10.0
}


// HasColorTemp returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasColorTemp() bool {
	if o != nil && o.ColorTemp != nil {
		return true
	}

	return false
}

// SetColorTemp gets a reference to the given float32 and assigns it to the ColorTemp field.
func (o *ColorfrontTvMode) SetColorTemp(v float32) {
	tmp := v
	min := o.GetColorTempMin()
	max := o.GetColorTempMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.ColorTemp = &tmp
}

// GetTint returns the Tint field value if set, zero value otherwise.
func (o *ColorfrontTvMode) GetTint() float32 {
	if o == nil || o.Tint == nil {
		var ret float32
		return ret
	}
	return *o.Tint
}

// GetTintOk returns a tuple with the Tint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorfrontTvMode) GetTintOk() (*float32, bool) {
	if o == nil || o.Tint == nil {
		return nil, false
	}
	return o.Tint, true
}

// GetTintMin returns the minimum value for field Tint.
func (o *ColorfrontTvMode) GetTintMin() float32 {
	return -16.0
}

// GetTintMax returns the maximum value for field Tint.
func (o *ColorfrontTvMode) GetTintMax() float32 {
	return 16.0
}


// HasTint returns a boolean if a field has been set.
func (o *ColorfrontTvMode) HasTint() bool {
	if o != nil && o.Tint != nil {
		return true
	}

	return false
}

// SetTint gets a reference to the given float32 and assigns it to the Tint field.
func (o *ColorfrontTvMode) SetTint(v float32) {
	tmp := v
	min := o.GetTintMin()
	max := o.GetTintMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Tint = &tmp
}

func (o ColorfrontTvMode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Engine != nil {
		toSerialize["engine"] = o.Engine
	}
	if o.InDynRangeGamut != nil {
		toSerialize["inDynRangeGamut"] = o.InDynRangeGamut
	}
	if o.OutDynRangeGamut != nil {
		toSerialize["outDynRangeGamut"] = o.OutDynRangeGamut
	}
	if o.Brightness != nil {
		toSerialize["brightness"] = o.Brightness
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Colorfulness != nil {
		toSerialize["colorfulness"] = o.Colorfulness
	}
	if o.SuperHighlight != nil {
		toSerialize["superHighlight"] = o.SuperHighlight
	}
	if o.Roundtrip != nil {
		toSerialize["roundtrip"] = o.Roundtrip
	}
	if o.ClampToLegal != nil {
		toSerialize["clampToLegal"] = o.ClampToLegal
	}
	if o.ColorCorrector != nil {
		toSerialize["colorCorrector"] = o.ColorCorrector
	}
	if o.LiftMaster != nil {
		toSerialize["liftMaster"] = o.LiftMaster
	}
	if o.LiftRed != nil {
		toSerialize["liftRed"] = o.LiftRed
	}
	if o.LiftGreen != nil {
		toSerialize["liftGreen"] = o.LiftGreen
	}
	if o.LiftBlue != nil {
		toSerialize["liftBlue"] = o.LiftBlue
	}
	if o.GammaMaster != nil {
		toSerialize["gammaMaster"] = o.GammaMaster
	}
	if o.GammaRed != nil {
		toSerialize["gammaRed"] = o.GammaRed
	}
	if o.GammaGreen != nil {
		toSerialize["gammaGreen"] = o.GammaGreen
	}
	if o.GammaBlue != nil {
		toSerialize["gammaBlue"] = o.GammaBlue
	}
	if o.GainMaster != nil {
		toSerialize["gainMaster"] = o.GainMaster
	}
	if o.GainRed != nil {
		toSerialize["gainRed"] = o.GainRed
	}
	if o.GainGreen != nil {
		toSerialize["gainGreen"] = o.GainGreen
	}
	if o.GainBlue != nil {
		toSerialize["gainBlue"] = o.GainBlue
	}
	if o.Saturation != nil {
		toSerialize["saturation"] = o.Saturation
	}
	if o.CameraCorrection != nil {
		toSerialize["cameraCorrection"] = o.CameraCorrection
	}
	if o.Exposure != nil {
		toSerialize["exposure"] = o.Exposure
	}
	if o.ColorTemp != nil {
		toSerialize["colorTemp"] = o.ColorTemp
	}
	if o.Tint != nil {
		toSerialize["tint"] = o.Tint
	}
	return json.Marshal(toSerialize)
}


func (o *ColorfrontTvMode) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasBrightness() {
		var fieldChanged = false
		var v float32 = o.GetBrightness()
		var min float32 = o.GetBrightnessMin()
		var max float32 = o.GetBrightnessMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBrightness(v)
			valueChanged = true
		}
	}
	if o.HasHighlight() {
		var fieldChanged = false
		var v float32 = o.GetHighlight()
		var min float32 = o.GetHighlightMin()
		var max float32 = o.GetHighlightMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetHighlight(v)
			valueChanged = true
		}
	}
	if o.HasColorfulness() {
		var fieldChanged = false
		var v float32 = o.GetColorfulness()
		var min float32 = o.GetColorfulnessMin()
		var max float32 = o.GetColorfulnessMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetColorfulness(v)
			valueChanged = true
		}
	}
	if o.HasSuperHighlight() {
		var fieldChanged = false
		var v float32 = o.GetSuperHighlight()
		var min float32 = o.GetSuperHighlightMin()
		var max float32 = o.GetSuperHighlightMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetSuperHighlight(v)
			valueChanged = true
		}
	}
	if o.HasLiftMaster() {
		var fieldChanged = false
		var v float32 = o.GetLiftMaster()
		var min float32 = o.GetLiftMasterMin()
		var max float32 = o.GetLiftMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftMaster(v)
			valueChanged = true
		}
	}
	if o.HasLiftRed() {
		var fieldChanged = false
		var v float32 = o.GetLiftRed()
		var min float32 = o.GetLiftRedMin()
		var max float32 = o.GetLiftRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftRed(v)
			valueChanged = true
		}
	}
	if o.HasLiftGreen() {
		var fieldChanged = false
		var v float32 = o.GetLiftGreen()
		var min float32 = o.GetLiftGreenMin()
		var max float32 = o.GetLiftGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftGreen(v)
			valueChanged = true
		}
	}
	if o.HasLiftBlue() {
		var fieldChanged = false
		var v float32 = o.GetLiftBlue()
		var min float32 = o.GetLiftBlueMin()
		var max float32 = o.GetLiftBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetLiftBlue(v)
			valueChanged = true
		}
	}
	if o.HasGammaMaster() {
		var fieldChanged = false
		var v float32 = o.GetGammaMaster()
		var min float32 = o.GetGammaMasterMin()
		var max float32 = o.GetGammaMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaMaster(v)
			valueChanged = true
		}
	}
	if o.HasGammaRed() {
		var fieldChanged = false
		var v float32 = o.GetGammaRed()
		var min float32 = o.GetGammaRedMin()
		var max float32 = o.GetGammaRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaRed(v)
			valueChanged = true
		}
	}
	if o.HasGammaGreen() {
		var fieldChanged = false
		var v float32 = o.GetGammaGreen()
		var min float32 = o.GetGammaGreenMin()
		var max float32 = o.GetGammaGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaGreen(v)
			valueChanged = true
		}
	}
	if o.HasGammaBlue() {
		var fieldChanged = false
		var v float32 = o.GetGammaBlue()
		var min float32 = o.GetGammaBlueMin()
		var max float32 = o.GetGammaBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGammaBlue(v)
			valueChanged = true
		}
	}
	if o.HasGainMaster() {
		var fieldChanged = false
		var v float32 = o.GetGainMaster()
		var min float32 = o.GetGainMasterMin()
		var max float32 = o.GetGainMasterMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainMaster(v)
			valueChanged = true
		}
	}
	if o.HasGainRed() {
		var fieldChanged = false
		var v float32 = o.GetGainRed()
		var min float32 = o.GetGainRedMin()
		var max float32 = o.GetGainRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainRed(v)
			valueChanged = true
		}
	}
	if o.HasGainGreen() {
		var fieldChanged = false
		var v float32 = o.GetGainGreen()
		var min float32 = o.GetGainGreenMin()
		var max float32 = o.GetGainGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainGreen(v)
			valueChanged = true
		}
	}
	if o.HasGainBlue() {
		var fieldChanged = false
		var v float32 = o.GetGainBlue()
		var min float32 = o.GetGainBlueMin()
		var max float32 = o.GetGainBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGainBlue(v)
			valueChanged = true
		}
	}
	if o.HasSaturation() {
		var fieldChanged = false
		var v float32 = o.GetSaturation()
		var min float32 = o.GetSaturationMin()
		var max float32 = o.GetSaturationMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetSaturation(v)
			valueChanged = true
		}
	}
	if o.HasExposure() {
		var fieldChanged = false
		var v float32 = o.GetExposure()
		var min float32 = o.GetExposureMin()
		var max float32 = o.GetExposureMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetExposure(v)
			valueChanged = true
		}
	}
	if o.HasColorTemp() {
		var fieldChanged = false
		var v float32 = o.GetColorTemp()
		var min float32 = o.GetColorTempMin()
		var max float32 = o.GetColorTempMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetColorTemp(v)
			valueChanged = true
		}
	}
	if o.HasTint() {
		var fieldChanged = false
		var v float32 = o.GetTint()
		var min float32 = o.GetTintMin()
		var max float32 = o.GetTintMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetTint(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableColorfrontTvMode struct {
	value *ColorfrontTvMode
	isSet bool
}

func (v NullableColorfrontTvMode) Get() *ColorfrontTvMode {
	return v.value
}

func (v *NullableColorfrontTvMode) Set(val *ColorfrontTvMode) {
	v.value = val
	v.isSet = true
}

func (v NullableColorfrontTvMode) IsSet() bool {
	return v.isSet
}

func (v *NullableColorfrontTvMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorfrontTvMode(val *ColorfrontTvMode) *NullableColorfrontTvMode {
	return &NullableColorfrontTvMode{value: val, isSet: true}
}

func (v NullableColorfrontTvMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorfrontTvMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


