/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// PatternColor struct for PatternColor
type PatternColor struct {
	// The color depth in bits, valid values are: 8, 10, 12 & 16
	Depth *int32 `json:"depth,omitempty"`
	// The blue component of the color, max value depends on bit depth
	Blue *int32 `json:"blue,omitempty"`
	// The green component of the color, max value depends on bit depth
	Green *int32 `json:"green,omitempty"`
	// The red component of the color, max value depends on bit depth
	Red *int32 `json:"red,omitempty"`
}

// NewPatternColor instantiates a new PatternColor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatternColor() *PatternColor {
	this := PatternColor{}
	var depth int32 = 10
	this.Depth = &depth
	var blue int32 = 0
	this.Blue = &blue
	var green int32 = 0
	this.Green = &green
	var red int32 = 0
	this.Red = &red
	return &this
}

// NewPatternColorWithDefaults instantiates a new PatternColor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatternColorWithDefaults() *PatternColor {
	this := PatternColor{}
	var depth int32 = 10
	this.Depth = &depth
	var blue int32 = 0
	this.Blue = &blue
	var green int32 = 0
	this.Green = &green
	var red int32 = 0
	this.Red = &red
	return &this
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *PatternColor) GetDepth() int32 {
	if o == nil || o.Depth == nil {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternColor) GetDepthOk() (*int32, bool) {
	if o == nil || o.Depth == nil {
		return nil, false
	}
	return o.Depth, true
}

// GetDepthMin returns the minimum value for field Depth.
func (o *PatternColor) GetDepthMin() int32 {
	return 8
}

// GetDepthMax returns the maximum value for field Depth.
func (o *PatternColor) GetDepthMax() int32 {
	return 16
}


// HasDepth returns a boolean if a field has been set.
func (o *PatternColor) HasDepth() bool {
	if o != nil && o.Depth != nil {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *PatternColor) SetDepth(v int32) {
	tmp := v
	min := o.GetDepthMin()
	max := o.GetDepthMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Depth = &tmp
}

// GetBlue returns the Blue field value if set, zero value otherwise.
func (o *PatternColor) GetBlue() int32 {
	if o == nil || o.Blue == nil {
		var ret int32
		return ret
	}
	return *o.Blue
}

// GetBlueOk returns a tuple with the Blue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternColor) GetBlueOk() (*int32, bool) {
	if o == nil || o.Blue == nil {
		return nil, false
	}
	return o.Blue, true
}

// GetBlueMin returns the minimum value for field Blue.
func (o *PatternColor) GetBlueMin() int32 {
	return 0
}

// GetBlueMax returns the maximum value for field Blue.
func (o *PatternColor) GetBlueMax() int32 {
	return 65535
}


// HasBlue returns a boolean if a field has been set.
func (o *PatternColor) HasBlue() bool {
	if o != nil && o.Blue != nil {
		return true
	}

	return false
}

// SetBlue gets a reference to the given int32 and assigns it to the Blue field.
func (o *PatternColor) SetBlue(v int32) {
	tmp := v
	min := o.GetBlueMin()
	max := o.GetBlueMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Blue = &tmp
}

// GetGreen returns the Green field value if set, zero value otherwise.
func (o *PatternColor) GetGreen() int32 {
	if o == nil || o.Green == nil {
		var ret int32
		return ret
	}
	return *o.Green
}

// GetGreenOk returns a tuple with the Green field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternColor) GetGreenOk() (*int32, bool) {
	if o == nil || o.Green == nil {
		return nil, false
	}
	return o.Green, true
}

// GetGreenMin returns the minimum value for field Green.
func (o *PatternColor) GetGreenMin() int32 {
	return 0
}

// GetGreenMax returns the maximum value for field Green.
func (o *PatternColor) GetGreenMax() int32 {
	return 65535
}


// HasGreen returns a boolean if a field has been set.
func (o *PatternColor) HasGreen() bool {
	if o != nil && o.Green != nil {
		return true
	}

	return false
}

// SetGreen gets a reference to the given int32 and assigns it to the Green field.
func (o *PatternColor) SetGreen(v int32) {
	tmp := v
	min := o.GetGreenMin()
	max := o.GetGreenMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Green = &tmp
}

// GetRed returns the Red field value if set, zero value otherwise.
func (o *PatternColor) GetRed() int32 {
	if o == nil || o.Red == nil {
		var ret int32
		return ret
	}
	return *o.Red
}

// GetRedOk returns a tuple with the Red field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternColor) GetRedOk() (*int32, bool) {
	if o == nil || o.Red == nil {
		return nil, false
	}
	return o.Red, true
}

// GetRedMin returns the minimum value for field Red.
func (o *PatternColor) GetRedMin() int32 {
	return 0
}

// GetRedMax returns the maximum value for field Red.
func (o *PatternColor) GetRedMax() int32 {
	return 65535
}


// HasRed returns a boolean if a field has been set.
func (o *PatternColor) HasRed() bool {
	if o != nil && o.Red != nil {
		return true
	}

	return false
}

// SetRed gets a reference to the given int32 and assigns it to the Red field.
func (o *PatternColor) SetRed(v int32) {
	tmp := v
	min := o.GetRedMin()
	max := o.GetRedMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Red = &tmp
}

func (o PatternColor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Depth != nil {
		toSerialize["depth"] = o.Depth
	}
	if o.Blue != nil {
		toSerialize["blue"] = o.Blue
	}
	if o.Green != nil {
		toSerialize["green"] = o.Green
	}
	if o.Red != nil {
		toSerialize["red"] = o.Red
	}
	return json.Marshal(toSerialize)
}


func (o *PatternColor) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasDepth() {
		var fieldChanged = false
		var v int32 = o.GetDepth()
		var min int32 = o.GetDepthMin()
		var max int32 = o.GetDepthMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetDepth(v)
			valueChanged = true
		}
	}
	if o.HasBlue() {
		var fieldChanged = false
		var v int32 = o.GetBlue()
		var min int32 = o.GetBlueMin()
		var max int32 = o.GetBlueMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetBlue(v)
			valueChanged = true
		}
	}
	if o.HasGreen() {
		var fieldChanged = false
		var v int32 = o.GetGreen()
		var min int32 = o.GetGreenMin()
		var max int32 = o.GetGreenMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetGreen(v)
			valueChanged = true
		}
	}
	if o.HasRed() {
		var fieldChanged = false
		var v int32 = o.GetRed()
		var min int32 = o.GetRedMin()
		var max int32 = o.GetRedMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetRed(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullablePatternColor struct {
	value *PatternColor
	isSet bool
}

func (v NullablePatternColor) Get() *PatternColor {
	return v.value
}

func (v *NullablePatternColor) Set(val *PatternColor) {
	v.value = val
	v.isSet = true
}

func (v NullablePatternColor) IsSet() bool {
	return v.isSet
}

func (v *NullablePatternColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatternColor(val *PatternColor) *NullablePatternColor {
	return &NullablePatternColor{value: val, isSet: true}
}

func (v NullablePatternColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatternColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


