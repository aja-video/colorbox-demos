/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// NetParams struct for NetParams
type NetParams struct {
	Address *string `json:"address,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
	Gateway *string `json:"gateway,omitempty"`
	DnsServer1 *string `json:"dnsServer1,omitempty"`
	DnsServer2 *string `json:"dnsServer2,omitempty"`
	DnsSearch *string `json:"dnsSearch,omitempty"`
}

// NewNetParams instantiates a new NetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetParams() *NetParams {
	this := NetParams{}
	return &this
}

// NewNetParamsWithDefaults instantiates a new NetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetParamsWithDefaults() *NetParams {
	this := NetParams{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *NetParams) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}



// HasAddress returns a boolean if a field has been set.
func (o *NetParams) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *NetParams) SetAddress(v string) {
	tmp := v
	o.Address = &tmp
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *NetParams) GetSubnet() string {
	if o == nil || o.Subnet == nil {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetSubnetOk() (*string, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}



// HasSubnet returns a boolean if a field has been set.
func (o *NetParams) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *NetParams) SetSubnet(v string) {
	tmp := v
	o.Subnet = &tmp
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *NetParams) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}



// HasGateway returns a boolean if a field has been set.
func (o *NetParams) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *NetParams) SetGateway(v string) {
	tmp := v
	o.Gateway = &tmp
}

// GetDnsServer1 returns the DnsServer1 field value if set, zero value otherwise.
func (o *NetParams) GetDnsServer1() string {
	if o == nil || o.DnsServer1 == nil {
		var ret string
		return ret
	}
	return *o.DnsServer1
}

// GetDnsServer1Ok returns a tuple with the DnsServer1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetDnsServer1Ok() (*string, bool) {
	if o == nil || o.DnsServer1 == nil {
		return nil, false
	}
	return o.DnsServer1, true
}



// HasDnsServer1 returns a boolean if a field has been set.
func (o *NetParams) HasDnsServer1() bool {
	if o != nil && o.DnsServer1 != nil {
		return true
	}

	return false
}

// SetDnsServer1 gets a reference to the given string and assigns it to the DnsServer1 field.
func (o *NetParams) SetDnsServer1(v string) {
	tmp := v
	o.DnsServer1 = &tmp
}

// GetDnsServer2 returns the DnsServer2 field value if set, zero value otherwise.
func (o *NetParams) GetDnsServer2() string {
	if o == nil || o.DnsServer2 == nil {
		var ret string
		return ret
	}
	return *o.DnsServer2
}

// GetDnsServer2Ok returns a tuple with the DnsServer2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetDnsServer2Ok() (*string, bool) {
	if o == nil || o.DnsServer2 == nil {
		return nil, false
	}
	return o.DnsServer2, true
}



// HasDnsServer2 returns a boolean if a field has been set.
func (o *NetParams) HasDnsServer2() bool {
	if o != nil && o.DnsServer2 != nil {
		return true
	}

	return false
}

// SetDnsServer2 gets a reference to the given string and assigns it to the DnsServer2 field.
func (o *NetParams) SetDnsServer2(v string) {
	tmp := v
	o.DnsServer2 = &tmp
}

// GetDnsSearch returns the DnsSearch field value if set, zero value otherwise.
func (o *NetParams) GetDnsSearch() string {
	if o == nil || o.DnsSearch == nil {
		var ret string
		return ret
	}
	return *o.DnsSearch
}

// GetDnsSearchOk returns a tuple with the DnsSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetParams) GetDnsSearchOk() (*string, bool) {
	if o == nil || o.DnsSearch == nil {
		return nil, false
	}
	return o.DnsSearch, true
}



// HasDnsSearch returns a boolean if a field has been set.
func (o *NetParams) HasDnsSearch() bool {
	if o != nil && o.DnsSearch != nil {
		return true
	}

	return false
}

// SetDnsSearch gets a reference to the given string and assigns it to the DnsSearch field.
func (o *NetParams) SetDnsSearch(v string) {
	tmp := v
	o.DnsSearch = &tmp
}

func (o NetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Subnet != nil {
		toSerialize["subnet"] = o.Subnet
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.DnsServer1 != nil {
		toSerialize["dnsServer1"] = o.DnsServer1
	}
	if o.DnsServer2 != nil {
		toSerialize["dnsServer2"] = o.DnsServer2
	}
	if o.DnsSearch != nil {
		toSerialize["dnsSearch"] = o.DnsSearch
	}
	return json.Marshal(toSerialize)
}


func (o *NetParams) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasAddress() {
		var fieldChanged = false
		var v string = o.GetAddress()
		if fieldChanged {
			o.SetAddress(v)
			valueChanged = true
		}
	}
	if o.HasSubnet() {
		var fieldChanged = false
		var v string = o.GetSubnet()
		if fieldChanged {
			o.SetSubnet(v)
			valueChanged = true
		}
	}
	if o.HasGateway() {
		var fieldChanged = false
		var v string = o.GetGateway()
		if fieldChanged {
			o.SetGateway(v)
			valueChanged = true
		}
	}
	if o.HasDnsServer1() {
		var fieldChanged = false
		var v string = o.GetDnsServer1()
		if fieldChanged {
			o.SetDnsServer1(v)
			valueChanged = true
		}
	}
	if o.HasDnsServer2() {
		var fieldChanged = false
		var v string = o.GetDnsServer2()
		if fieldChanged {
			o.SetDnsServer2(v)
			valueChanged = true
		}
	}
	if o.HasDnsSearch() {
		var fieldChanged = false
		var v string = o.GetDnsSearch()
		if fieldChanged {
			o.SetDnsSearch(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullableNetParams struct {
	value *NetParams
	isSet bool
}

func (v NullableNetParams) Get() *NetParams {
	return v.value
}

func (v *NullableNetParams) Set(val *NetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetParams(val *NetParams) *NullableNetParams {
	return &NullableNetParams{value: val, isSet: true}
}

func (v NullableNetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


