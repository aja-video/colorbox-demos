/*
OpenAPI Soji

This is a REST API for the AJA Soji product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// ColorfrontColorspace the model 'ColorfrontColorspace'
type ColorfrontColorspace string

// List of ColorfrontColorspace
const (
	COLORFRONTCOLORSPACE_BT709 ColorfrontColorspace = "BT709"
	COLORFRONTCOLORSPACE_PQ_BT2020 ColorfrontColorspace = "PQ BT2020"
	COLORFRONTCOLORSPACE_HLG_BT2020 ColorfrontColorspace = "HLG BT2020"
)

// All allowed values of ColorfrontColorspace enum
var AllowedColorfrontColorspaceEnumValues = []ColorfrontColorspace{
	"BT709",
	"PQ BT2020",
	"HLG BT2020",
}

func (v *ColorfrontColorspace) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColorfrontColorspace(value)
	for _, existing := range AllowedColorfrontColorspaceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColorfrontColorspace", value)
}

// NewColorfrontColorspaceFromValue returns a pointer to a valid ColorfrontColorspace
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColorfrontColorspaceFromValue(v string) (*ColorfrontColorspace, error) {
	ev := ColorfrontColorspace(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColorfrontColorspace: valid values are %v", v, AllowedColorfrontColorspaceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColorfrontColorspace) IsValid() bool {
	for _, existing := range AllowedColorfrontColorspaceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ColorfrontColorspace value
func (v ColorfrontColorspace) Ptr() *ColorfrontColorspace {
	return &v
}

type NullableColorfrontColorspace struct {
	value *ColorfrontColorspace
	isSet bool
}

func (v NullableColorfrontColorspace) Get() *ColorfrontColorspace {
	return v.value
}

func (v *NullableColorfrontColorspace) Set(val *ColorfrontColorspace) {
	v.value = val
	v.isSet = true
}

func (v NullableColorfrontColorspace) IsSet() bool {
	return v.isSet
}

func (v *NullableColorfrontColorspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorfrontColorspace(val *ColorfrontColorspace) *NullableColorfrontColorspace {
	return &NullableColorfrontColorspace{value: val, isSet: true}
}

func (v NullableColorfrontColorspace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorfrontColorspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

