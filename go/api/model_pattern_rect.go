/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
)

// PatternRect struct for PatternRect
type PatternRect struct {
	// The x start point in for the rect, normalized to 0.0 - 1.0
	Xstart *float32 `json:"xstart,omitempty"`
	// The y start point in for the rect, normalized to 0.0 - 1.0
	Ystart *float32 `json:"ystart,omitempty"`
	// The width of the rect, normalized to 0.0 - 1.0
	Width *float32 `json:"width,omitempty"`
	// The height of the rect, normalized to 0.0 - 1.0
	Height *float32 `json:"height,omitempty"`
}

// NewPatternRect instantiates a new PatternRect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatternRect() *PatternRect {
	this := PatternRect{}
	var xstart float32 = 0
	this.Xstart = &xstart
	var ystart float32 = 0
	this.Ystart = &ystart
	var width float32 = 0
	this.Width = &width
	var height float32 = 0
	this.Height = &height
	return &this
}

// NewPatternRectWithDefaults instantiates a new PatternRect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatternRectWithDefaults() *PatternRect {
	this := PatternRect{}
	var xstart float32 = 0
	this.Xstart = &xstart
	var ystart float32 = 0
	this.Ystart = &ystart
	var width float32 = 0
	this.Width = &width
	var height float32 = 0
	this.Height = &height
	return &this
}

// GetXstart returns the Xstart field value if set, zero value otherwise.
func (o *PatternRect) GetXstart() float32 {
	if o == nil || o.Xstart == nil {
		var ret float32
		return ret
	}
	return *o.Xstart
}

// GetXstartOk returns a tuple with the Xstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternRect) GetXstartOk() (*float32, bool) {
	if o == nil || o.Xstart == nil {
		return nil, false
	}
	return o.Xstart, true
}

// GetXstartMin returns the minimum value for field Xstart.
func (o *PatternRect) GetXstartMin() float32 {
	return 0.0
}

// GetXstartMax returns the maximum value for field Xstart.
func (o *PatternRect) GetXstartMax() float32 {
	return 1.0
}


// HasXstart returns a boolean if a field has been set.
func (o *PatternRect) HasXstart() bool {
	if o != nil && o.Xstart != nil {
		return true
	}

	return false
}

// SetXstart gets a reference to the given float32 and assigns it to the Xstart field.
func (o *PatternRect) SetXstart(v float32) {
	tmp := v
	min := o.GetXstartMin()
	max := o.GetXstartMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Xstart = &tmp
}

// GetYstart returns the Ystart field value if set, zero value otherwise.
func (o *PatternRect) GetYstart() float32 {
	if o == nil || o.Ystart == nil {
		var ret float32
		return ret
	}
	return *o.Ystart
}

// GetYstartOk returns a tuple with the Ystart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternRect) GetYstartOk() (*float32, bool) {
	if o == nil || o.Ystart == nil {
		return nil, false
	}
	return o.Ystart, true
}

// GetYstartMin returns the minimum value for field Ystart.
func (o *PatternRect) GetYstartMin() float32 {
	return 0.0
}

// GetYstartMax returns the maximum value for field Ystart.
func (o *PatternRect) GetYstartMax() float32 {
	return 1.0
}


// HasYstart returns a boolean if a field has been set.
func (o *PatternRect) HasYstart() bool {
	if o != nil && o.Ystart != nil {
		return true
	}

	return false
}

// SetYstart gets a reference to the given float32 and assigns it to the Ystart field.
func (o *PatternRect) SetYstart(v float32) {
	tmp := v
	min := o.GetYstartMin()
	max := o.GetYstartMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Ystart = &tmp
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *PatternRect) GetWidth() float32 {
	if o == nil || o.Width == nil {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternRect) GetWidthOk() (*float32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// GetWidthMin returns the minimum value for field Width.
func (o *PatternRect) GetWidthMin() float32 {
	return 0.0
}

// GetWidthMax returns the maximum value for field Width.
func (o *PatternRect) GetWidthMax() float32 {
	return 1.0
}


// HasWidth returns a boolean if a field has been set.
func (o *PatternRect) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *PatternRect) SetWidth(v float32) {
	tmp := v
	min := o.GetWidthMin()
	max := o.GetWidthMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Width = &tmp
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *PatternRect) GetHeight() float32 {
	if o == nil || o.Height == nil {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatternRect) GetHeightOk() (*float32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// GetHeightMin returns the minimum value for field Height.
func (o *PatternRect) GetHeightMin() float32 {
	return 0.0
}

// GetHeightMax returns the maximum value for field Height.
func (o *PatternRect) GetHeightMax() float32 {
	return 1.0
}


// HasHeight returns a boolean if a field has been set.
func (o *PatternRect) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *PatternRect) SetHeight(v float32) {
	tmp := v
	min := o.GetHeightMin()
	max := o.GetHeightMax()
	if tmp < min { tmp = min }
	if tmp > max { tmp = max }
	o.Height = &tmp
}

func (o PatternRect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Xstart != nil {
		toSerialize["xstart"] = o.Xstart
	}
	if o.Ystart != nil {
		toSerialize["ystart"] = o.Ystart
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}


func (o *PatternRect) ApplyMinMaxConstraints() bool {
	var valueChanged bool = false
	if o.HasXstart() {
		var fieldChanged = false
		var v float32 = o.GetXstart()
		var min float32 = o.GetXstartMin()
		var max float32 = o.GetXstartMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetXstart(v)
			valueChanged = true
		}
	}
	if o.HasYstart() {
		var fieldChanged = false
		var v float32 = o.GetYstart()
		var min float32 = o.GetYstartMin()
		var max float32 = o.GetYstartMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetYstart(v)
			valueChanged = true
		}
	}
	if o.HasWidth() {
		var fieldChanged = false
		var v float32 = o.GetWidth()
		var min float32 = o.GetWidthMin()
		var max float32 = o.GetWidthMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetWidth(v)
			valueChanged = true
		}
	}
	if o.HasHeight() {
		var fieldChanged = false
		var v float32 = o.GetHeight()
		var min float32 = o.GetHeightMin()
		var max float32 = o.GetHeightMax()
		if v < min {
			v = min
			fieldChanged = true
		}
		if v > max {
			v = max
			fieldChanged = true
		}
		if fieldChanged {
			o.SetHeight(v)
			valueChanged = true
		}
	}
	return valueChanged
}

type NullablePatternRect struct {
	value *PatternRect
	isSet bool
}

func (v NullablePatternRect) Get() *PatternRect {
	return v.value
}

func (v *NullablePatternRect) Set(val *PatternRect) {
	v.value = val
	v.isSet = true
}

func (v NullablePatternRect) IsSet() bool {
	return v.isSet
}

func (v *NullablePatternRect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatternRect(val *PatternRect) *NullablePatternRect {
	return &NullablePatternRect{value: val, isSet: true}
}

func (v NullablePatternRect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatternRect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


