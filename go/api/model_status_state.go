/*
OpenAPI ColorBox

This is a REST API for the AJA ColorBox product.

The version of the OpenAPI document: 1.0.0
Contact: support@aja.com

NOTE: This code is auto generated by OpenAPI Generator (https://openapi-generator.tech).
      Do not edit this code manually.

Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
*/

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatusState The good/maybe/bad/unknown of the status object
type StatusState string

// List of StatusState
const (
	STATUSSTATE_STATUS_STATE_GOOD StatusState = "StatusStateGood"
	STATUSSTATE_STATUS_STATE_MAYBE StatusState = "StatusStateMaybe"
	STATUSSTATE_STATUS_STATE_BAD StatusState = "StatusStateBad"
	STATUSSTATE_STATUS_STATE_UNKNOWN StatusState = "StatusStateUnknown"
)

// All allowed values of StatusState enum
var AllowedStatusStateEnumValues = []StatusState{
	"StatusStateGood",
	"StatusStateMaybe",
	"StatusStateBad",
	"StatusStateUnknown",
}

func (v *StatusState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusState(value)
	for _, existing := range AllowedStatusStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusState", value)
}

// NewStatusStateFromValue returns a pointer to a valid StatusState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusStateFromValue(v string) (*StatusState, error) {
	ev := StatusState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusState: valid values are %v", v, AllowedStatusStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusState) IsValid() bool {
	for _, existing := range AllowedStatusStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusState value
func (v StatusState) Ptr() *StatusState {
	return &v
}

type NullableStatusState struct {
	value *StatusState
	isSet bool
}

func (v NullableStatusState) Get() *StatusState {
	return v.value
}

func (v *NullableStatusState) Set(val *StatusState) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusState) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusState(val *StatusState) *NullableStatusState {
	return &NullableStatusState{value: val, isSet: true}
}

func (v NullableStatusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

