/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIProcAmp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcAmp::OAIProcAmp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcAmp::OAIProcAmp() {
    this->initializeModel();
}

OAIProcAmp::~OAIProcAmp() {}

void OAIProcAmp::initializeModel() {

    m_black_isSet = false;
    m_black_isValid = false;

    m_gain_isSet = false;
    m_gain_isValid = false;

    m_hue_isSet = false;
    m_hue_isValid = false;

    m_sat_isSet = false;
    m_sat_isValid = false;

    m_units_black_isSet = false;
    m_units_black_isValid = false;

    m_units_gain_isSet = false;
    m_units_gain_isValid = false;

    m_units_hue_isSet = false;
    m_units_hue_isValid = false;

    m_units_sat_isSet = false;
    m_units_sat_isValid = false;
}

void OAIProcAmp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcAmp::fromJsonObject(QJsonObject json) {

    m_black_isValid = ::OpenAPI::fromJsonValue(black, json[QString("black")]);
    m_black_isSet = !json[QString("black")].isNull() && m_black_isValid;

    m_gain_isValid = ::OpenAPI::fromJsonValue(gain, json[QString("gain")]);
    m_gain_isSet = !json[QString("gain")].isNull() && m_gain_isValid;

    m_hue_isValid = ::OpenAPI::fromJsonValue(hue, json[QString("hue")]);
    m_hue_isSet = !json[QString("hue")].isNull() && m_hue_isValid;

    m_sat_isValid = ::OpenAPI::fromJsonValue(sat, json[QString("sat")]);
    m_sat_isSet = !json[QString("sat")].isNull() && m_sat_isValid;

    m_units_black_isValid = ::OpenAPI::fromJsonValue(units_black, json[QString("unitsBlack")]);
    m_units_black_isSet = !json[QString("unitsBlack")].isNull() && m_units_black_isValid;

    m_units_gain_isValid = ::OpenAPI::fromJsonValue(units_gain, json[QString("unitsGain")]);
    m_units_gain_isSet = !json[QString("unitsGain")].isNull() && m_units_gain_isValid;

    m_units_hue_isValid = ::OpenAPI::fromJsonValue(units_hue, json[QString("unitsHue")]);
    m_units_hue_isSet = !json[QString("unitsHue")].isNull() && m_units_hue_isValid;

    m_units_sat_isValid = ::OpenAPI::fromJsonValue(units_sat, json[QString("unitsSat")]);
    m_units_sat_isSet = !json[QString("unitsSat")].isNull() && m_units_sat_isValid;

    applyMinMaxConstraints();
}

QString OAIProcAmp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcAmp::asJsonObject() const {
    QJsonObject obj;
    if (m_black_isSet) {
        obj.insert(QString("black"), ::OpenAPI::toJsonValue(black));
    }
    if (m_gain_isSet) {
        obj.insert(QString("gain"), ::OpenAPI::toJsonValue(gain));
    }
    if (m_hue_isSet) {
        obj.insert(QString("hue"), ::OpenAPI::toJsonValue(hue));
    }
    if (m_sat_isSet) {
        obj.insert(QString("sat"), ::OpenAPI::toJsonValue(sat));
    }
    if (m_units_black_isSet) {
        obj.insert(QString("unitsBlack"), ::OpenAPI::toJsonValue(units_black));
    }
    if (m_units_gain_isSet) {
        obj.insert(QString("unitsGain"), ::OpenAPI::toJsonValue(units_gain));
    }
    if (m_units_hue_isSet) {
        obj.insert(QString("unitsHue"), ::OpenAPI::toJsonValue(units_hue));
    }
    if (m_units_sat_isSet) {
        obj.insert(QString("unitsSat"), ::OpenAPI::toJsonValue(units_sat));
    }
    return obj;
}

double OAIProcAmp::getBlack() const {
    return black;
}
void OAIProcAmp::setBlack(const double &black) {
	double v = black;
	double min = blackMin();
	double max = blackMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->black = v;
    this->m_black_isSet = true;
}

bool OAIProcAmp::is_black_Set() const{
    return m_black_isSet;
}

bool OAIProcAmp::is_black_Valid() const{
    return m_black_isValid;
}

double OAIProcAmp::blackMin() const {
	return -20.0;
}

double OAIProcAmp::blackMax() const {
	return 20.0;
}

double OAIProcAmp::getGain() const {
    return gain;
}
void OAIProcAmp::setGain(const double &gain) {
	double v = gain;
	double min = gainMin();
	double max = gainMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->gain = v;
    this->m_gain_isSet = true;
}

bool OAIProcAmp::is_gain_Set() const{
    return m_gain_isSet;
}

bool OAIProcAmp::is_gain_Valid() const{
    return m_gain_isValid;
}

double OAIProcAmp::gainMin() const {
	return 0;
}

double OAIProcAmp::gainMax() const {
	return 1.5;
}

double OAIProcAmp::getHue() const {
    return hue;
}
void OAIProcAmp::setHue(const double &hue) {
	double v = hue;
	double min = hueMin();
	double max = hueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->hue = v;
    this->m_hue_isSet = true;
}

bool OAIProcAmp::is_hue_Set() const{
    return m_hue_isSet;
}

bool OAIProcAmp::is_hue_Valid() const{
    return m_hue_isValid;
}

double OAIProcAmp::hueMin() const {
	return -179;
}

double OAIProcAmp::hueMax() const {
	return 180;
}

double OAIProcAmp::getSat() const {
    return sat;
}
void OAIProcAmp::setSat(const double &sat) {
	double v = sat;
	double min = satMin();
	double max = satMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->sat = v;
    this->m_sat_isSet = true;
}

bool OAIProcAmp::is_sat_Set() const{
    return m_sat_isSet;
}

bool OAIProcAmp::is_sat_Valid() const{
    return m_sat_isValid;
}

double OAIProcAmp::satMin() const {
	return 0.0;
}

double OAIProcAmp::satMax() const {
	return 1.5;
}

QString OAIProcAmp::getUnitsBlack() const {
    return units_black;
}
void OAIProcAmp::setUnitsBlack(const QString &units_black) {
	QString v = units_black;
	this->units_black = v;
    this->m_units_black_isSet = true;
}

bool OAIProcAmp::is_units_black_Set() const{
    return m_units_black_isSet;
}

bool OAIProcAmp::is_units_black_Valid() const{
    return m_units_black_isValid;
}



QString OAIProcAmp::getUnitsGain() const {
    return units_gain;
}
void OAIProcAmp::setUnitsGain(const QString &units_gain) {
	QString v = units_gain;
	this->units_gain = v;
    this->m_units_gain_isSet = true;
}

bool OAIProcAmp::is_units_gain_Set() const{
    return m_units_gain_isSet;
}

bool OAIProcAmp::is_units_gain_Valid() const{
    return m_units_gain_isValid;
}



QString OAIProcAmp::getUnitsHue() const {
    return units_hue;
}
void OAIProcAmp::setUnitsHue(const QString &units_hue) {
	QString v = units_hue;
	this->units_hue = v;
    this->m_units_hue_isSet = true;
}

bool OAIProcAmp::is_units_hue_Set() const{
    return m_units_hue_isSet;
}

bool OAIProcAmp::is_units_hue_Valid() const{
    return m_units_hue_isValid;
}



QString OAIProcAmp::getUnitsSat() const {
    return units_sat;
}
void OAIProcAmp::setUnitsSat(const QString &units_sat) {
	QString v = units_sat;
	this->units_sat = v;
    this->m_units_sat_isSet = true;
}

bool OAIProcAmp::is_units_sat_Set() const{
    return m_units_sat_isSet;
}

bool OAIProcAmp::is_units_sat_Valid() const{
    return m_units_sat_isValid;
}



bool OAIProcAmp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_black_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_black_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_hue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_sat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcAmp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIProcAmp::applyMinMaxConstraints() {
	bool valueChanged = false;
	if (is_black_Set())
	{
		bool blackChanged = false;
		double v = getBlack();
		double min = blackMin();
		double max = blackMax();
		if (v < min) { v = min; blackChanged = true; }
		if (v > max) { v = max; blackChanged = true; }
		if (blackChanged) { setBlack(v); valueChanged = true; }
	}
	if (is_gain_Set())
	{
		bool gainChanged = false;
		double v = getGain();
		double min = gainMin();
		double max = gainMax();
		if (v < min) { v = min; gainChanged = true; }
		if (v > max) { v = max; gainChanged = true; }
		if (gainChanged) { setGain(v); valueChanged = true; }
	}
	if (is_hue_Set())
	{
		bool hueChanged = false;
		double v = getHue();
		double min = hueMin();
		double max = hueMax();
		if (v < min) { v = min; hueChanged = true; }
		if (v > max) { v = max; hueChanged = true; }
		if (hueChanged) { setHue(v); valueChanged = true; }
	}
	if (is_sat_Set())
	{
		bool satChanged = false;
		double v = getSat();
		double min = satMin();
		double max = satMax();
		if (v < min) { v = min; satChanged = true; }
		if (v > max) { v = max; satChanged = true; }
		if (satChanged) { setSat(v); valueChanged = true; }
	}
	if (is_units_black_Set())
	{
		bool unitsBlackChanged = false;
		QString v = getUnitsBlack();
		if (unitsBlackChanged) { setUnitsBlack(v); valueChanged = true; }
	}
	if (is_units_gain_Set())
	{
		bool unitsGainChanged = false;
		QString v = getUnitsGain();
		if (unitsGainChanged) { setUnitsGain(v); valueChanged = true; }
	}
	if (is_units_hue_Set())
	{
		bool unitsHueChanged = false;
		QString v = getUnitsHue();
		if (unitsHueChanged) { setUnitsHue(v); valueChanged = true; }
	}
	if (is_units_sat_Set())
	{
		bool unitsSatChanged = false;
		QString v = getUnitsSat();
		if (unitsSatChanged) { setUnitsSat(v); valueChanged = true; }
	}
	return valueChanged;
}

} // namespace OpenAPI
