/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIPreviewTap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviewTap::OAIPreviewTap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviewTap::OAIPreviewTap() {
    this->initializeModel();
}

OAIPreviewTap::~OAIPreviewTap() {}

void OAIPreviewTap::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPreviewTap::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPreviewTap::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CSC1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::CSC1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUT1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::LUT1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CSC2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::CSC2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::LUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("3DLUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::_3DLUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUT3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::LUT3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CSC3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::CSC3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUT4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::LUT4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERLAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPreviewTap::OVERLAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPreviewTap::fromJsonValue(QJsonValue json) {
fromJson(json.toString());

    applyMinMaxConstraints();
}

QString OAIPreviewTap::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPreviewTap::CSC1:
            val = "CSC1";
            break;
        case eOAIPreviewTap::LUT1:
            val = "LUT1";
            break;
        case eOAIPreviewTap::CSC2:
            val = "CSC2";
            break;
        case eOAIPreviewTap::LUT2:
            val = "LUT2";
            break;
        case eOAIPreviewTap::_3DLUT:
            val = "3DLUT";
            break;
        case eOAIPreviewTap::LUT3:
            val = "LUT3";
            break;
        case eOAIPreviewTap::CSC3:
            val = "CSC3";
            break;
        case eOAIPreviewTap::LUT4:
            val = "LUT4";
            break;
        case eOAIPreviewTap::OVERLAY:
            val = "OVERLAY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPreviewTap::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPreviewTap::eOAIPreviewTap OAIPreviewTap::getValue() const {
    return m_value;
}

void OAIPreviewTap::setValue(const OAIPreviewTap::eOAIPreviewTap& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPreviewTap::isSet() const {
    
    return m_value_isSet;
}

bool OAIPreviewTap::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

bool OAIPreviewTap::applyMinMaxConstraints() {
	bool valueChanged = false;
	return valueChanged;
}

} // namespace OpenAPI
