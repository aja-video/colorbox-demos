/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAINbcConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINbcConfig::OAINbcConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINbcConfig::OAINbcConfig() {
    this->initializeModel();
}

OAINbcConfig::~OAINbcConfig() {}

void OAINbcConfig::initializeModel() {

    m_lut1d_1_isSet = false;
    m_lut1d_1_isValid = false;

    m_m3x3_2_isSet = false;
    m_m3x3_2_isValid = false;

    m_lut3d_1_isSet = false;
    m_lut3d_1_isValid = false;
}

void OAINbcConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINbcConfig::fromJsonObject(QJsonObject json) {

    m_lut1d_1_isValid = ::OpenAPI::fromJsonValue(lut1d_1, json[QString("lut1d_1")]);
    m_lut1d_1_isSet = !json[QString("lut1d_1")].isNull() && m_lut1d_1_isValid;

    m_m3x3_2_isValid = ::OpenAPI::fromJsonValue(m3x3_2, json[QString("m3x3_2")]);
    m_m3x3_2_isSet = !json[QString("m3x3_2")].isNull() && m_m3x3_2_isValid;

    m_lut3d_1_isValid = ::OpenAPI::fromJsonValue(lut3d_1, json[QString("lut3d_1")]);
    m_lut3d_1_isSet = !json[QString("lut3d_1")].isNull() && m_lut3d_1_isValid;

    applyMinMaxConstraints();
}

QString OAINbcConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINbcConfig::asJsonObject() const {
    QJsonObject obj;
    if (lut1d_1.isSet()) {
        obj.insert(QString("lut1d_1"), ::OpenAPI::toJsonValue(lut1d_1));
    }
    if (m3x3_2.isSet()) {
        obj.insert(QString("m3x3_2"), ::OpenAPI::toJsonValue(m3x3_2));
    }
    if (lut3d_1.isSet()) {
        obj.insert(QString("lut3d_1"), ::OpenAPI::toJsonValue(lut3d_1));
    }
    return obj;
}

OAIStage OAINbcConfig::getLut1d1() const {
    return lut1d_1;
}
void OAINbcConfig::setLut1d1(const OAIStage &lut1d_1) {
	OAIStage v = lut1d_1;
	this->lut1d_1 = v;
    this->m_lut1d_1_isSet = true;
}

bool OAINbcConfig::is_lut1d_1_Set() const{
    return m_lut1d_1_isSet;
}

bool OAINbcConfig::is_lut1d_1_Valid() const{
    return m_lut1d_1_isValid;
}


OAIStage OAINbcConfig::getM3x32() const {
    return m3x3_2;
}
void OAINbcConfig::setM3x32(const OAIStage &m3x3_2) {
	OAIStage v = m3x3_2;
	this->m3x3_2 = v;
    this->m_m3x3_2_isSet = true;
}

bool OAINbcConfig::is_m3x3_2_Set() const{
    return m_m3x3_2_isSet;
}

bool OAINbcConfig::is_m3x3_2_Valid() const{
    return m_m3x3_2_isValid;
}


OAIStage OAINbcConfig::getLut3d1() const {
    return lut3d_1;
}
void OAINbcConfig::setLut3d1(const OAIStage &lut3d_1) {
	OAIStage v = lut3d_1;
	this->lut3d_1 = v;
    this->m_lut3d_1_isSet = true;
}

bool OAINbcConfig::is_lut3d_1_Set() const{
    return m_lut3d_1_isSet;
}

bool OAINbcConfig::is_lut3d_1_Valid() const{
    return m_lut3d_1_isValid;
}


bool OAINbcConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (lut1d_1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m3x3_2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (lut3d_1.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINbcConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAINbcConfig::applyMinMaxConstraints() {
	bool valueChanged = false;
	return valueChanged;
}

} // namespace OpenAPI
