/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIColorfrontConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorfrontConfig::OAIColorfrontConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorfrontConfig::OAIColorfrontConfig() {
    this->initializeModel();
}

OAIColorfrontConfig::~OAIColorfrontConfig() {}

void OAIColorfrontConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_in_colorspace_isSet = false;
    m_in_colorspace_isValid = false;

    m_out_colorspace_isSet = false;
    m_out_colorspace_isValid = false;
}

void OAIColorfrontConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorfrontConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_in_colorspace_isValid = ::OpenAPI::fromJsonValue(in_colorspace, json[QString("inColorspace")]);
    m_in_colorspace_isSet = !json[QString("inColorspace")].isNull() && m_in_colorspace_isValid;

    m_out_colorspace_isValid = ::OpenAPI::fromJsonValue(out_colorspace, json[QString("outColorspace")]);
    m_out_colorspace_isSet = !json[QString("outColorspace")].isNull() && m_out_colorspace_isValid;

    applyMinMaxConstraints();
}

QString OAIColorfrontConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorfrontConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
    if (in_colorspace.isSet()) {
        obj.insert(QString("inColorspace"), ::OpenAPI::toJsonValue(in_colorspace));
    }
    if (out_colorspace.isSet()) {
        obj.insert(QString("outColorspace"), ::OpenAPI::toJsonValue(out_colorspace));
    }
    return obj;
}

bool OAIColorfrontConfig::isEnabled() const {
    return enabled;
}
void OAIColorfrontConfig::setEnabled(const bool &enabled) {
	bool v = enabled;
	this->enabled = v;
    this->m_enabled_isSet = true;
}

bool OAIColorfrontConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIColorfrontConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}


OAIColorfrontColorspace OAIColorfrontConfig::getInColorspace() const {
    return in_colorspace;
}
void OAIColorfrontConfig::setInColorspace(const OAIColorfrontColorspace &in_colorspace) {
	OAIColorfrontColorspace v = in_colorspace;
	this->in_colorspace = v;
    this->m_in_colorspace_isSet = true;
}

bool OAIColorfrontConfig::is_in_colorspace_Set() const{
    return m_in_colorspace_isSet;
}

bool OAIColorfrontConfig::is_in_colorspace_Valid() const{
    return m_in_colorspace_isValid;
}


OAIColorfrontColorspace OAIColorfrontConfig::getOutColorspace() const {
    return out_colorspace;
}
void OAIColorfrontConfig::setOutColorspace(const OAIColorfrontColorspace &out_colorspace) {
	OAIColorfrontColorspace v = out_colorspace;
	this->out_colorspace = v;
    this->m_out_colorspace_isSet = true;
}

bool OAIColorfrontConfig::is_out_colorspace_Set() const{
    return m_out_colorspace_isSet;
}

bool OAIColorfrontConfig::is_out_colorspace_Valid() const{
    return m_out_colorspace_isValid;
}


bool OAIColorfrontConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (in_colorspace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (out_colorspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorfrontConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIColorfrontConfig::applyMinMaxConstraints() {
	bool valueChanged = false;
	return valueChanged;
}

} // namespace OpenAPI
