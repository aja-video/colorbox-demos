/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIOverlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverlay::OAIOverlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverlay::OAIOverlay() {
    this->initializeModel();
}

OAIOverlay::~OAIOverlay() {}

void OAIOverlay::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_vpid_format_isSet = false;
    m_vpid_format_isValid = false;

    m_vpid_range_isSet = false;
    m_vpid_range_isValid = false;

    m_vpid_hdr_isSet = false;
    m_vpid_hdr_isValid = false;

    m_vpid_bit_depth_isSet = false;
    m_vpid_bit_depth_isValid = false;

    m_time_code_isSet = false;
    m_time_code_isValid = false;

    m_closed_caption_isSet = false;
    m_closed_caption_isValid = false;

    m_user_text_enabled_isSet = false;
    m_user_text_enabled_isValid = false;

    m_user_text_line1_isSet = false;
    m_user_text_line1_isValid = false;

    m_user_text_line2_isSet = false;
    m_user_text_line2_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIOverlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverlay::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_vpid_format_isValid = ::OpenAPI::fromJsonValue(vpid_format, json[QString("vpidFormat")]);
    m_vpid_format_isSet = !json[QString("vpidFormat")].isNull() && m_vpid_format_isValid;

    m_vpid_range_isValid = ::OpenAPI::fromJsonValue(vpid_range, json[QString("vpidRange")]);
    m_vpid_range_isSet = !json[QString("vpidRange")].isNull() && m_vpid_range_isValid;

    m_vpid_hdr_isValid = ::OpenAPI::fromJsonValue(vpid_hdr, json[QString("vpidHdr")]);
    m_vpid_hdr_isSet = !json[QString("vpidHdr")].isNull() && m_vpid_hdr_isValid;

    m_vpid_bit_depth_isValid = ::OpenAPI::fromJsonValue(vpid_bit_depth, json[QString("vpidBitDepth")]);
    m_vpid_bit_depth_isSet = !json[QString("vpidBitDepth")].isNull() && m_vpid_bit_depth_isValid;

    m_time_code_isValid = ::OpenAPI::fromJsonValue(time_code, json[QString("timeCode")]);
    m_time_code_isSet = !json[QString("timeCode")].isNull() && m_time_code_isValid;

    m_closed_caption_isValid = ::OpenAPI::fromJsonValue(closed_caption, json[QString("closedCaption")]);
    m_closed_caption_isSet = !json[QString("closedCaption")].isNull() && m_closed_caption_isValid;

    m_user_text_enabled_isValid = ::OpenAPI::fromJsonValue(user_text_enabled, json[QString("userTextEnabled")]);
    m_user_text_enabled_isSet = !json[QString("userTextEnabled")].isNull() && m_user_text_enabled_isValid;

    m_user_text_line1_isValid = ::OpenAPI::fromJsonValue(user_text_line1, json[QString("userTextLine1")]);
    m_user_text_line1_isSet = !json[QString("userTextLine1")].isNull() && m_user_text_line1_isValid;

    m_user_text_line2_isValid = ::OpenAPI::fromJsonValue(user_text_line2, json[QString("userTextLine2")]);
    m_user_text_line2_isSet = !json[QString("userTextLine2")].isNull() && m_user_text_line2_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    applyMinMaxConstraints();
}

QString OAIOverlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverlay::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
    if (m_vpid_format_isSet) {
        obj.insert(QString("vpidFormat"), ::OpenAPI::toJsonValue(vpid_format));
    }
    if (m_vpid_range_isSet) {
        obj.insert(QString("vpidRange"), ::OpenAPI::toJsonValue(vpid_range));
    }
    if (m_vpid_hdr_isSet) {
        obj.insert(QString("vpidHdr"), ::OpenAPI::toJsonValue(vpid_hdr));
    }
    if (m_vpid_bit_depth_isSet) {
        obj.insert(QString("vpidBitDepth"), ::OpenAPI::toJsonValue(vpid_bit_depth));
    }
    if (m_time_code_isSet) {
        obj.insert(QString("timeCode"), ::OpenAPI::toJsonValue(time_code));
    }
    if (m_closed_caption_isSet) {
        obj.insert(QString("closedCaption"), ::OpenAPI::toJsonValue(closed_caption));
    }
    if (m_user_text_enabled_isSet) {
        obj.insert(QString("userTextEnabled"), ::OpenAPI::toJsonValue(user_text_enabled));
    }
    if (m_user_text_line1_isSet) {
        obj.insert(QString("userTextLine1"), ::OpenAPI::toJsonValue(user_text_line1));
    }
    if (m_user_text_line2_isSet) {
        obj.insert(QString("userTextLine2"), ::OpenAPI::toJsonValue(user_text_line2));
    }
    if (location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(location));
    }
    return obj;
}

bool OAIOverlay::isEnabled() const {
    return enabled;
}
void OAIOverlay::setEnabled(const bool &enabled) {
	bool v = enabled;
	this->enabled = v;
    this->m_enabled_isSet = true;
}

bool OAIOverlay::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIOverlay::is_enabled_Valid() const{
    return m_enabled_isValid;
}


bool OAIOverlay::isVpidFormat() const {
    return vpid_format;
}
void OAIOverlay::setVpidFormat(const bool &vpid_format) {
	bool v = vpid_format;
	this->vpid_format = v;
    this->m_vpid_format_isSet = true;
}

bool OAIOverlay::is_vpid_format_Set() const{
    return m_vpid_format_isSet;
}

bool OAIOverlay::is_vpid_format_Valid() const{
    return m_vpid_format_isValid;
}


bool OAIOverlay::isVpidRange() const {
    return vpid_range;
}
void OAIOverlay::setVpidRange(const bool &vpid_range) {
	bool v = vpid_range;
	this->vpid_range = v;
    this->m_vpid_range_isSet = true;
}

bool OAIOverlay::is_vpid_range_Set() const{
    return m_vpid_range_isSet;
}

bool OAIOverlay::is_vpid_range_Valid() const{
    return m_vpid_range_isValid;
}


bool OAIOverlay::isVpidHdr() const {
    return vpid_hdr;
}
void OAIOverlay::setVpidHdr(const bool &vpid_hdr) {
	bool v = vpid_hdr;
	this->vpid_hdr = v;
    this->m_vpid_hdr_isSet = true;
}

bool OAIOverlay::is_vpid_hdr_Set() const{
    return m_vpid_hdr_isSet;
}

bool OAIOverlay::is_vpid_hdr_Valid() const{
    return m_vpid_hdr_isValid;
}


bool OAIOverlay::isVpidBitDepth() const {
    return vpid_bit_depth;
}
void OAIOverlay::setVpidBitDepth(const bool &vpid_bit_depth) {
	bool v = vpid_bit_depth;
	this->vpid_bit_depth = v;
    this->m_vpid_bit_depth_isSet = true;
}

bool OAIOverlay::is_vpid_bit_depth_Set() const{
    return m_vpid_bit_depth_isSet;
}

bool OAIOverlay::is_vpid_bit_depth_Valid() const{
    return m_vpid_bit_depth_isValid;
}


bool OAIOverlay::isTimeCode() const {
    return time_code;
}
void OAIOverlay::setTimeCode(const bool &time_code) {
	bool v = time_code;
	this->time_code = v;
    this->m_time_code_isSet = true;
}

bool OAIOverlay::is_time_code_Set() const{
    return m_time_code_isSet;
}

bool OAIOverlay::is_time_code_Valid() const{
    return m_time_code_isValid;
}


bool OAIOverlay::isClosedCaption() const {
    return closed_caption;
}
void OAIOverlay::setClosedCaption(const bool &closed_caption) {
	bool v = closed_caption;
	this->closed_caption = v;
    this->m_closed_caption_isSet = true;
}

bool OAIOverlay::is_closed_caption_Set() const{
    return m_closed_caption_isSet;
}

bool OAIOverlay::is_closed_caption_Valid() const{
    return m_closed_caption_isValid;
}


bool OAIOverlay::isUserTextEnabled() const {
    return user_text_enabled;
}
void OAIOverlay::setUserTextEnabled(const bool &user_text_enabled) {
	bool v = user_text_enabled;
	this->user_text_enabled = v;
    this->m_user_text_enabled_isSet = true;
}

bool OAIOverlay::is_user_text_enabled_Set() const{
    return m_user_text_enabled_isSet;
}

bool OAIOverlay::is_user_text_enabled_Valid() const{
    return m_user_text_enabled_isValid;
}


QString OAIOverlay::getUserTextLine1() const {
    return user_text_line1;
}
void OAIOverlay::setUserTextLine1(const QString &user_text_line1) {
	QString v = user_text_line1;
	int min = userTextLine1Min();
	int max = userTextLine1Max();
	if (v.length() < min) { v.resize(min); }
	if (v.length() > max) { v.resize(max); }
	this->user_text_line1 = v;
    this->m_user_text_line1_isSet = true;
}

bool OAIOverlay::is_user_text_line1_Set() const{
    return m_user_text_line1_isSet;
}

bool OAIOverlay::is_user_text_line1_Valid() const{
    return m_user_text_line1_isValid;
}

int OAIOverlay::userTextLine1Min() const {
	return 0;
}

int OAIOverlay::userTextLine1Max() const {
	return 110;
}

QString OAIOverlay::getUserTextLine2() const {
    return user_text_line2;
}
void OAIOverlay::setUserTextLine2(const QString &user_text_line2) {
	QString v = user_text_line2;
	int min = userTextLine2Min();
	int max = userTextLine2Max();
	if (v.length() < min) { v.resize(min); }
	if (v.length() > max) { v.resize(max); }
	this->user_text_line2 = v;
    this->m_user_text_line2_isSet = true;
}

bool OAIOverlay::is_user_text_line2_Set() const{
    return m_user_text_line2_isSet;
}

bool OAIOverlay::is_user_text_line2_Valid() const{
    return m_user_text_line2_isValid;
}

int OAIOverlay::userTextLine2Min() const {
	return 0;
}

int OAIOverlay::userTextLine2Max() const {
	return 110;
}

OAILocations OAIOverlay::getLocation() const {
    return location;
}
void OAIOverlay::setLocation(const OAILocations &location) {
	OAILocations v = location;
	this->location = v;
    this->m_location_isSet = true;
}

bool OAIOverlay::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOverlay::is_location_Valid() const{
    return m_location_isValid;
}


bool OAIOverlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpid_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpid_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpid_hdr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpid_bit_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_text_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_text_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_text_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIOverlay::applyMinMaxConstraints() {
	bool valueChanged = false;
	if (is_user_text_line1_Set())
	{
		bool userTextLine1Changed = false;
		QString v = getUserTextLine1();
		int min = userTextLine1Min();
		int max = userTextLine1Max();
		if (v.length() < min) { v.resize(min); userTextLine1Changed = true; }
		if (v.length() > max) { v.resize(max); userTextLine1Changed = true; }
		if (userTextLine1Changed) { setUserTextLine1(v); valueChanged = true; }
	}
	if (is_user_text_line2_Set())
	{
		bool userTextLine2Changed = false;
		QString v = getUserTextLine2();
		int min = userTextLine2Min();
		int max = userTextLine2Max();
		if (v.length() < min) { v.resize(min); userTextLine2Changed = true; }
		if (v.length() > max) { v.resize(max); userTextLine2Changed = true; }
		if (userTextLine2Changed) { setUserTextLine2(v); valueChanged = true; }
	}
	return valueChanged;
}

} // namespace OpenAPI
