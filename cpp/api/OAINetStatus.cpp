/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAINetStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetStatus::OAINetStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetStatus::OAINetStatus() {
    this->initializeModel();
}

OAINetStatus::~OAINetStatus() {}

void OAINetStatus::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_connected_isSet = false;
    m_connected_isValid = false;

    m_dhcp_state_isSet = false;
    m_dhcp_state_isValid = false;

    m_interface_setup_state_isSet = false;
    m_interface_setup_state_isValid = false;

    m_ip_address_offered_isSet = false;
    m_ip_address_offered_isValid = false;

    m_link_errors_isSet = false;
    m_link_errors_isValid = false;

    m_link_state_isSet = false;
    m_link_state_isValid = false;

    m_lldp_chassis_id_isSet = false;
    m_lldp_chassis_id_isValid = false;

    m_lldp_port_id_isSet = false;
    m_lldp_port_id_isValid = false;

    m_lldp_name_isSet = false;
    m_lldp_name_isValid = false;
}

void OAINetStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetStatus::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_connected_isValid = ::OpenAPI::fromJsonValue(connected, json[QString("connected")]);
    m_connected_isSet = !json[QString("connected")].isNull() && m_connected_isValid;

    m_dhcp_state_isValid = ::OpenAPI::fromJsonValue(dhcp_state, json[QString("dhcpState")]);
    m_dhcp_state_isSet = !json[QString("dhcpState")].isNull() && m_dhcp_state_isValid;

    m_interface_setup_state_isValid = ::OpenAPI::fromJsonValue(interface_setup_state, json[QString("interfaceSetupState")]);
    m_interface_setup_state_isSet = !json[QString("interfaceSetupState")].isNull() && m_interface_setup_state_isValid;

    m_ip_address_offered_isValid = ::OpenAPI::fromJsonValue(ip_address_offered, json[QString("ipAddressOffered")]);
    m_ip_address_offered_isSet = !json[QString("ipAddressOffered")].isNull() && m_ip_address_offered_isValid;

    m_link_errors_isValid = ::OpenAPI::fromJsonValue(link_errors, json[QString("linkErrors")]);
    m_link_errors_isSet = !json[QString("linkErrors")].isNull() && m_link_errors_isValid;

    m_link_state_isValid = ::OpenAPI::fromJsonValue(link_state, json[QString("linkState")]);
    m_link_state_isSet = !json[QString("linkState")].isNull() && m_link_state_isValid;

    m_lldp_chassis_id_isValid = ::OpenAPI::fromJsonValue(lldp_chassis_id, json[QString("lldpChassisId")]);
    m_lldp_chassis_id_isSet = !json[QString("lldpChassisId")].isNull() && m_lldp_chassis_id_isValid;

    m_lldp_port_id_isValid = ::OpenAPI::fromJsonValue(lldp_port_id, json[QString("lldpPortId")]);
    m_lldp_port_id_isSet = !json[QString("lldpPortId")].isNull() && m_lldp_port_id_isValid;

    m_lldp_name_isValid = ::OpenAPI::fromJsonValue(lldp_name, json[QString("lldpName")]);
    m_lldp_name_isSet = !json[QString("lldpName")].isNull() && m_lldp_name_isValid;

    applyMinMaxConstraints();
}

QString OAINetStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(mac));
    }
    if (m_connected_isSet) {
        obj.insert(QString("connected"), ::OpenAPI::toJsonValue(connected));
    }
    if (dhcp_state.isSet()) {
        obj.insert(QString("dhcpState"), ::OpenAPI::toJsonValue(dhcp_state));
    }
    if (interface_setup_state.isSet()) {
        obj.insert(QString("interfaceSetupState"), ::OpenAPI::toJsonValue(interface_setup_state));
    }
    if (m_ip_address_offered_isSet) {
        obj.insert(QString("ipAddressOffered"), ::OpenAPI::toJsonValue(ip_address_offered));
    }
    if (m_link_errors_isSet) {
        obj.insert(QString("linkErrors"), ::OpenAPI::toJsonValue(link_errors));
    }
    if (m_link_state_isSet) {
        obj.insert(QString("linkState"), ::OpenAPI::toJsonValue(link_state));
    }
    if (m_lldp_chassis_id_isSet) {
        obj.insert(QString("lldpChassisId"), ::OpenAPI::toJsonValue(lldp_chassis_id));
    }
    if (m_lldp_port_id_isSet) {
        obj.insert(QString("lldpPortId"), ::OpenAPI::toJsonValue(lldp_port_id));
    }
    if (m_lldp_name_isSet) {
        obj.insert(QString("lldpName"), ::OpenAPI::toJsonValue(lldp_name));
    }
    return obj;
}

QString OAINetStatus::getName() const {
    return name;
}
void OAINetStatus::setName(const QString &name) {
	QString v = name;
	this->name = v;
    this->m_name_isSet = true;
}

bool OAINetStatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetStatus::is_name_Valid() const{
    return m_name_isValid;
}



QString OAINetStatus::getMac() const {
    return mac;
}
void OAINetStatus::setMac(const QString &mac) {
	QString v = mac;
	this->mac = v;
    this->m_mac_isSet = true;
}

bool OAINetStatus::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAINetStatus::is_mac_Valid() const{
    return m_mac_isValid;
}



bool OAINetStatus::isConnected() const {
    return connected;
}
void OAINetStatus::setConnected(const bool &connected) {
	bool v = connected;
	this->connected = v;
    this->m_connected_isSet = true;
}

bool OAINetStatus::is_connected_Set() const{
    return m_connected_isSet;
}

bool OAINetStatus::is_connected_Valid() const{
    return m_connected_isValid;
}


OAIDHCPState OAINetStatus::getDhcpState() const {
    return dhcp_state;
}
void OAINetStatus::setDhcpState(const OAIDHCPState &dhcp_state) {
	OAIDHCPState v = dhcp_state;
	this->dhcp_state = v;
    this->m_dhcp_state_isSet = true;
}

bool OAINetStatus::is_dhcp_state_Set() const{
    return m_dhcp_state_isSet;
}

bool OAINetStatus::is_dhcp_state_Valid() const{
    return m_dhcp_state_isValid;
}


OAIInterfaceSetupState OAINetStatus::getInterfaceSetupState() const {
    return interface_setup_state;
}
void OAINetStatus::setInterfaceSetupState(const OAIInterfaceSetupState &interface_setup_state) {
	OAIInterfaceSetupState v = interface_setup_state;
	this->interface_setup_state = v;
    this->m_interface_setup_state_isSet = true;
}

bool OAINetStatus::is_interface_setup_state_Set() const{
    return m_interface_setup_state_isSet;
}

bool OAINetStatus::is_interface_setup_state_Valid() const{
    return m_interface_setup_state_isValid;
}


QString OAINetStatus::getIpAddressOffered() const {
    return ip_address_offered;
}
void OAINetStatus::setIpAddressOffered(const QString &ip_address_offered) {
	QString v = ip_address_offered;
	this->ip_address_offered = v;
    this->m_ip_address_offered_isSet = true;
}

bool OAINetStatus::is_ip_address_offered_Set() const{
    return m_ip_address_offered_isSet;
}

bool OAINetStatus::is_ip_address_offered_Valid() const{
    return m_ip_address_offered_isValid;
}



qint32 OAINetStatus::getLinkErrors() const {
    return link_errors;
}
void OAINetStatus::setLinkErrors(const qint32 &link_errors) {
	qint32 v = link_errors;
	this->link_errors = v;
    this->m_link_errors_isSet = true;
}

bool OAINetStatus::is_link_errors_Set() const{
    return m_link_errors_isSet;
}

bool OAINetStatus::is_link_errors_Valid() const{
    return m_link_errors_isValid;
}



QString OAINetStatus::getLinkState() const {
    return link_state;
}
void OAINetStatus::setLinkState(const QString &link_state) {
	QString v = link_state;
	this->link_state = v;
    this->m_link_state_isSet = true;
}

bool OAINetStatus::is_link_state_Set() const{
    return m_link_state_isSet;
}

bool OAINetStatus::is_link_state_Valid() const{
    return m_link_state_isValid;
}



QString OAINetStatus::getLldpChassisId() const {
    return lldp_chassis_id;
}
void OAINetStatus::setLldpChassisId(const QString &lldp_chassis_id) {
	QString v = lldp_chassis_id;
	this->lldp_chassis_id = v;
    this->m_lldp_chassis_id_isSet = true;
}

bool OAINetStatus::is_lldp_chassis_id_Set() const{
    return m_lldp_chassis_id_isSet;
}

bool OAINetStatus::is_lldp_chassis_id_Valid() const{
    return m_lldp_chassis_id_isValid;
}



QString OAINetStatus::getLldpPortId() const {
    return lldp_port_id;
}
void OAINetStatus::setLldpPortId(const QString &lldp_port_id) {
	QString v = lldp_port_id;
	this->lldp_port_id = v;
    this->m_lldp_port_id_isSet = true;
}

bool OAINetStatus::is_lldp_port_id_Set() const{
    return m_lldp_port_id_isSet;
}

bool OAINetStatus::is_lldp_port_id_Valid() const{
    return m_lldp_port_id_isValid;
}



QString OAINetStatus::getLldpName() const {
    return lldp_name;
}
void OAINetStatus::setLldpName(const QString &lldp_name) {
	QString v = lldp_name;
	this->lldp_name = v;
    this->m_lldp_name_isSet = true;
}

bool OAINetStatus::is_lldp_name_Set() const{
    return m_lldp_name_isSet;
}

bool OAINetStatus::is_lldp_name_Valid() const{
    return m_lldp_name_isValid;
}



bool OAINetStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (dhcp_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (interface_setup_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lldp_chassis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lldp_port_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lldp_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAINetStatus::applyMinMaxConstraints() {
	bool valueChanged = false;
	if (is_name_Set())
	{
		bool nameChanged = false;
		QString v = getName();
		if (nameChanged) { setName(v); valueChanged = true; }
	}
	if (is_mac_Set())
	{
		bool macChanged = false;
		QString v = getMac();
		if (macChanged) { setMac(v); valueChanged = true; }
	}
	if (is_ip_address_offered_Set())
	{
		bool ipAddressOfferedChanged = false;
		QString v = getIpAddressOffered();
		if (ipAddressOfferedChanged) { setIpAddressOffered(v); valueChanged = true; }
	}
	if (is_link_errors_Set())
	{
		bool linkErrorsChanged = false;
		qint32 v = getLinkErrors();
		if (linkErrorsChanged) { setLinkErrors(v); valueChanged = true; }
	}
	if (is_link_state_Set())
	{
		bool linkStateChanged = false;
		QString v = getLinkState();
		if (linkStateChanged) { setLinkState(v); valueChanged = true; }
	}
	if (is_lldp_chassis_id_Set())
	{
		bool lldpChassisIdChanged = false;
		QString v = getLldpChassisId();
		if (lldpChassisIdChanged) { setLldpChassisId(v); valueChanged = true; }
	}
	if (is_lldp_port_id_Set())
	{
		bool lldpPortIdChanged = false;
		QString v = getLldpPortId();
		if (lldpPortIdChanged) { setLldpPortId(v); valueChanged = true; }
	}
	if (is_lldp_name_Set())
	{
		bool lldpNameChanged = false;
		QString v = getLldpName();
		if (lldpNameChanged) { setLldpName(v); valueChanged = true; }
	}
	return valueChanged;
}

} // namespace OpenAPI
