/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAISystemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemStatus::OAISystemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemStatus::OAISystemStatus() {
    this->initializeModel();
}

OAISystemStatus::~OAISystemStatus() {}

void OAISystemStatus::initializeModel() {

    m_safeboot_version_isSet = false;
    m_safeboot_version_isValid = false;

    m_mainboot_version_isSet = false;
    m_mainboot_version_isValid = false;

    m_running_version_isSet = false;
    m_running_version_isValid = false;

    m_safeboot_isSet = false;
    m_safeboot_isValid = false;

    m_update_msg_isSet = false;
    m_update_msg_isValid = false;
}

void OAISystemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemStatus::fromJsonObject(QJsonObject json) {

    m_safeboot_version_isValid = ::OpenAPI::fromJsonValue(safeboot_version, json[QString("safebootVersion")]);
    m_safeboot_version_isSet = !json[QString("safebootVersion")].isNull() && m_safeboot_version_isValid;

    m_mainboot_version_isValid = ::OpenAPI::fromJsonValue(mainboot_version, json[QString("mainbootVersion")]);
    m_mainboot_version_isSet = !json[QString("mainbootVersion")].isNull() && m_mainboot_version_isValid;

    m_running_version_isValid = ::OpenAPI::fromJsonValue(running_version, json[QString("runningVersion")]);
    m_running_version_isSet = !json[QString("runningVersion")].isNull() && m_running_version_isValid;

    m_safeboot_isValid = ::OpenAPI::fromJsonValue(safeboot, json[QString("safeboot")]);
    m_safeboot_isSet = !json[QString("safeboot")].isNull() && m_safeboot_isValid;

    m_update_msg_isValid = ::OpenAPI::fromJsonValue(update_msg, json[QString("updateMsg")]);
    m_update_msg_isSet = !json[QString("updateMsg")].isNull() && m_update_msg_isValid;

    applyMinMaxConstraints();
}

QString OAISystemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_safeboot_version_isSet) {
        obj.insert(QString("safebootVersion"), ::OpenAPI::toJsonValue(safeboot_version));
    }
    if (m_mainboot_version_isSet) {
        obj.insert(QString("mainbootVersion"), ::OpenAPI::toJsonValue(mainboot_version));
    }
    if (m_running_version_isSet) {
        obj.insert(QString("runningVersion"), ::OpenAPI::toJsonValue(running_version));
    }
    if (m_safeboot_isSet) {
        obj.insert(QString("safeboot"), ::OpenAPI::toJsonValue(safeboot));
    }
    if (update_msg.size() > 0) {
        obj.insert(QString("updateMsg"), ::OpenAPI::toJsonValue(update_msg));
    }
    return obj;
}

QString OAISystemStatus::getSafebootVersion() const {
    return safeboot_version;
}
void OAISystemStatus::setSafebootVersion(const QString &safeboot_version) {
	QString v = safeboot_version;
	this->safeboot_version = v;
    this->m_safeboot_version_isSet = true;
}

bool OAISystemStatus::is_safeboot_version_Set() const{
    return m_safeboot_version_isSet;
}

bool OAISystemStatus::is_safeboot_version_Valid() const{
    return m_safeboot_version_isValid;
}



QString OAISystemStatus::getMainbootVersion() const {
    return mainboot_version;
}
void OAISystemStatus::setMainbootVersion(const QString &mainboot_version) {
	QString v = mainboot_version;
	this->mainboot_version = v;
    this->m_mainboot_version_isSet = true;
}

bool OAISystemStatus::is_mainboot_version_Set() const{
    return m_mainboot_version_isSet;
}

bool OAISystemStatus::is_mainboot_version_Valid() const{
    return m_mainboot_version_isValid;
}



QString OAISystemStatus::getRunningVersion() const {
    return running_version;
}
void OAISystemStatus::setRunningVersion(const QString &running_version) {
	QString v = running_version;
	this->running_version = v;
    this->m_running_version_isSet = true;
}

bool OAISystemStatus::is_running_version_Set() const{
    return m_running_version_isSet;
}

bool OAISystemStatus::is_running_version_Valid() const{
    return m_running_version_isValid;
}



bool OAISystemStatus::isSafeboot() const {
    return safeboot;
}
void OAISystemStatus::setSafeboot(const bool &safeboot) {
	bool v = safeboot;
	this->safeboot = v;
    this->m_safeboot_isSet = true;
}

bool OAISystemStatus::is_safeboot_Set() const{
    return m_safeboot_isSet;
}

bool OAISystemStatus::is_safeboot_Valid() const{
    return m_safeboot_isValid;
}


QList<QString> OAISystemStatus::getUpdateMsg() const {
    return update_msg;
}
void OAISystemStatus::setUpdateMsg(const QList<QString> &update_msg) {
	QList<QString> v = update_msg;
	this->update_msg = v;
    this->m_update_msg_isSet = true;
}

bool OAISystemStatus::is_update_msg_Set() const{
    return m_update_msg_isSet;
}

bool OAISystemStatus::is_update_msg_Valid() const{
    return m_update_msg_isValid;
}


bool OAISystemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_safeboot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mainboot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeboot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (update_msg.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAISystemStatus::applyMinMaxConstraints() {
	bool valueChanged = false;
	if (is_safeboot_version_Set())
	{
		bool safebootVersionChanged = false;
		QString v = getSafebootVersion();
		if (safebootVersionChanged) { setSafebootVersion(v); valueChanged = true; }
	}
	if (is_mainboot_version_Set())
	{
		bool mainbootVersionChanged = false;
		QString v = getMainbootVersion();
		if (mainbootVersionChanged) { setMainbootVersion(v); valueChanged = true; }
	}
	if (is_running_version_Set())
	{
		bool runningVersionChanged = false;
		QString v = getRunningVersion();
		if (runningVersionChanged) { setRunningVersion(v); valueChanged = true; }
	}
	return valueChanged;
}

} // namespace OpenAPI
