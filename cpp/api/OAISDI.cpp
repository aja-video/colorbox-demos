/**
 * OpenAPI Soji
 * This is a REST API for the AJA Soji product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAISDI.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISDI::OAISDI(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDI::OAISDI() {
    this->initializeModel();
}

OAISDI::~OAISDI() {}

void OAISDI::initializeModel() {

    m_color_space_isSet = false;
    m_color_space_isValid = false;

    m_rgb_range_isSet = false;
    m_rgb_range_isValid = false;

    m_bit_depth_isSet = false;
    m_bit_depth_isValid = false;

    m_scan_mode_isSet = false;
    m_scan_mode_isValid = false;

    m_sdi_mode3g_isSet = false;
    m_sdi_mode3g_isValid = false;

    m_colorimetry_isSet = false;
    m_colorimetry_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAISDI::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDI::fromJsonObject(QJsonObject json) {

    m_color_space_isValid = ::OpenAPI::fromJsonValue(color_space, json[QString("colorSpace")]);
    m_color_space_isSet = !json[QString("colorSpace")].isNull() && m_color_space_isValid;

    m_rgb_range_isValid = ::OpenAPI::fromJsonValue(rgb_range, json[QString("rgbRange")]);
    m_rgb_range_isSet = !json[QString("rgbRange")].isNull() && m_rgb_range_isValid;

    m_bit_depth_isValid = ::OpenAPI::fromJsonValue(bit_depth, json[QString("bitDepth")]);
    m_bit_depth_isSet = !json[QString("bitDepth")].isNull() && m_bit_depth_isValid;

    m_scan_mode_isValid = ::OpenAPI::fromJsonValue(scan_mode, json[QString("scanMode")]);
    m_scan_mode_isSet = !json[QString("scanMode")].isNull() && m_scan_mode_isValid;

    m_sdi_mode3g_isValid = ::OpenAPI::fromJsonValue(sdi_mode3g, json[QString("sdiMode3g")]);
    m_sdi_mode3g_isSet = !json[QString("sdiMode3g")].isNull() && m_sdi_mode3g_isValid;

    m_colorimetry_isValid = ::OpenAPI::fromJsonValue(colorimetry, json[QString("colorimetry")]);
    m_colorimetry_isSet = !json[QString("colorimetry")].isNull() && m_colorimetry_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    applyMinMaxConstraints();
}

QString OAISDI::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDI::asJsonObject() const {
    QJsonObject obj;
    if (color_space.isSet()) {
        obj.insert(QString("colorSpace"), ::OpenAPI::toJsonValue(color_space));
    }
    if (rgb_range.isSet()) {
        obj.insert(QString("rgbRange"), ::OpenAPI::toJsonValue(rgb_range));
    }
    if (bit_depth.isSet()) {
        obj.insert(QString("bitDepth"), ::OpenAPI::toJsonValue(bit_depth));
    }
    if (scan_mode.isSet()) {
        obj.insert(QString("scanMode"), ::OpenAPI::toJsonValue(scan_mode));
    }
    if (sdi_mode3g.isSet()) {
        obj.insert(QString("sdiMode3g"), ::OpenAPI::toJsonValue(sdi_mode3g));
    }
    if (colorimetry.isSet()) {
        obj.insert(QString("colorimetry"), ::OpenAPI::toJsonValue(colorimetry));
    }
    if (transfer.isSet()) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(transfer));
    }
    if (format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(format));
    }
    return obj;
}

OAIColorSpace OAISDI::getColorSpace() const {
    return color_space;
}
void OAISDI::setColorSpace(const OAIColorSpace &color_space) {
	OAIColorSpace v = color_space;
	this->color_space = v;
    this->m_color_space_isSet = true;
}

bool OAISDI::is_color_space_Set() const{
    return m_color_space_isSet;
}

bool OAISDI::is_color_space_Valid() const{
    return m_color_space_isValid;
}


OAIRgbRange OAISDI::getRgbRange() const {
    return rgb_range;
}
void OAISDI::setRgbRange(const OAIRgbRange &rgb_range) {
	OAIRgbRange v = rgb_range;
	this->rgb_range = v;
    this->m_rgb_range_isSet = true;
}

bool OAISDI::is_rgb_range_Set() const{
    return m_rgb_range_isSet;
}

bool OAISDI::is_rgb_range_Valid() const{
    return m_rgb_range_isValid;
}


OAIBitDepth OAISDI::getBitDepth() const {
    return bit_depth;
}
void OAISDI::setBitDepth(const OAIBitDepth &bit_depth) {
	OAIBitDepth v = bit_depth;
	this->bit_depth = v;
    this->m_bit_depth_isSet = true;
}

bool OAISDI::is_bit_depth_Set() const{
    return m_bit_depth_isSet;
}

bool OAISDI::is_bit_depth_Valid() const{
    return m_bit_depth_isValid;
}


OAIScanMode OAISDI::getScanMode() const {
    return scan_mode;
}
void OAISDI::setScanMode(const OAIScanMode &scan_mode) {
	OAIScanMode v = scan_mode;
	this->scan_mode = v;
    this->m_scan_mode_isSet = true;
}

bool OAISDI::is_scan_mode_Set() const{
    return m_scan_mode_isSet;
}

bool OAISDI::is_scan_mode_Valid() const{
    return m_scan_mode_isValid;
}


OAISdiMode3g OAISDI::getSdiMode3g() const {
    return sdi_mode3g;
}
void OAISDI::setSdiMode3g(const OAISdiMode3g &sdi_mode3g) {
	OAISdiMode3g v = sdi_mode3g;
	this->sdi_mode3g = v;
    this->m_sdi_mode3g_isSet = true;
}

bool OAISDI::is_sdi_mode3g_Set() const{
    return m_sdi_mode3g_isSet;
}

bool OAISDI::is_sdi_mode3g_Valid() const{
    return m_sdi_mode3g_isValid;
}


OAIColorimetry OAISDI::getColorimetry() const {
    return colorimetry;
}
void OAISDI::setColorimetry(const OAIColorimetry &colorimetry) {
	OAIColorimetry v = colorimetry;
	this->colorimetry = v;
    this->m_colorimetry_isSet = true;
}

bool OAISDI::is_colorimetry_Set() const{
    return m_colorimetry_isSet;
}

bool OAISDI::is_colorimetry_Valid() const{
    return m_colorimetry_isValid;
}


OAITransfer OAISDI::getTransfer() const {
    return transfer;
}
void OAISDI::setTransfer(const OAITransfer &transfer) {
	OAITransfer v = transfer;
	this->transfer = v;
    this->m_transfer_isSet = true;
}

bool OAISDI::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAISDI::is_transfer_Valid() const{
    return m_transfer_isValid;
}


OAIVideoFormat OAISDI::getFormat() const {
    return format;
}
void OAISDI::setFormat(const OAIVideoFormat &format) {
	OAIVideoFormat v = format;
	this->format = v;
    this->m_format_isSet = true;
}

bool OAISDI::is_format_Set() const{
    return m_format_isSet;
}

bool OAISDI::is_format_Valid() const{
    return m_format_isValid;
}


bool OAISDI::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (color_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (rgb_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (bit_depth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (scan_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (sdi_mode3g.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (colorimetry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDI::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAISDI::applyMinMaxConstraints() {
	bool valueChanged = false;
	return valueChanged;
}

} // namespace OpenAPI
