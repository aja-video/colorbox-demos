/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIColorfrontDynRangeGamutLiveModeIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorfrontDynRangeGamutLiveModeIn::OAIColorfrontDynRangeGamutLiveModeIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorfrontDynRangeGamutLiveModeIn::OAIColorfrontDynRangeGamutLiveModeIn() {
    this->initializeModel();
}

OAIColorfrontDynRangeGamutLiveModeIn::~OAIColorfrontDynRangeGamutLiveModeIn() {}

void OAIColorfrontDynRangeGamutLiveModeIn::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColorfrontDynRangeGamutLiveModeIn::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColorfrontDynRangeGamutLiveModeIn::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SDR BT.709 100 Nits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::SDR_BT_709_100_NITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SDR Extended BT.709", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::SDR_EXTENDED_BT_709;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ BT.2020 1000 Nits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::PQ_BT_2020_1000_NITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ P3D65 1000 Nits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::PQ_P3D65_1000_NITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG BT.2100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::HLG_BT_2100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG Extended BT.709", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::HLG_EXTENDED_BT_709;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG Extended BT.2100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::HLG_EXTENDED_BT_2100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sony SLog3 S-Gamut3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_S_GAMUT3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sony SLog3 S-Gamut3 Cine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_S_GAMUT3_CINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sony SLog3 BT.2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_BT_2020;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARRI Log C Wide Gamut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::ARRI_LOG_C_WIDE_GAMUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ARRI LogC4 Wide Gamut 4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::ARRI_LOGC4_WIDE_GAMUT_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Panasonic V-Log", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::PANASONIC_V_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Red Log3G10 Wide Gamut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::RED_LOG3G10_WIDE_GAMUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canon Log 2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::CANON_LOG_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canon Log 3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutLiveModeIn::CANON_LOG_3;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColorfrontDynRangeGamutLiveModeIn::fromJsonValue(QJsonValue json) {
fromJson(json.toString());

    applyMinMaxConstraints();
}

QString OAIColorfrontDynRangeGamutLiveModeIn::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColorfrontDynRangeGamutLiveModeIn::SDR_BT_709_100_NITS:
            val = "SDR BT.709 100 Nits";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::SDR_EXTENDED_BT_709:
            val = "SDR Extended BT.709";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::PQ_BT_2020_1000_NITS:
            val = "PQ BT.2020 1000 Nits";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::PQ_P3D65_1000_NITS:
            val = "PQ P3D65 1000 Nits";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::HLG_BT_2100:
            val = "HLG BT.2100";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::HLG_EXTENDED_BT_709:
            val = "HLG Extended BT.709";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::HLG_EXTENDED_BT_2100:
            val = "HLG Extended BT.2100";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_S_GAMUT3:
            val = "Sony SLog3 S-Gamut3";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_S_GAMUT3_CINE:
            val = "Sony SLog3 S-Gamut3 Cine";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::SONY_SLOG3_BT_2020:
            val = "Sony SLog3 BT.2020";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::ARRI_LOG_C_WIDE_GAMUT:
            val = "ARRI Log C Wide Gamut";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::ARRI_LOGC4_WIDE_GAMUT_4:
            val = "ARRI LogC4 Wide Gamut 4";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::PANASONIC_V_LOG:
            val = "Panasonic V-Log";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::RED_LOG3G10_WIDE_GAMUT:
            val = "Red Log3G10 Wide Gamut";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::CANON_LOG_2:
            val = "Canon Log 2";
            break;
        case eOAIColorfrontDynRangeGamutLiveModeIn::CANON_LOG_3:
            val = "Canon Log 3";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColorfrontDynRangeGamutLiveModeIn::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColorfrontDynRangeGamutLiveModeIn::eOAIColorfrontDynRangeGamutLiveModeIn OAIColorfrontDynRangeGamutLiveModeIn::getValue() const {
    return m_value;
}

void OAIColorfrontDynRangeGamutLiveModeIn::setValue(const OAIColorfrontDynRangeGamutLiveModeIn::eOAIColorfrontDynRangeGamutLiveModeIn& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColorfrontDynRangeGamutLiveModeIn::isSet() const {
    
    return m_value_isSet;
}

bool OAIColorfrontDynRangeGamutLiveModeIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

bool OAIColorfrontDynRangeGamutLiveModeIn::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
