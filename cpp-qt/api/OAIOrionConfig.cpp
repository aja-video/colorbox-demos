/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIOrionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrionConfig::OAIOrionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrionConfig::OAIOrionConfig() {
    this->initializeModel();
}

OAIOrionConfig::~OAIOrionConfig() {}

void OAIOrionConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_conversion_isSet = false;
    m_conversion_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_source_range_isSet = false;
    m_source_range_isValid = false;

    m_hdr_ref_isSet = false;
    m_hdr_ref_isValid = false;

    m_sdr_ref_isSet = false;
    m_sdr_ref_isValid = false;

    m_hdr_peak_isSet = false;
    m_hdr_peak_isValid = false;

    m_sdr_eotf_isSet = false;
    m_sdr_eotf_isValid = false;

    m_pre_knee_isSet = false;
    m_pre_knee_isValid = false;

    m_pre_amount_isSet = false;
    m_pre_amount_isValid = false;

    m_post_knee_isSet = false;
    m_post_knee_isValid = false;

    m_post_amount_isSet = false;
    m_post_amount_isValid = false;

    m_clamping_isSet = false;
    m_clamping_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;
}

void OAIOrionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrionConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_conversion_isValid = ::OpenAPI::fromJsonValue(m_conversion, json[QString("conversion")]);
    m_conversion_isSet = !json[QString("conversion")].isNull() && m_conversion_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_source_range_isValid = ::OpenAPI::fromJsonValue(m_source_range, json[QString("sourceRange")]);
    m_source_range_isSet = !json[QString("sourceRange")].isNull() && m_source_range_isValid;

    m_hdr_ref_isValid = ::OpenAPI::fromJsonValue(m_hdr_ref, json[QString("hdrRef")]);
    m_hdr_ref_isSet = !json[QString("hdrRef")].isNull() && m_hdr_ref_isValid;

    m_sdr_ref_isValid = ::OpenAPI::fromJsonValue(m_sdr_ref, json[QString("sdrRef")]);
    m_sdr_ref_isSet = !json[QString("sdrRef")].isNull() && m_sdr_ref_isValid;

    m_hdr_peak_isValid = ::OpenAPI::fromJsonValue(m_hdr_peak, json[QString("hdrPeak")]);
    m_hdr_peak_isSet = !json[QString("hdrPeak")].isNull() && m_hdr_peak_isValid;

    m_sdr_eotf_isValid = ::OpenAPI::fromJsonValue(m_sdr_eotf, json[QString("sdrEotf")]);
    m_sdr_eotf_isSet = !json[QString("sdrEotf")].isNull() && m_sdr_eotf_isValid;

    m_pre_knee_isValid = ::OpenAPI::fromJsonValue(m_pre_knee, json[QString("preKnee")]);
    m_pre_knee_isSet = !json[QString("preKnee")].isNull() && m_pre_knee_isValid;

    m_pre_amount_isValid = ::OpenAPI::fromJsonValue(m_pre_amount, json[QString("preAmount")]);
    m_pre_amount_isSet = !json[QString("preAmount")].isNull() && m_pre_amount_isValid;

    m_post_knee_isValid = ::OpenAPI::fromJsonValue(m_post_knee, json[QString("postKnee")]);
    m_post_knee_isSet = !json[QString("postKnee")].isNull() && m_post_knee_isValid;

    m_post_amount_isValid = ::OpenAPI::fromJsonValue(m_post_amount, json[QString("postAmount")]);
    m_post_amount_isSet = !json[QString("postAmount")].isNull() && m_post_amount_isValid;

    m_clamping_isValid = ::OpenAPI::fromJsonValue(m_clamping, json[QString("clamping")]);
    m_clamping_isSet = !json[QString("clamping")].isNull() && m_clamping_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    applyMinMaxConstraints();
}

QString OAIOrionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_conversion.isSet()) {
        obj.insert(QString("conversion"), ::OpenAPI::toJsonValue(m_conversion));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_source_range.isSet()) {
        obj.insert(QString("sourceRange"), ::OpenAPI::toJsonValue(m_source_range));
    }
    if (m_hdr_ref_isSet) {
        obj.insert(QString("hdrRef"), ::OpenAPI::toJsonValue(m_hdr_ref));
    }
    if (m_sdr_ref_isSet) {
        obj.insert(QString("sdrRef"), ::OpenAPI::toJsonValue(m_sdr_ref));
    }
    if (m_hdr_peak_isSet) {
        obj.insert(QString("hdrPeak"), ::OpenAPI::toJsonValue(m_hdr_peak));
    }
    if (m_sdr_eotf.isSet()) {
        obj.insert(QString("sdrEotf"), ::OpenAPI::toJsonValue(m_sdr_eotf));
    }
    if (m_pre_knee_isSet) {
        obj.insert(QString("preKnee"), ::OpenAPI::toJsonValue(m_pre_knee));
    }
    if (m_pre_amount_isSet) {
        obj.insert(QString("preAmount"), ::OpenAPI::toJsonValue(m_pre_amount));
    }
    if (m_post_knee_isSet) {
        obj.insert(QString("postKnee"), ::OpenAPI::toJsonValue(m_post_knee));
    }
    if (m_post_amount_isSet) {
        obj.insert(QString("postAmount"), ::OpenAPI::toJsonValue(m_post_amount));
    }
    if (m_clamping.isSet()) {
        obj.insert(QString("clamping"), ::OpenAPI::toJsonValue(m_clamping));
    }
    if (m_implementation.isSet()) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    return obj;
}

bool OAIOrionConfig::isEnabled() const {
    return m_enabled;
}
void OAIOrionConfig::setEnabled(const bool &enabled) {
	bool v = enabled;
	this->m_enabled = v;
    this->m_enabled_isSet = true;
}

bool OAIOrionConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIOrionConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}


OAIOrionConversion OAIOrionConfig::getConversion() const {
    return m_conversion;
}
void OAIOrionConfig::setConversion(const OAIOrionConversion &conversion) {
	OAIOrionConversion v = conversion;
	this->m_conversion = v;
    this->m_conversion_isSet = true;
}

bool OAIOrionConfig::is_conversion_Set() const{
    return m_conversion_isSet;
}

bool OAIOrionConfig::is_conversion_Valid() const{
    return m_conversion_isValid;
}


OAIOrionMode OAIOrionConfig::getMode() const {
    return m_mode;
}
void OAIOrionConfig::setMode(const OAIOrionMode &mode) {
	OAIOrionMode v = mode;
	this->m_mode = v;
    this->m_mode_isSet = true;
}

bool OAIOrionConfig::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIOrionConfig::is_mode_Valid() const{
    return m_mode_isValid;
}


OAIOrionMethod OAIOrionConfig::getMethod() const {
    return m_method;
}
void OAIOrionConfig::setMethod(const OAIOrionMethod &method) {
	OAIOrionMethod v = method;
	this->m_method = v;
    this->m_method_isSet = true;
}

bool OAIOrionConfig::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOrionConfig::is_method_Valid() const{
    return m_method_isValid;
}


OAIOrionSourceRange OAIOrionConfig::getSourceRange() const {
    return m_source_range;
}
void OAIOrionConfig::setSourceRange(const OAIOrionSourceRange &source_range) {
	OAIOrionSourceRange v = source_range;
	this->m_source_range = v;
    this->m_source_range_isSet = true;
}

bool OAIOrionConfig::is_source_range_Set() const{
    return m_source_range_isSet;
}

bool OAIOrionConfig::is_source_range_Valid() const{
    return m_source_range_isValid;
}


double OAIOrionConfig::getHdrRef() const {
    return m_hdr_ref;
}
void OAIOrionConfig::setHdrRef(const double &hdr_ref) {
	double v = hdr_ref;
	double min = hdrRefMin();
	double max = hdrRefMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_hdr_ref = v;
    this->m_hdr_ref_isSet = true;
}

bool OAIOrionConfig::is_hdr_ref_Set() const{
    return m_hdr_ref_isSet;
}

bool OAIOrionConfig::is_hdr_ref_Valid() const{
    return m_hdr_ref_isValid;
}

double OAIOrionConfig::hdrRefMin() const {
	return 1.0;
}

double OAIOrionConfig::hdrRefMax() const {
	return 109.0;
}

double OAIOrionConfig::getSdrRef() const {
    return m_sdr_ref;
}
void OAIOrionConfig::setSdrRef(const double &sdr_ref) {
	double v = sdr_ref;
	double min = sdrRefMin();
	double max = sdrRefMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_sdr_ref = v;
    this->m_sdr_ref_isSet = true;
}

bool OAIOrionConfig::is_sdr_ref_Set() const{
    return m_sdr_ref_isSet;
}

bool OAIOrionConfig::is_sdr_ref_Valid() const{
    return m_sdr_ref_isValid;
}

double OAIOrionConfig::sdrRefMin() const {
	return 1.0;
}

double OAIOrionConfig::sdrRefMax() const {
	return 109.0;
}

qint32 OAIOrionConfig::getHdrPeak() const {
    return m_hdr_peak;
}
void OAIOrionConfig::setHdrPeak(const qint32 &hdr_peak) {
	qint32 v = hdr_peak;
	qint32 min = hdrPeakMin();
	qint32 max = hdrPeakMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_hdr_peak = v;
    this->m_hdr_peak_isSet = true;
}

bool OAIOrionConfig::is_hdr_peak_Set() const{
    return m_hdr_peak_isSet;
}

bool OAIOrionConfig::is_hdr_peak_Valid() const{
    return m_hdr_peak_isValid;
}

qint32 OAIOrionConfig::hdrPeakMin() const {
	return 100;
}

qint32 OAIOrionConfig::hdrPeakMax() const {
	return 4000;
}

OAIOrionSdrEotf OAIOrionConfig::getSdrEotf() const {
    return m_sdr_eotf;
}
void OAIOrionConfig::setSdrEotf(const OAIOrionSdrEotf &sdr_eotf) {
	OAIOrionSdrEotf v = sdr_eotf;
	this->m_sdr_eotf = v;
    this->m_sdr_eotf_isSet = true;
}

bool OAIOrionConfig::is_sdr_eotf_Set() const{
    return m_sdr_eotf_isSet;
}

bool OAIOrionConfig::is_sdr_eotf_Valid() const{
    return m_sdr_eotf_isValid;
}


double OAIOrionConfig::getPreKnee() const {
    return m_pre_knee;
}
void OAIOrionConfig::setPreKnee(const double &pre_knee) {
	double v = pre_knee;
	double min = preKneeMin();
	double max = preKneeMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_pre_knee = v;
    this->m_pre_knee_isSet = true;
}

bool OAIOrionConfig::is_pre_knee_Set() const{
    return m_pre_knee_isSet;
}

bool OAIOrionConfig::is_pre_knee_Valid() const{
    return m_pre_knee_isValid;
}

double OAIOrionConfig::preKneeMin() const {
	return 0.0;
}

double OAIOrionConfig::preKneeMax() const {
	return 100.0;
}

double OAIOrionConfig::getPreAmount() const {
    return m_pre_amount;
}
void OAIOrionConfig::setPreAmount(const double &pre_amount) {
	double v = pre_amount;
	double min = preAmountMin();
	double max = preAmountMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_pre_amount = v;
    this->m_pre_amount_isSet = true;
}

bool OAIOrionConfig::is_pre_amount_Set() const{
    return m_pre_amount_isSet;
}

bool OAIOrionConfig::is_pre_amount_Valid() const{
    return m_pre_amount_isValid;
}

double OAIOrionConfig::preAmountMin() const {
	return 0.0;
}

double OAIOrionConfig::preAmountMax() const {
	return 1.0;
}

double OAIOrionConfig::getPostKnee() const {
    return m_post_knee;
}
void OAIOrionConfig::setPostKnee(const double &post_knee) {
	double v = post_knee;
	double min = postKneeMin();
	double max = postKneeMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_post_knee = v;
    this->m_post_knee_isSet = true;
}

bool OAIOrionConfig::is_post_knee_Set() const{
    return m_post_knee_isSet;
}

bool OAIOrionConfig::is_post_knee_Valid() const{
    return m_post_knee_isValid;
}

double OAIOrionConfig::postKneeMin() const {
	return 0.0;
}

double OAIOrionConfig::postKneeMax() const {
	return 100.0;
}

double OAIOrionConfig::getPostAmount() const {
    return m_post_amount;
}
void OAIOrionConfig::setPostAmount(const double &post_amount) {
	double v = post_amount;
	double min = postAmountMin();
	double max = postAmountMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_post_amount = v;
    this->m_post_amount_isSet = true;
}

bool OAIOrionConfig::is_post_amount_Set() const{
    return m_post_amount_isSet;
}

bool OAIOrionConfig::is_post_amount_Valid() const{
    return m_post_amount_isValid;
}

double OAIOrionConfig::postAmountMin() const {
	return 0.0;
}

double OAIOrionConfig::postAmountMax() const {
	return 1.0;
}

OAIOrionClamping OAIOrionConfig::getClamping() const {
    return m_clamping;
}
void OAIOrionConfig::setClamping(const OAIOrionClamping &clamping) {
	OAIOrionClamping v = clamping;
	this->m_clamping = v;
    this->m_clamping_isSet = true;
}

bool OAIOrionConfig::is_clamping_Set() const{
    return m_clamping_isSet;
}

bool OAIOrionConfig::is_clamping_Valid() const{
    return m_clamping_isValid;
}


OAIOrionImplementation OAIOrionConfig::getImplementation() const {
    return m_implementation;
}
void OAIOrionConfig::setImplementation(const OAIOrionImplementation &implementation) {
	OAIOrionImplementation v = implementation;
	this->m_implementation = v;
    this->m_implementation_isSet = true;
}

bool OAIOrionConfig::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIOrionConfig::is_implementation_Valid() const{
    return m_implementation_isValid;
}


bool OAIOrionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdr_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdr_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdr_peak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdr_eotf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_knee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_knee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clamping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIOrionConfig::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_hdr_ref_Set())
	{
		bool hdrRefChanged = false;
		double v = getHdrRef();
		double min = hdrRefMin();
		double max = hdrRefMax();
		if (v < min) { v = min; hdrRefChanged = true; }
		if (v > max) { v = max; hdrRefChanged = true; }
		if (hdrRefChanged) { setHdrRef(v); anyMinMaxValueChanged = true; }
	}
	if (is_sdr_ref_Set())
	{
		bool sdrRefChanged = false;
		double v = getSdrRef();
		double min = sdrRefMin();
		double max = sdrRefMax();
		if (v < min) { v = min; sdrRefChanged = true; }
		if (v > max) { v = max; sdrRefChanged = true; }
		if (sdrRefChanged) { setSdrRef(v); anyMinMaxValueChanged = true; }
	}
	if (is_hdr_peak_Set())
	{
		bool hdrPeakChanged = false;
		qint32 v = getHdrPeak();
		qint32 min = hdrPeakMin();
		qint32 max = hdrPeakMax();
		if (v < min) { v = min; hdrPeakChanged = true; }
		if (v > max) { v = max; hdrPeakChanged = true; }
		if (hdrPeakChanged) { setHdrPeak(v); anyMinMaxValueChanged = true; }
	}
	if (is_pre_knee_Set())
	{
		bool preKneeChanged = false;
		double v = getPreKnee();
		double min = preKneeMin();
		double max = preKneeMax();
		if (v < min) { v = min; preKneeChanged = true; }
		if (v > max) { v = max; preKneeChanged = true; }
		if (preKneeChanged) { setPreKnee(v); anyMinMaxValueChanged = true; }
	}
	if (is_pre_amount_Set())
	{
		bool preAmountChanged = false;
		double v = getPreAmount();
		double min = preAmountMin();
		double max = preAmountMax();
		if (v < min) { v = min; preAmountChanged = true; }
		if (v > max) { v = max; preAmountChanged = true; }
		if (preAmountChanged) { setPreAmount(v); anyMinMaxValueChanged = true; }
	}
	if (is_post_knee_Set())
	{
		bool postKneeChanged = false;
		double v = getPostKnee();
		double min = postKneeMin();
		double max = postKneeMax();
		if (v < min) { v = min; postKneeChanged = true; }
		if (v > max) { v = max; postKneeChanged = true; }
		if (postKneeChanged) { setPostKnee(v); anyMinMaxValueChanged = true; }
	}
	if (is_post_amount_Set())
	{
		bool postAmountChanged = false;
		double v = getPostAmount();
		double min = postAmountMin();
		double max = postAmountMax();
		if (v < min) { v = min; postAmountChanged = true; }
		if (v > max) { v = max; postAmountChanged = true; }
		if (postAmountChanged) { setPostAmount(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
