/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIColorCorrector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorCorrector::OAIColorCorrector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorCorrector::OAIColorCorrector() {
    this->initializeModel();
}

OAIColorCorrector::~OAIColorCorrector() {}

void OAIColorCorrector::initializeModel() {

    m_black_red_isSet = false;
    m_black_red_isValid = false;

    m_black_green_isSet = false;
    m_black_green_isValid = false;

    m_black_blue_isSet = false;
    m_black_blue_isValid = false;

    m_gain_red_isSet = false;
    m_gain_red_isValid = false;

    m_gain_green_isSet = false;
    m_gain_green_isValid = false;

    m_gain_blue_isSet = false;
    m_gain_blue_isValid = false;

    m_gamma_red_isSet = false;
    m_gamma_red_isValid = false;

    m_gamma_green_isSet = false;
    m_gamma_green_isValid = false;

    m_gamma_blue_isSet = false;
    m_gamma_blue_isValid = false;

    m_units_black_isSet = false;
    m_units_black_isValid = false;

    m_units_gain_isSet = false;
    m_units_gain_isValid = false;

    m_units_gamma_isSet = false;
    m_units_gamma_isValid = false;
}

void OAIColorCorrector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorCorrector::fromJsonObject(QJsonObject json) {

    m_black_red_isValid = ::OpenAPI::fromJsonValue(m_black_red, json[QString("blackRed")]);
    m_black_red_isSet = !json[QString("blackRed")].isNull() && m_black_red_isValid;

    m_black_green_isValid = ::OpenAPI::fromJsonValue(m_black_green, json[QString("blackGreen")]);
    m_black_green_isSet = !json[QString("blackGreen")].isNull() && m_black_green_isValid;

    m_black_blue_isValid = ::OpenAPI::fromJsonValue(m_black_blue, json[QString("blackBlue")]);
    m_black_blue_isSet = !json[QString("blackBlue")].isNull() && m_black_blue_isValid;

    m_gain_red_isValid = ::OpenAPI::fromJsonValue(m_gain_red, json[QString("gainRed")]);
    m_gain_red_isSet = !json[QString("gainRed")].isNull() && m_gain_red_isValid;

    m_gain_green_isValid = ::OpenAPI::fromJsonValue(m_gain_green, json[QString("gainGreen")]);
    m_gain_green_isSet = !json[QString("gainGreen")].isNull() && m_gain_green_isValid;

    m_gain_blue_isValid = ::OpenAPI::fromJsonValue(m_gain_blue, json[QString("gainBlue")]);
    m_gain_blue_isSet = !json[QString("gainBlue")].isNull() && m_gain_blue_isValid;

    m_gamma_red_isValid = ::OpenAPI::fromJsonValue(m_gamma_red, json[QString("gammaRed")]);
    m_gamma_red_isSet = !json[QString("gammaRed")].isNull() && m_gamma_red_isValid;

    m_gamma_green_isValid = ::OpenAPI::fromJsonValue(m_gamma_green, json[QString("gammaGreen")]);
    m_gamma_green_isSet = !json[QString("gammaGreen")].isNull() && m_gamma_green_isValid;

    m_gamma_blue_isValid = ::OpenAPI::fromJsonValue(m_gamma_blue, json[QString("gammaBlue")]);
    m_gamma_blue_isSet = !json[QString("gammaBlue")].isNull() && m_gamma_blue_isValid;

    m_units_black_isValid = ::OpenAPI::fromJsonValue(m_units_black, json[QString("unitsBlack")]);
    m_units_black_isSet = !json[QString("unitsBlack")].isNull() && m_units_black_isValid;

    m_units_gain_isValid = ::OpenAPI::fromJsonValue(m_units_gain, json[QString("unitsGain")]);
    m_units_gain_isSet = !json[QString("unitsGain")].isNull() && m_units_gain_isValid;

    m_units_gamma_isValid = ::OpenAPI::fromJsonValue(m_units_gamma, json[QString("unitsGamma")]);
    m_units_gamma_isSet = !json[QString("unitsGamma")].isNull() && m_units_gamma_isValid;

    applyMinMaxConstraints();
}

QString OAIColorCorrector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorCorrector::asJsonObject() const {
    QJsonObject obj;
    if (m_black_red_isSet) {
        obj.insert(QString("blackRed"), ::OpenAPI::toJsonValue(m_black_red));
    }
    if (m_black_green_isSet) {
        obj.insert(QString("blackGreen"), ::OpenAPI::toJsonValue(m_black_green));
    }
    if (m_black_blue_isSet) {
        obj.insert(QString("blackBlue"), ::OpenAPI::toJsonValue(m_black_blue));
    }
    if (m_gain_red_isSet) {
        obj.insert(QString("gainRed"), ::OpenAPI::toJsonValue(m_gain_red));
    }
    if (m_gain_green_isSet) {
        obj.insert(QString("gainGreen"), ::OpenAPI::toJsonValue(m_gain_green));
    }
    if (m_gain_blue_isSet) {
        obj.insert(QString("gainBlue"), ::OpenAPI::toJsonValue(m_gain_blue));
    }
    if (m_gamma_red_isSet) {
        obj.insert(QString("gammaRed"), ::OpenAPI::toJsonValue(m_gamma_red));
    }
    if (m_gamma_green_isSet) {
        obj.insert(QString("gammaGreen"), ::OpenAPI::toJsonValue(m_gamma_green));
    }
    if (m_gamma_blue_isSet) {
        obj.insert(QString("gammaBlue"), ::OpenAPI::toJsonValue(m_gamma_blue));
    }
    if (m_units_black_isSet) {
        obj.insert(QString("unitsBlack"), ::OpenAPI::toJsonValue(m_units_black));
    }
    if (m_units_gain_isSet) {
        obj.insert(QString("unitsGain"), ::OpenAPI::toJsonValue(m_units_gain));
    }
    if (m_units_gamma_isSet) {
        obj.insert(QString("unitsGamma"), ::OpenAPI::toJsonValue(m_units_gamma));
    }
    return obj;
}

double OAIColorCorrector::getBlackRed() const {
    return m_black_red;
}
void OAIColorCorrector::setBlackRed(const double &black_red) {
	double v = black_red;
	double min = blackRedMin();
	double max = blackRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_black_red = v;
    this->m_black_red_isSet = true;
}

bool OAIColorCorrector::is_black_red_Set() const{
    return m_black_red_isSet;
}

bool OAIColorCorrector::is_black_red_Valid() const{
    return m_black_red_isValid;
}

double OAIColorCorrector::blackRedMin() const {
	return -20.0;
}

double OAIColorCorrector::blackRedMax() const {
	return 20.0;
}

double OAIColorCorrector::getBlackGreen() const {
    return m_black_green;
}
void OAIColorCorrector::setBlackGreen(const double &black_green) {
	double v = black_green;
	double min = blackGreenMin();
	double max = blackGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_black_green = v;
    this->m_black_green_isSet = true;
}

bool OAIColorCorrector::is_black_green_Set() const{
    return m_black_green_isSet;
}

bool OAIColorCorrector::is_black_green_Valid() const{
    return m_black_green_isValid;
}

double OAIColorCorrector::blackGreenMin() const {
	return -20.0;
}

double OAIColorCorrector::blackGreenMax() const {
	return 20.0;
}

double OAIColorCorrector::getBlackBlue() const {
    return m_black_blue;
}
void OAIColorCorrector::setBlackBlue(const double &black_blue) {
	double v = black_blue;
	double min = blackBlueMin();
	double max = blackBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_black_blue = v;
    this->m_black_blue_isSet = true;
}

bool OAIColorCorrector::is_black_blue_Set() const{
    return m_black_blue_isSet;
}

bool OAIColorCorrector::is_black_blue_Valid() const{
    return m_black_blue_isValid;
}

double OAIColorCorrector::blackBlueMin() const {
	return -20.0;
}

double OAIColorCorrector::blackBlueMax() const {
	return 20.0;
}

double OAIColorCorrector::getGainRed() const {
    return m_gain_red;
}
void OAIColorCorrector::setGainRed(const double &gain_red) {
	double v = gain_red;
	double min = gainRedMin();
	double max = gainRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_red = v;
    this->m_gain_red_isSet = true;
}

bool OAIColorCorrector::is_gain_red_Set() const{
    return m_gain_red_isSet;
}

bool OAIColorCorrector::is_gain_red_Valid() const{
    return m_gain_red_isValid;
}

double OAIColorCorrector::gainRedMin() const {
	return 0;
}

double OAIColorCorrector::gainRedMax() const {
	return 1.5;
}

double OAIColorCorrector::getGainGreen() const {
    return m_gain_green;
}
void OAIColorCorrector::setGainGreen(const double &gain_green) {
	double v = gain_green;
	double min = gainGreenMin();
	double max = gainGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_green = v;
    this->m_gain_green_isSet = true;
}

bool OAIColorCorrector::is_gain_green_Set() const{
    return m_gain_green_isSet;
}

bool OAIColorCorrector::is_gain_green_Valid() const{
    return m_gain_green_isValid;
}

double OAIColorCorrector::gainGreenMin() const {
	return 0;
}

double OAIColorCorrector::gainGreenMax() const {
	return 1.5;
}

double OAIColorCorrector::getGainBlue() const {
    return m_gain_blue;
}
void OAIColorCorrector::setGainBlue(const double &gain_blue) {
	double v = gain_blue;
	double min = gainBlueMin();
	double max = gainBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_blue = v;
    this->m_gain_blue_isSet = true;
}

bool OAIColorCorrector::is_gain_blue_Set() const{
    return m_gain_blue_isSet;
}

bool OAIColorCorrector::is_gain_blue_Valid() const{
    return m_gain_blue_isValid;
}

double OAIColorCorrector::gainBlueMin() const {
	return 0;
}

double OAIColorCorrector::gainBlueMax() const {
	return 1.5;
}

double OAIColorCorrector::getGammaRed() const {
    return m_gamma_red;
}
void OAIColorCorrector::setGammaRed(const double &gamma_red) {
	double v = gamma_red;
	double min = gammaRedMin();
	double max = gammaRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_red = v;
    this->m_gamma_red_isSet = true;
}

bool OAIColorCorrector::is_gamma_red_Set() const{
    return m_gamma_red_isSet;
}

bool OAIColorCorrector::is_gamma_red_Valid() const{
    return m_gamma_red_isValid;
}

double OAIColorCorrector::gammaRedMin() const {
	return -1.0;
}

double OAIColorCorrector::gammaRedMax() const {
	return 1.0;
}

double OAIColorCorrector::getGammaGreen() const {
    return m_gamma_green;
}
void OAIColorCorrector::setGammaGreen(const double &gamma_green) {
	double v = gamma_green;
	double min = gammaGreenMin();
	double max = gammaGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_green = v;
    this->m_gamma_green_isSet = true;
}

bool OAIColorCorrector::is_gamma_green_Set() const{
    return m_gamma_green_isSet;
}

bool OAIColorCorrector::is_gamma_green_Valid() const{
    return m_gamma_green_isValid;
}

double OAIColorCorrector::gammaGreenMin() const {
	return -1.0;
}

double OAIColorCorrector::gammaGreenMax() const {
	return 1.0;
}

double OAIColorCorrector::getGammaBlue() const {
    return m_gamma_blue;
}
void OAIColorCorrector::setGammaBlue(const double &gamma_blue) {
	double v = gamma_blue;
	double min = gammaBlueMin();
	double max = gammaBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_blue = v;
    this->m_gamma_blue_isSet = true;
}

bool OAIColorCorrector::is_gamma_blue_Set() const{
    return m_gamma_blue_isSet;
}

bool OAIColorCorrector::is_gamma_blue_Valid() const{
    return m_gamma_blue_isValid;
}

double OAIColorCorrector::gammaBlueMin() const {
	return -1.0;
}

double OAIColorCorrector::gammaBlueMax() const {
	return 1.0;
}

QString OAIColorCorrector::getUnitsBlack() const {
    return m_units_black;
}
void OAIColorCorrector::setUnitsBlack(const QString &units_black) {
	QString v = units_black;
	this->m_units_black = v;
    this->m_units_black_isSet = true;
}

bool OAIColorCorrector::is_units_black_Set() const{
    return m_units_black_isSet;
}

bool OAIColorCorrector::is_units_black_Valid() const{
    return m_units_black_isValid;
}



QString OAIColorCorrector::getUnitsGain() const {
    return m_units_gain;
}
void OAIColorCorrector::setUnitsGain(const QString &units_gain) {
	QString v = units_gain;
	this->m_units_gain = v;
    this->m_units_gain_isSet = true;
}

bool OAIColorCorrector::is_units_gain_Set() const{
    return m_units_gain_isSet;
}

bool OAIColorCorrector::is_units_gain_Valid() const{
    return m_units_gain_isValid;
}



QString OAIColorCorrector::getUnitsGamma() const {
    return m_units_gamma;
}
void OAIColorCorrector::setUnitsGamma(const QString &units_gamma) {
	QString v = units_gamma;
	this->m_units_gamma = v;
    this->m_units_gamma_isSet = true;
}

bool OAIColorCorrector::is_units_gamma_Set() const{
    return m_units_gamma_isSet;
}

bool OAIColorCorrector::is_units_gamma_Valid() const{
    return m_units_gamma_isValid;
}



bool OAIColorCorrector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_black_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_black_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_black_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_black_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_gamma_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorCorrector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIColorCorrector::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_black_red_Set())
	{
		bool blackRedChanged = false;
		double v = getBlackRed();
		double min = blackRedMin();
		double max = blackRedMax();
		if (v < min) { v = min; blackRedChanged = true; }
		if (v > max) { v = max; blackRedChanged = true; }
		if (blackRedChanged) { setBlackRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_black_green_Set())
	{
		bool blackGreenChanged = false;
		double v = getBlackGreen();
		double min = blackGreenMin();
		double max = blackGreenMax();
		if (v < min) { v = min; blackGreenChanged = true; }
		if (v > max) { v = max; blackGreenChanged = true; }
		if (blackGreenChanged) { setBlackGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_black_blue_Set())
	{
		bool blackBlueChanged = false;
		double v = getBlackBlue();
		double min = blackBlueMin();
		double max = blackBlueMax();
		if (v < min) { v = min; blackBlueChanged = true; }
		if (v > max) { v = max; blackBlueChanged = true; }
		if (blackBlueChanged) { setBlackBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_red_Set())
	{
		bool gainRedChanged = false;
		double v = getGainRed();
		double min = gainRedMin();
		double max = gainRedMax();
		if (v < min) { v = min; gainRedChanged = true; }
		if (v > max) { v = max; gainRedChanged = true; }
		if (gainRedChanged) { setGainRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_green_Set())
	{
		bool gainGreenChanged = false;
		double v = getGainGreen();
		double min = gainGreenMin();
		double max = gainGreenMax();
		if (v < min) { v = min; gainGreenChanged = true; }
		if (v > max) { v = max; gainGreenChanged = true; }
		if (gainGreenChanged) { setGainGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_blue_Set())
	{
		bool gainBlueChanged = false;
		double v = getGainBlue();
		double min = gainBlueMin();
		double max = gainBlueMax();
		if (v < min) { v = min; gainBlueChanged = true; }
		if (v > max) { v = max; gainBlueChanged = true; }
		if (gainBlueChanged) { setGainBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_red_Set())
	{
		bool gammaRedChanged = false;
		double v = getGammaRed();
		double min = gammaRedMin();
		double max = gammaRedMax();
		if (v < min) { v = min; gammaRedChanged = true; }
		if (v > max) { v = max; gammaRedChanged = true; }
		if (gammaRedChanged) { setGammaRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_green_Set())
	{
		bool gammaGreenChanged = false;
		double v = getGammaGreen();
		double min = gammaGreenMin();
		double max = gammaGreenMax();
		if (v < min) { v = min; gammaGreenChanged = true; }
		if (v > max) { v = max; gammaGreenChanged = true; }
		if (gammaGreenChanged) { setGammaGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_blue_Set())
	{
		bool gammaBlueChanged = false;
		double v = getGammaBlue();
		double min = gammaBlueMin();
		double max = gammaBlueMax();
		if (v < min) { v = min; gammaBlueChanged = true; }
		if (v > max) { v = max; gammaBlueChanged = true; }
		if (gammaBlueChanged) { setGammaBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_units_black_Set())
	{
		bool unitsBlackChanged = false;
		QString v = getUnitsBlack();
		if (unitsBlackChanged) { setUnitsBlack(v); anyMinMaxValueChanged = true; }
	}
	if (is_units_gain_Set())
	{
		bool unitsGainChanged = false;
		QString v = getUnitsGain();
		if (unitsGainChanged) { setUnitsGain(v); anyMinMaxValueChanged = true; }
	}
	if (is_units_gamma_Set())
	{
		bool unitsGammaChanged = false;
		QString v = getUnitsGamma();
		if (unitsGammaChanged) { setUnitsGamma(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
