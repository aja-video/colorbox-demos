/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * OAIPipelineStages.h
 *
 * 
 */

#ifndef OAIPipelineStages_H
#define OAIPipelineStages_H

#include <QJsonObject>

#include "OAICSCFilter.h"
#include "OAIColorimetry.h"
#include "OAIPipelineRange.h"
#include "OAIStage.h"
#include "OAITransfer.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPipelineStages : public OAIObject {
public:
    OAIPipelineStages();
    OAIPipelineStages(QString json);
    ~OAIPipelineStages() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStage getLut1d1() const;
    void setLut1d1(const OAIStage &lut1d_1);
    bool is_lut1d_1_Set() const;
    bool is_lut1d_1_Valid() const;

    OAIStage getM3x32() const;
    void setM3x32(const OAIStage &m3x3_2);
    bool is_m3x3_2_Set() const;
    bool is_m3x3_2_Valid() const;

    OAIStage getLut1d2() const;
    void setLut1d2(const OAIStage &lut1d_2);
    bool is_lut1d_2_Set() const;
    bool is_lut1d_2_Valid() const;

    OAIStage getLut3d1() const;
    void setLut3d1(const OAIStage &lut3d_1);
    bool is_lut3d_1_Set() const;
    bool is_lut3d_1_Valid() const;

    OAIStage getLut1d3() const;
    void setLut1d3(const OAIStage &lut1d_3);
    bool is_lut1d_3_Set() const;
    bool is_lut1d_3_Valid() const;

    OAIStage getM3x33() const;
    void setM3x33(const OAIStage &m3x3_3);
    bool is_m3x3_3_Set() const;
    bool is_m3x3_3_Valid() const;

    OAIStage getLut1d4() const;
    void setLut1d4(const OAIStage &lut1d_4);
    bool is_lut1d_4_Set() const;
    bool is_lut1d_4_Valid() const;

    OAIColorimetry getInColorimetry() const;
    void setInColorimetry(const OAIColorimetry &in_colorimetry);
    bool is_in_colorimetry_Set() const;
    bool is_in_colorimetry_Valid() const;

    OAIPipelineRange getInRange() const;
    void setInRange(const OAIPipelineRange &in_range);
    bool is_in_range_Set() const;
    bool is_in_range_Valid() const;

    OAIColorimetry getOutColorimetry() const;
    void setOutColorimetry(const OAIColorimetry &out_colorimetry);
    bool is_out_colorimetry_Set() const;
    bool is_out_colorimetry_Valid() const;

    OAIPipelineRange getOutRange() const;
    void setOutRange(const OAIPipelineRange &out_range);
    bool is_out_range_Set() const;
    bool is_out_range_Valid() const;

    OAITransfer getTransferCharacteristic() const;
    void setTransferCharacteristic(const OAITransfer &transfer_characteristic);
    bool is_transfer_characteristic_Set() const;
    bool is_transfer_characteristic_Valid() const;

    OAICSCFilter getCscFilter() const;
    void setCscFilter(const OAICSCFilter &csc_filter);
    bool is_csc_filter_Set() const;
    bool is_csc_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

    bool applyMinMaxConstraints();
private:
    void initializeModel();

    OAIStage m_lut1d_1;
    bool m_lut1d_1_isSet;
    bool m_lut1d_1_isValid;

    OAIStage m_m3x3_2;
    bool m_m3x3_2_isSet;
    bool m_m3x3_2_isValid;

    OAIStage m_lut1d_2;
    bool m_lut1d_2_isSet;
    bool m_lut1d_2_isValid;

    OAIStage m_lut3d_1;
    bool m_lut3d_1_isSet;
    bool m_lut3d_1_isValid;

    OAIStage m_lut1d_3;
    bool m_lut1d_3_isSet;
    bool m_lut1d_3_isValid;

    OAIStage m_m3x3_3;
    bool m_m3x3_3_isSet;
    bool m_m3x3_3_isValid;

    OAIStage m_lut1d_4;
    bool m_lut1d_4_isSet;
    bool m_lut1d_4_isValid;

    OAIColorimetry m_in_colorimetry;
    bool m_in_colorimetry_isSet;
    bool m_in_colorimetry_isValid;

    OAIPipelineRange m_in_range;
    bool m_in_range_isSet;
    bool m_in_range_isValid;

    OAIColorimetry m_out_colorimetry;
    bool m_out_colorimetry_isSet;
    bool m_out_colorimetry_isValid;

    OAIPipelineRange m_out_range;
    bool m_out_range_isSet;
    bool m_out_range_isValid;

    OAITransfer m_transfer_characteristic;
    bool m_transfer_characteristic_isSet;
    bool m_transfer_characteristic_isValid;

    OAICSCFilter m_csc_filter;
    bool m_csc_filter_isSet;
    bool m_csc_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipelineStages)

#endif // OAIPipelineStages_H
