/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAISystemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemStatus::OAISystemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemStatus::OAISystemStatus() {
    this->initializeModel();
}

OAISystemStatus::~OAISystemStatus() {}

void OAISystemStatus::initializeModel() {

    m_safeboot_version_isSet = false;
    m_safeboot_version_isValid = false;

    m_mainboot_version_isSet = false;
    m_mainboot_version_isValid = false;

    m_running_version_isSet = false;
    m_running_version_isValid = false;

    m_safeboot_isSet = false;
    m_safeboot_isValid = false;

    m_update_msg_isSet = false;
    m_update_msg_isValid = false;

    m_transform_mode_changing_isSet = false;
    m_transform_mode_changing_isValid = false;

    m_transform_mode_timestamp_isSet = false;
    m_transform_mode_timestamp_isValid = false;
}

void OAISystemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemStatus::fromJsonObject(QJsonObject json) {

    m_safeboot_version_isValid = ::OpenAPI::fromJsonValue(m_safeboot_version, json[QString("safebootVersion")]);
    m_safeboot_version_isSet = !json[QString("safebootVersion")].isNull() && m_safeboot_version_isValid;

    m_mainboot_version_isValid = ::OpenAPI::fromJsonValue(m_mainboot_version, json[QString("mainbootVersion")]);
    m_mainboot_version_isSet = !json[QString("mainbootVersion")].isNull() && m_mainboot_version_isValid;

    m_running_version_isValid = ::OpenAPI::fromJsonValue(m_running_version, json[QString("runningVersion")]);
    m_running_version_isSet = !json[QString("runningVersion")].isNull() && m_running_version_isValid;

    m_safeboot_isValid = ::OpenAPI::fromJsonValue(m_safeboot, json[QString("safeboot")]);
    m_safeboot_isSet = !json[QString("safeboot")].isNull() && m_safeboot_isValid;

    m_update_msg_isValid = ::OpenAPI::fromJsonValue(m_update_msg, json[QString("updateMsg")]);
    m_update_msg_isSet = !json[QString("updateMsg")].isNull() && m_update_msg_isValid;

    m_transform_mode_changing_isValid = ::OpenAPI::fromJsonValue(m_transform_mode_changing, json[QString("transformModeChanging")]);
    m_transform_mode_changing_isSet = !json[QString("transformModeChanging")].isNull() && m_transform_mode_changing_isValid;

    m_transform_mode_timestamp_isValid = ::OpenAPI::fromJsonValue(m_transform_mode_timestamp, json[QString("transformModeTimestamp")]);
    m_transform_mode_timestamp_isSet = !json[QString("transformModeTimestamp")].isNull() && m_transform_mode_timestamp_isValid;

    applyMinMaxConstraints();
}

QString OAISystemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_safeboot_version_isSet) {
        obj.insert(QString("safebootVersion"), ::OpenAPI::toJsonValue(m_safeboot_version));
    }
    if (m_mainboot_version_isSet) {
        obj.insert(QString("mainbootVersion"), ::OpenAPI::toJsonValue(m_mainboot_version));
    }
    if (m_running_version_isSet) {
        obj.insert(QString("runningVersion"), ::OpenAPI::toJsonValue(m_running_version));
    }
    if (m_safeboot_isSet) {
        obj.insert(QString("safeboot"), ::OpenAPI::toJsonValue(m_safeboot));
    }
    if (m_update_msg.size() > 0) {
        obj.insert(QString("updateMsg"), ::OpenAPI::toJsonValue(m_update_msg));
    }
    if (m_transform_mode_changing_isSet) {
        obj.insert(QString("transformModeChanging"), ::OpenAPI::toJsonValue(m_transform_mode_changing));
    }
    if (m_transform_mode_timestamp_isSet) {
        obj.insert(QString("transformModeTimestamp"), ::OpenAPI::toJsonValue(m_transform_mode_timestamp));
    }
    return obj;
}

QString OAISystemStatus::getSafebootVersion() const {
    return m_safeboot_version;
}
void OAISystemStatus::setSafebootVersion(const QString &safeboot_version) {
	QString v = safeboot_version;
	this->m_safeboot_version = v;
    this->m_safeboot_version_isSet = true;
}

bool OAISystemStatus::is_safeboot_version_Set() const{
    return m_safeboot_version_isSet;
}

bool OAISystemStatus::is_safeboot_version_Valid() const{
    return m_safeboot_version_isValid;
}



QString OAISystemStatus::getMainbootVersion() const {
    return m_mainboot_version;
}
void OAISystemStatus::setMainbootVersion(const QString &mainboot_version) {
	QString v = mainboot_version;
	this->m_mainboot_version = v;
    this->m_mainboot_version_isSet = true;
}

bool OAISystemStatus::is_mainboot_version_Set() const{
    return m_mainboot_version_isSet;
}

bool OAISystemStatus::is_mainboot_version_Valid() const{
    return m_mainboot_version_isValid;
}



QString OAISystemStatus::getRunningVersion() const {
    return m_running_version;
}
void OAISystemStatus::setRunningVersion(const QString &running_version) {
	QString v = running_version;
	this->m_running_version = v;
    this->m_running_version_isSet = true;
}

bool OAISystemStatus::is_running_version_Set() const{
    return m_running_version_isSet;
}

bool OAISystemStatus::is_running_version_Valid() const{
    return m_running_version_isValid;
}



bool OAISystemStatus::isSafeboot() const {
    return m_safeboot;
}
void OAISystemStatus::setSafeboot(const bool &safeboot) {
	bool v = safeboot;
	this->m_safeboot = v;
    this->m_safeboot_isSet = true;
}

bool OAISystemStatus::is_safeboot_Set() const{
    return m_safeboot_isSet;
}

bool OAISystemStatus::is_safeboot_Valid() const{
    return m_safeboot_isValid;
}


QList<QString> OAISystemStatus::getUpdateMsg() const {
    return m_update_msg;
}
void OAISystemStatus::setUpdateMsg(const QList<QString> &update_msg) {
	QList<QString> v = update_msg;
	this->m_update_msg = v;
    this->m_update_msg_isSet = true;
}

bool OAISystemStatus::is_update_msg_Set() const{
    return m_update_msg_isSet;
}

bool OAISystemStatus::is_update_msg_Valid() const{
    return m_update_msg_isValid;
}


bool OAISystemStatus::isTransformModeChanging() const {
    return m_transform_mode_changing;
}
void OAISystemStatus::setTransformModeChanging(const bool &transform_mode_changing) {
	bool v = transform_mode_changing;
	this->m_transform_mode_changing = v;
    this->m_transform_mode_changing_isSet = true;
}

bool OAISystemStatus::is_transform_mode_changing_Set() const{
    return m_transform_mode_changing_isSet;
}

bool OAISystemStatus::is_transform_mode_changing_Valid() const{
    return m_transform_mode_changing_isValid;
}


QDateTime OAISystemStatus::getTransformModeTimestamp() const {
    return m_transform_mode_timestamp;
}
void OAISystemStatus::setTransformModeTimestamp(const QDateTime &transform_mode_timestamp) {
	QDateTime v = transform_mode_timestamp;
	this->m_transform_mode_timestamp = v;
    this->m_transform_mode_timestamp_isSet = true;
}

bool OAISystemStatus::is_transform_mode_timestamp_Set() const{
    return m_transform_mode_timestamp_isSet;
}

bool OAISystemStatus::is_transform_mode_timestamp_Valid() const{
    return m_transform_mode_timestamp_isValid;
}


bool OAISystemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_safeboot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mainboot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeboot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_msg.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_mode_changing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_mode_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAISystemStatus::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_safeboot_version_Set())
	{
		bool safebootVersionChanged = false;
		QString v = getSafebootVersion();
		if (safebootVersionChanged) { setSafebootVersion(v); anyMinMaxValueChanged = true; }
	}
	if (is_mainboot_version_Set())
	{
		bool mainbootVersionChanged = false;
		QString v = getMainbootVersion();
		if (mainbootVersionChanged) { setMainbootVersion(v); anyMinMaxValueChanged = true; }
	}
	if (is_running_version_Set())
	{
		bool runningVersionChanged = false;
		QString v = getRunningVersion();
		if (runningVersionChanged) { setRunningVersion(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
