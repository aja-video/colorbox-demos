/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * OAIColorCorrector.h
 *
 * 
 */

#ifndef OAIColorCorrector_H
#define OAIColorCorrector_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIColorCorrector : public OAIObject {
public:
    OAIColorCorrector();
    OAIColorCorrector(QString json);
    ~OAIColorCorrector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBlackRed() const;
    void setBlackRed(const double &black_red);
    bool is_black_red_Set() const;
    bool is_black_red_Valid() const;
    double blackRedMin() const;
    double blackRedMax() const;

    double getBlackGreen() const;
    void setBlackGreen(const double &black_green);
    bool is_black_green_Set() const;
    bool is_black_green_Valid() const;
    double blackGreenMin() const;
    double blackGreenMax() const;

    double getBlackBlue() const;
    void setBlackBlue(const double &black_blue);
    bool is_black_blue_Set() const;
    bool is_black_blue_Valid() const;
    double blackBlueMin() const;
    double blackBlueMax() const;

    double getGainRed() const;
    void setGainRed(const double &gain_red);
    bool is_gain_red_Set() const;
    bool is_gain_red_Valid() const;
    double gainRedMin() const;
    double gainRedMax() const;

    double getGainGreen() const;
    void setGainGreen(const double &gain_green);
    bool is_gain_green_Set() const;
    bool is_gain_green_Valid() const;
    double gainGreenMin() const;
    double gainGreenMax() const;

    double getGainBlue() const;
    void setGainBlue(const double &gain_blue);
    bool is_gain_blue_Set() const;
    bool is_gain_blue_Valid() const;
    double gainBlueMin() const;
    double gainBlueMax() const;

    double getGammaRed() const;
    void setGammaRed(const double &gamma_red);
    bool is_gamma_red_Set() const;
    bool is_gamma_red_Valid() const;
    double gammaRedMin() const;
    double gammaRedMax() const;

    double getGammaGreen() const;
    void setGammaGreen(const double &gamma_green);
    bool is_gamma_green_Set() const;
    bool is_gamma_green_Valid() const;
    double gammaGreenMin() const;
    double gammaGreenMax() const;

    double getGammaBlue() const;
    void setGammaBlue(const double &gamma_blue);
    bool is_gamma_blue_Set() const;
    bool is_gamma_blue_Valid() const;
    double gammaBlueMin() const;
    double gammaBlueMax() const;

    QString getUnitsBlack() const;
    void setUnitsBlack(const QString &units_black);
    bool is_units_black_Set() const;
    bool is_units_black_Valid() const;

    QString getUnitsGain() const;
    void setUnitsGain(const QString &units_gain);
    bool is_units_gain_Set() const;
    bool is_units_gain_Valid() const;

    QString getUnitsGamma() const;
    void setUnitsGamma(const QString &units_gamma);
    bool is_units_gamma_Set() const;
    bool is_units_gamma_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

    bool applyMinMaxConstraints();
private:
    void initializeModel();

    double m_black_red;
    bool m_black_red_isSet;
    bool m_black_red_isValid;

    double m_black_green;
    bool m_black_green_isSet;
    bool m_black_green_isValid;

    double m_black_blue;
    bool m_black_blue_isSet;
    bool m_black_blue_isValid;

    double m_gain_red;
    bool m_gain_red_isSet;
    bool m_gain_red_isValid;

    double m_gain_green;
    bool m_gain_green_isSet;
    bool m_gain_green_isValid;

    double m_gain_blue;
    bool m_gain_blue_isSet;
    bool m_gain_blue_isValid;

    double m_gamma_red;
    bool m_gamma_red_isSet;
    bool m_gamma_red_isValid;

    double m_gamma_green;
    bool m_gamma_green_isSet;
    bool m_gamma_green_isValid;

    double m_gamma_blue;
    bool m_gamma_blue_isSet;
    bool m_gamma_blue_isValid;

    QString m_units_black;
    bool m_units_black_isSet;
    bool m_units_black_isValid;

    QString m_units_gain;
    bool m_units_gain_isSet;
    bool m_units_gain_isValid;

    QString m_units_gamma;
    bool m_units_gamma_isSet;
    bool m_units_gamma_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIColorCorrector)

#endif // OAIColorCorrector_H
