/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStage::OAIStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStage::OAIStage() {
    this->initializeModel();
}

OAIStage::~OAIStage() {}

void OAIStage::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_dynamic_isSet = false;
    m_dynamic_isValid = false;

    m_library_entry_isSet = false;
    m_library_entry_isValid = false;

    m_color_corrector_isSet = false;
    m_color_corrector_isValid = false;

    m_proc_amp_isSet = false;
    m_proc_amp_isValid = false;
}

void OAIStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStage::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_dynamic_isValid = ::OpenAPI::fromJsonValue(m_dynamic, json[QString("dynamic")]);
    m_dynamic_isSet = !json[QString("dynamic")].isNull() && m_dynamic_isValid;

    m_library_entry_isValid = ::OpenAPI::fromJsonValue(m_library_entry, json[QString("libraryEntry")]);
    m_library_entry_isSet = !json[QString("libraryEntry")].isNull() && m_library_entry_isValid;

    m_color_corrector_isValid = ::OpenAPI::fromJsonValue(m_color_corrector, json[QString("colorCorrector")]);
    m_color_corrector_isSet = !json[QString("colorCorrector")].isNull() && m_color_corrector_isValid;

    m_proc_amp_isValid = ::OpenAPI::fromJsonValue(m_proc_amp, json[QString("procAmp")]);
    m_proc_amp_isSet = !json[QString("procAmp")].isNull() && m_proc_amp_isValid;

    applyMinMaxConstraints();
}

QString OAIStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStage::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_dynamic_isSet) {
        obj.insert(QString("dynamic"), ::OpenAPI::toJsonValue(m_dynamic));
    }
    if (m_library_entry_isSet) {
        obj.insert(QString("libraryEntry"), ::OpenAPI::toJsonValue(m_library_entry));
    }
    if (m_color_corrector.isSet()) {
        obj.insert(QString("colorCorrector"), ::OpenAPI::toJsonValue(m_color_corrector));
    }
    if (m_proc_amp.isSet()) {
        obj.insert(QString("procAmp"), ::OpenAPI::toJsonValue(m_proc_amp));
    }
    return obj;
}

bool OAIStage::isEnabled() const {
    return m_enabled;
}
void OAIStage::setEnabled(const bool &enabled) {
	bool v = enabled;
	this->m_enabled = v;
    this->m_enabled_isSet = true;
}

bool OAIStage::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIStage::is_enabled_Valid() const{
    return m_enabled_isValid;
}


bool OAIStage::isDynamic() const {
    return m_dynamic;
}
void OAIStage::setDynamic(const bool &dynamic) {
	bool v = dynamic;
	this->m_dynamic = v;
    this->m_dynamic_isSet = true;
}

bool OAIStage::is_dynamic_Set() const{
    return m_dynamic_isSet;
}

bool OAIStage::is_dynamic_Valid() const{
    return m_dynamic_isValid;
}


qint32 OAIStage::getLibraryEntry() const {
    return m_library_entry;
}
void OAIStage::setLibraryEntry(const qint32 &library_entry) {
	qint32 v = library_entry;
	this->m_library_entry = v;
    this->m_library_entry_isSet = true;
}

bool OAIStage::is_library_entry_Set() const{
    return m_library_entry_isSet;
}

bool OAIStage::is_library_entry_Valid() const{
    return m_library_entry_isValid;
}



OAIColorCorrector OAIStage::getColorCorrector() const {
    return m_color_corrector;
}
void OAIStage::setColorCorrector(const OAIColorCorrector &color_corrector) {
	OAIColorCorrector v = color_corrector;
	this->m_color_corrector = v;
    this->m_color_corrector_isSet = true;
}

bool OAIStage::is_color_corrector_Set() const{
    return m_color_corrector_isSet;
}

bool OAIStage::is_color_corrector_Valid() const{
    return m_color_corrector_isValid;
}


OAIProcAmp OAIStage::getProcAmp() const {
    return m_proc_amp;
}
void OAIStage::setProcAmp(const OAIProcAmp &proc_amp) {
	OAIProcAmp v = proc_amp;
	this->m_proc_amp = v;
    this->m_proc_amp_isSet = true;
}

bool OAIStage::is_proc_amp_Set() const{
    return m_proc_amp_isSet;
}

bool OAIStage::is_proc_amp_Valid() const{
    return m_proc_amp_isValid;
}


bool OAIStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_corrector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_amp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIStage::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_library_entry_Set())
	{
		bool libraryEntryChanged = false;
		qint32 v = getLibraryEntry();
		if (libraryEntryChanged) { setLibraryEntry(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
