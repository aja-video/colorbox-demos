/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIColorfrontDynRangeGamutTvModeOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorfrontDynRangeGamutTvModeOut::OAIColorfrontDynRangeGamutTvModeOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorfrontDynRangeGamutTvModeOut::OAIColorfrontDynRangeGamutTvModeOut() {
    this->initializeModel();
}

OAIColorfrontDynRangeGamutTvModeOut::~OAIColorfrontDynRangeGamutTvModeOut() {}

void OAIColorfrontDynRangeGamutTvModeOut::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColorfrontDynRangeGamutTvModeOut::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColorfrontDynRangeGamutTvModeOut::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SDR BT.709", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutTvModeOut::SDR_BT_709;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG BT.2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutTvModeOut::HLG_BT_2020;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ BT.2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutTvModeOut::PQ_BT_2020;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ BT.2020 ConstrainP3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutTvModeOut::PQ_BT_2020_CONSTRAINP3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sony SLog3 BT.2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorfrontDynRangeGamutTvModeOut::SONY_SLOG3_BT_2020;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColorfrontDynRangeGamutTvModeOut::fromJsonValue(QJsonValue json) {
fromJson(json.toString());

    applyMinMaxConstraints();
}

QString OAIColorfrontDynRangeGamutTvModeOut::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColorfrontDynRangeGamutTvModeOut::SDR_BT_709:
            val = "SDR BT.709";
            break;
        case eOAIColorfrontDynRangeGamutTvModeOut::HLG_BT_2020:
            val = "HLG BT.2020";
            break;
        case eOAIColorfrontDynRangeGamutTvModeOut::PQ_BT_2020:
            val = "PQ BT.2020";
            break;
        case eOAIColorfrontDynRangeGamutTvModeOut::PQ_BT_2020_CONSTRAINP3:
            val = "PQ BT.2020 ConstrainP3";
            break;
        case eOAIColorfrontDynRangeGamutTvModeOut::SONY_SLOG3_BT_2020:
            val = "Sony SLog3 BT.2020";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColorfrontDynRangeGamutTvModeOut::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColorfrontDynRangeGamutTvModeOut::eOAIColorfrontDynRangeGamutTvModeOut OAIColorfrontDynRangeGamutTvModeOut::getValue() const {
    return m_value;
}

void OAIColorfrontDynRangeGamutTvModeOut::setValue(const OAIColorfrontDynRangeGamutTvModeOut::eOAIColorfrontDynRangeGamutTvModeOut& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColorfrontDynRangeGamutTvModeOut::isSet() const {
    
    return m_value_isSet;
}

bool OAIColorfrontDynRangeGamutTvModeOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

bool OAIColorfrontDynRangeGamutTvModeOut::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
