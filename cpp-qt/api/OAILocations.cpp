/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAILocations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocations::OAILocations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocations::OAILocations() {
    this->initializeModel();
}

OAILocations::~OAILocations() {}

void OAILocations::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocations::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocations::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Top Left", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::TOP_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Top Center", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::TOP_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Top Right", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::TOP_RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bottom Left", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::BOTTOM_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bottom Center", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::BOTTOM_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bottom Right", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocations::BOTTOM_RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocations::fromJsonValue(QJsonValue json) {
fromJson(json.toString());

    applyMinMaxConstraints();
}

QString OAILocations::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocations::TOP_LEFT:
            val = "Top Left";
            break;
        case eOAILocations::TOP_CENTER:
            val = "Top Center";
            break;
        case eOAILocations::TOP_RIGHT:
            val = "Top Right";
            break;
        case eOAILocations::BOTTOM_LEFT:
            val = "Bottom Left";
            break;
        case eOAILocations::BOTTOM_CENTER:
            val = "Bottom Center";
            break;
        case eOAILocations::BOTTOM_RIGHT:
            val = "Bottom Right";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocations::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocations::eOAILocations OAILocations::getValue() const {
    return m_value;
}

void OAILocations::setValue(const OAILocations::eOAILocations& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocations::isSet() const {
    
    return m_value_isSet;
}

bool OAILocations::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

bool OAILocations::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
