/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIRouting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouting::OAIRouting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouting::OAIRouting() {
    this->initializeModel();
}

OAIRouting::~OAIRouting() {}

void OAIRouting::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_preview_tap_isSet = false;
    m_preview_tap_isValid = false;

    m_pipeline_bypass_button_isSet = false;
    m_pipeline_bypass_button_isValid = false;

    m_pipeline_bypass_user_isSet = false;
    m_pipeline_bypass_user_isValid = false;
}

void OAIRouting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouting::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_preview_tap_isValid = ::OpenAPI::fromJsonValue(m_preview_tap, json[QString("previewTap")]);
    m_preview_tap_isSet = !json[QString("previewTap")].isNull() && m_preview_tap_isValid;

    m_pipeline_bypass_button_isValid = ::OpenAPI::fromJsonValue(m_pipeline_bypass_button, json[QString("pipelineBypassButton")]);
    m_pipeline_bypass_button_isSet = !json[QString("pipelineBypassButton")].isNull() && m_pipeline_bypass_button_isValid;

    m_pipeline_bypass_user_isValid = ::OpenAPI::fromJsonValue(m_pipeline_bypass_user, json[QString("pipelineBypassUser")]);
    m_pipeline_bypass_user_isSet = !json[QString("pipelineBypassUser")].isNull() && m_pipeline_bypass_user_isValid;

    applyMinMaxConstraints();
}

QString OAIRouting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouting::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_preview_tap.isSet()) {
        obj.insert(QString("previewTap"), ::OpenAPI::toJsonValue(m_preview_tap));
    }
    if (m_pipeline_bypass_button_isSet) {
        obj.insert(QString("pipelineBypassButton"), ::OpenAPI::toJsonValue(m_pipeline_bypass_button));
    }
    if (m_pipeline_bypass_user_isSet) {
        obj.insert(QString("pipelineBypassUser"), ::OpenAPI::toJsonValue(m_pipeline_bypass_user));
    }
    return obj;
}

OAIMode OAIRouting::getMode() const {
    return m_mode;
}
void OAIRouting::setMode(const OAIMode &mode) {
	OAIMode v = mode;
	this->m_mode = v;
    this->m_mode_isSet = true;
}

bool OAIRouting::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIRouting::is_mode_Valid() const{
    return m_mode_isValid;
}


OAIPreviewTap OAIRouting::getPreviewTap() const {
    return m_preview_tap;
}
void OAIRouting::setPreviewTap(const OAIPreviewTap &preview_tap) {
	OAIPreviewTap v = preview_tap;
	this->m_preview_tap = v;
    this->m_preview_tap_isSet = true;
}

bool OAIRouting::is_preview_tap_Set() const{
    return m_preview_tap_isSet;
}

bool OAIRouting::is_preview_tap_Valid() const{
    return m_preview_tap_isValid;
}


bool OAIRouting::isPipelineBypassButton() const {
    return m_pipeline_bypass_button;
}
void OAIRouting::setPipelineBypassButton(const bool &pipeline_bypass_button) {
	bool v = pipeline_bypass_button;
	this->m_pipeline_bypass_button = v;
    this->m_pipeline_bypass_button_isSet = true;
}

bool OAIRouting::is_pipeline_bypass_button_Set() const{
    return m_pipeline_bypass_button_isSet;
}

bool OAIRouting::is_pipeline_bypass_button_Valid() const{
    return m_pipeline_bypass_button_isValid;
}


bool OAIRouting::isPipelineBypassUser() const {
    return m_pipeline_bypass_user;
}
void OAIRouting::setPipelineBypassUser(const bool &pipeline_bypass_user) {
	bool v = pipeline_bypass_user;
	this->m_pipeline_bypass_user = v;
    this->m_pipeline_bypass_user_isSet = true;
}

bool OAIRouting::is_pipeline_bypass_user_Set() const{
    return m_pipeline_bypass_user_isSet;
}

bool OAIRouting::is_pipeline_bypass_user_Valid() const{
    return m_pipeline_bypass_user_isValid;
}


bool OAIRouting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_tap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_bypass_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_bypass_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIRouting::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
