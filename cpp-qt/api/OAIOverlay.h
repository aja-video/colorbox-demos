/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * OAIOverlay.h
 *
 * 
 */

#ifndef OAIOverlay_H
#define OAIOverlay_H

#include <QJsonObject>

#include "OAILocations.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOverlay : public OAIObject {
public:
    OAIOverlay();
    OAIOverlay(QString json);
    ~OAIOverlay() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isInVpidFormat() const;
    void setInVpidFormat(const bool &in_vpid_format);
    bool is_in_vpid_format_Set() const;
    bool is_in_vpid_format_Valid() const;

    bool isInVpidRange() const;
    void setInVpidRange(const bool &in_vpid_range);
    bool is_in_vpid_range_Set() const;
    bool is_in_vpid_range_Valid() const;

    bool isInVpidHdr() const;
    void setInVpidHdr(const bool &in_vpid_hdr);
    bool is_in_vpid_hdr_Set() const;
    bool is_in_vpid_hdr_Valid() const;

    bool isInVpidBitDepth() const;
    void setInVpidBitDepth(const bool &in_vpid_bit_depth);
    bool is_in_vpid_bit_depth_Set() const;
    bool is_in_vpid_bit_depth_Valid() const;

    bool isOutVpidFormat() const;
    void setOutVpidFormat(const bool &out_vpid_format);
    bool is_out_vpid_format_Set() const;
    bool is_out_vpid_format_Valid() const;

    bool isOutVpidRange() const;
    void setOutVpidRange(const bool &out_vpid_range);
    bool is_out_vpid_range_Set() const;
    bool is_out_vpid_range_Valid() const;

    bool isOutVpidHdr() const;
    void setOutVpidHdr(const bool &out_vpid_hdr);
    bool is_out_vpid_hdr_Set() const;
    bool is_out_vpid_hdr_Valid() const;

    bool isOutVpidBitDepth() const;
    void setOutVpidBitDepth(const bool &out_vpid_bit_depth);
    bool is_out_vpid_bit_depth_Set() const;
    bool is_out_vpid_bit_depth_Valid() const;

    bool isTimeCode() const;
    void setTimeCode(const bool &time_code);
    bool is_time_code_Set() const;
    bool is_time_code_Valid() const;

    bool isClosedCaption() const;
    void setClosedCaption(const bool &closed_caption);
    bool is_closed_caption_Set() const;
    bool is_closed_caption_Valid() const;

    bool isUserTextEnabled() const;
    void setUserTextEnabled(const bool &user_text_enabled);
    bool is_user_text_enabled_Set() const;
    bool is_user_text_enabled_Valid() const;

    QString getUserTextLine1() const;
    void setUserTextLine1(const QString &user_text_line1);
    bool is_user_text_line1_Set() const;
    bool is_user_text_line1_Valid() const;
    int userTextLine1Min() const;
    int userTextLine1Max() const;

    QString getUserTextLine2() const;
    void setUserTextLine2(const QString &user_text_line2);
    bool is_user_text_line2_Set() const;
    bool is_user_text_line2_Valid() const;
    int userTextLine2Min() const;
    int userTextLine2Max() const;

    bool isPipelineConfig() const;
    void setPipelineConfig(const bool &pipeline_config);
    bool is_pipeline_config_Set() const;
    bool is_pipeline_config_Valid() const;

    OAILocations getLocation() const;
    void setLocation(const OAILocations &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

    bool applyMinMaxConstraints();
private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_in_vpid_format;
    bool m_in_vpid_format_isSet;
    bool m_in_vpid_format_isValid;

    bool m_in_vpid_range;
    bool m_in_vpid_range_isSet;
    bool m_in_vpid_range_isValid;

    bool m_in_vpid_hdr;
    bool m_in_vpid_hdr_isSet;
    bool m_in_vpid_hdr_isValid;

    bool m_in_vpid_bit_depth;
    bool m_in_vpid_bit_depth_isSet;
    bool m_in_vpid_bit_depth_isValid;

    bool m_out_vpid_format;
    bool m_out_vpid_format_isSet;
    bool m_out_vpid_format_isValid;

    bool m_out_vpid_range;
    bool m_out_vpid_range_isSet;
    bool m_out_vpid_range_isValid;

    bool m_out_vpid_hdr;
    bool m_out_vpid_hdr_isSet;
    bool m_out_vpid_hdr_isValid;

    bool m_out_vpid_bit_depth;
    bool m_out_vpid_bit_depth_isSet;
    bool m_out_vpid_bit_depth_isValid;

    bool m_time_code;
    bool m_time_code_isSet;
    bool m_time_code_isValid;

    bool m_closed_caption;
    bool m_closed_caption_isSet;
    bool m_closed_caption_isValid;

    bool m_user_text_enabled;
    bool m_user_text_enabled_isSet;
    bool m_user_text_enabled_isValid;

    QString m_user_text_line1;
    bool m_user_text_line1_isSet;
    bool m_user_text_line1_isValid;

    QString m_user_text_line2;
    bool m_user_text_line2_isSet;
    bool m_user_text_line2_isValid;

    bool m_pipeline_config;
    bool m_pipeline_config_isSet;
    bool m_pipeline_config_isValid;

    OAILocations m_location;
    bool m_location_isSet;
    bool m_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOverlay)

#endif // OAIOverlay_H
