/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIFrameStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameStore::OAIFrameStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameStore::OAIFrameStore() {
    this->initializeModel();
}

OAIFrameStore::~OAIFrameStore() {}

void OAIFrameStore::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_dynamic_isSet = false;
    m_dynamic_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_timecode_appended_isSet = false;
    m_timecode_appended_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_library_entry_isSet = false;
    m_library_entry_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_convert_isSet = false;
    m_convert_isValid = false;

    m_rgb_range_isSet = false;
    m_rgb_range_isValid = false;
}

void OAIFrameStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameStore::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_dynamic_isValid = ::OpenAPI::fromJsonValue(m_dynamic, json[QString("dynamic")]);
    m_dynamic_isSet = !json[QString("dynamic")].isNull() && m_dynamic_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("imageName")]);
    m_image_name_isSet = !json[QString("imageName")].isNull() && m_image_name_isValid;

    m_timecode_appended_isValid = ::OpenAPI::fromJsonValue(m_timecode_appended, json[QString("timecodeAppended")]);
    m_timecode_appended_isSet = !json[QString("timecodeAppended")].isNull() && m_timecode_appended_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_library_entry_isValid = ::OpenAPI::fromJsonValue(m_library_entry, json[QString("libraryEntry")]);
    m_library_entry_isSet = !json[QString("libraryEntry")].isNull() && m_library_entry_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_convert_isValid = ::OpenAPI::fromJsonValue(m_convert, json[QString("convert")]);
    m_convert_isSet = !json[QString("convert")].isNull() && m_convert_isValid;

    m_rgb_range_isValid = ::OpenAPI::fromJsonValue(m_rgb_range, json[QString("rgbRange")]);
    m_rgb_range_isSet = !json[QString("rgbRange")].isNull() && m_rgb_range_isValid;

    applyMinMaxConstraints();
}

QString OAIFrameStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameStore::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_dynamic_isSet) {
        obj.insert(QString("dynamic"), ::OpenAPI::toJsonValue(m_dynamic));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("imageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_timecode_appended_isSet) {
        obj.insert(QString("timecodeAppended"), ::OpenAPI::toJsonValue(m_timecode_appended));
    }
    if (m_file_type.isSet()) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_library_entry_isSet) {
        obj.insert(QString("libraryEntry"), ::OpenAPI::toJsonValue(m_library_entry));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_convert.isSet()) {
        obj.insert(QString("convert"), ::OpenAPI::toJsonValue(m_convert));
    }
    if (m_rgb_range.isSet()) {
        obj.insert(QString("rgbRange"), ::OpenAPI::toJsonValue(m_rgb_range));
    }
    return obj;
}

bool OAIFrameStore::isEnabled() const {
    return m_enabled;
}
void OAIFrameStore::setEnabled(const bool &enabled) {
	bool v = enabled;
	this->m_enabled = v;
    this->m_enabled_isSet = true;
}

bool OAIFrameStore::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFrameStore::is_enabled_Valid() const{
    return m_enabled_isValid;
}


bool OAIFrameStore::isDynamic() const {
    return m_dynamic;
}
void OAIFrameStore::setDynamic(const bool &dynamic) {
	bool v = dynamic;
	this->m_dynamic = v;
    this->m_dynamic_isSet = true;
}

bool OAIFrameStore::is_dynamic_Set() const{
    return m_dynamic_isSet;
}

bool OAIFrameStore::is_dynamic_Valid() const{
    return m_dynamic_isValid;
}


QString OAIFrameStore::getImageName() const {
    return m_image_name;
}
void OAIFrameStore::setImageName(const QString &image_name) {
	QString v = image_name;
	this->m_image_name = v;
    this->m_image_name_isSet = true;
}

bool OAIFrameStore::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIFrameStore::is_image_name_Valid() const{
    return m_image_name_isValid;
}



bool OAIFrameStore::isTimecodeAppended() const {
    return m_timecode_appended;
}
void OAIFrameStore::setTimecodeAppended(const bool &timecode_appended) {
	bool v = timecode_appended;
	this->m_timecode_appended = v;
    this->m_timecode_appended_isSet = true;
}

bool OAIFrameStore::is_timecode_appended_Set() const{
    return m_timecode_appended_isSet;
}

bool OAIFrameStore::is_timecode_appended_Valid() const{
    return m_timecode_appended_isValid;
}


OAIFileTypeChoice OAIFrameStore::getFileType() const {
    return m_file_type;
}
void OAIFrameStore::setFileType(const OAIFileTypeChoice &file_type) {
	OAIFileTypeChoice v = file_type;
	this->m_file_type = v;
    this->m_file_type_isSet = true;
}

bool OAIFrameStore::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIFrameStore::is_file_type_Valid() const{
    return m_file_type_isValid;
}


qint32 OAIFrameStore::getLibraryEntry() const {
    return m_library_entry;
}
void OAIFrameStore::setLibraryEntry(const qint32 &library_entry) {
	qint32 v = library_entry;
	this->m_library_entry = v;
    this->m_library_entry_isSet = true;
}

bool OAIFrameStore::is_library_entry_Set() const{
    return m_library_entry_isSet;
}

bool OAIFrameStore::is_library_entry_Valid() const{
    return m_library_entry_isValid;
}



OAIVideoFormat OAIFrameStore::getFormat() const {
    return m_format;
}
void OAIFrameStore::setFormat(const OAIVideoFormat &format) {
	OAIVideoFormat v = format;
	this->m_format = v;
    this->m_format_isSet = true;
}

bool OAIFrameStore::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFrameStore::is_format_Valid() const{
    return m_format_isValid;
}


OAIVideoConvertChoice OAIFrameStore::getConvert() const {
    return m_convert;
}
void OAIFrameStore::setConvert(const OAIVideoConvertChoice &convert) {
	OAIVideoConvertChoice v = convert;
	this->m_convert = v;
    this->m_convert_isSet = true;
}

bool OAIFrameStore::is_convert_Set() const{
    return m_convert_isSet;
}

bool OAIFrameStore::is_convert_Valid() const{
    return m_convert_isValid;
}


OAIRgbRange OAIFrameStore::getRgbRange() const {
    return m_rgb_range;
}
void OAIFrameStore::setRgbRange(const OAIRgbRange &rgb_range) {
	OAIRgbRange v = rgb_range;
	this->m_rgb_range = v;
    this->m_rgb_range_isSet = true;
}

bool OAIFrameStore::is_rgb_range_Set() const{
    return m_rgb_range_isSet;
}

bool OAIFrameStore::is_rgb_range_Valid() const{
    return m_rgb_range_isValid;
}


bool OAIFrameStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_appended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rgb_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIFrameStore::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_image_name_Set())
	{
		bool imageNameChanged = false;
		QString v = getImageName();
		if (imageNameChanged) { setImageName(v); anyMinMaxValueChanged = true; }
	}
	if (is_library_entry_Set())
	{
		bool libraryEntryChanged = false;
		qint32 v = getLibraryEntry();
		if (libraryEntryChanged) { setLibraryEntry(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
