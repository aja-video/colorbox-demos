/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIPipelineStages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineStages::OAIPipelineStages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineStages::OAIPipelineStages() {
    this->initializeModel();
}

OAIPipelineStages::~OAIPipelineStages() {}

void OAIPipelineStages::initializeModel() {

    m_lut1d_1_isSet = false;
    m_lut1d_1_isValid = false;

    m_m3x3_2_isSet = false;
    m_m3x3_2_isValid = false;

    m_lut1d_2_isSet = false;
    m_lut1d_2_isValid = false;

    m_lut3d_1_isSet = false;
    m_lut3d_1_isValid = false;

    m_lut1d_3_isSet = false;
    m_lut1d_3_isValid = false;

    m_m3x3_3_isSet = false;
    m_m3x3_3_isValid = false;

    m_lut1d_4_isSet = false;
    m_lut1d_4_isValid = false;

    m_in_colorimetry_isSet = false;
    m_in_colorimetry_isValid = false;

    m_in_range_isSet = false;
    m_in_range_isValid = false;

    m_out_colorimetry_isSet = false;
    m_out_colorimetry_isValid = false;

    m_out_range_isSet = false;
    m_out_range_isValid = false;

    m_transfer_characteristic_isSet = false;
    m_transfer_characteristic_isValid = false;

    m_csc_filter_isSet = false;
    m_csc_filter_isValid = false;
}

void OAIPipelineStages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineStages::fromJsonObject(QJsonObject json) {

    m_lut1d_1_isValid = ::OpenAPI::fromJsonValue(m_lut1d_1, json[QString("lut1d_1")]);
    m_lut1d_1_isSet = !json[QString("lut1d_1")].isNull() && m_lut1d_1_isValid;

    m_m3x3_2_isValid = ::OpenAPI::fromJsonValue(m_m3x3_2, json[QString("m3x3_2")]);
    m_m3x3_2_isSet = !json[QString("m3x3_2")].isNull() && m_m3x3_2_isValid;

    m_lut1d_2_isValid = ::OpenAPI::fromJsonValue(m_lut1d_2, json[QString("lut1d_2")]);
    m_lut1d_2_isSet = !json[QString("lut1d_2")].isNull() && m_lut1d_2_isValid;

    m_lut3d_1_isValid = ::OpenAPI::fromJsonValue(m_lut3d_1, json[QString("lut3d_1")]);
    m_lut3d_1_isSet = !json[QString("lut3d_1")].isNull() && m_lut3d_1_isValid;

    m_lut1d_3_isValid = ::OpenAPI::fromJsonValue(m_lut1d_3, json[QString("lut1d_3")]);
    m_lut1d_3_isSet = !json[QString("lut1d_3")].isNull() && m_lut1d_3_isValid;

    m_m3x3_3_isValid = ::OpenAPI::fromJsonValue(m_m3x3_3, json[QString("m3x3_3")]);
    m_m3x3_3_isSet = !json[QString("m3x3_3")].isNull() && m_m3x3_3_isValid;

    m_lut1d_4_isValid = ::OpenAPI::fromJsonValue(m_lut1d_4, json[QString("lut1d_4")]);
    m_lut1d_4_isSet = !json[QString("lut1d_4")].isNull() && m_lut1d_4_isValid;

    m_in_colorimetry_isValid = ::OpenAPI::fromJsonValue(m_in_colorimetry, json[QString("inColorimetry")]);
    m_in_colorimetry_isSet = !json[QString("inColorimetry")].isNull() && m_in_colorimetry_isValid;

    m_in_range_isValid = ::OpenAPI::fromJsonValue(m_in_range, json[QString("inRange")]);
    m_in_range_isSet = !json[QString("inRange")].isNull() && m_in_range_isValid;

    m_out_colorimetry_isValid = ::OpenAPI::fromJsonValue(m_out_colorimetry, json[QString("outColorimetry")]);
    m_out_colorimetry_isSet = !json[QString("outColorimetry")].isNull() && m_out_colorimetry_isValid;

    m_out_range_isValid = ::OpenAPI::fromJsonValue(m_out_range, json[QString("outRange")]);
    m_out_range_isSet = !json[QString("outRange")].isNull() && m_out_range_isValid;

    m_transfer_characteristic_isValid = ::OpenAPI::fromJsonValue(m_transfer_characteristic, json[QString("transferCharacteristic")]);
    m_transfer_characteristic_isSet = !json[QString("transferCharacteristic")].isNull() && m_transfer_characteristic_isValid;

    m_csc_filter_isValid = ::OpenAPI::fromJsonValue(m_csc_filter, json[QString("cscFilter")]);
    m_csc_filter_isSet = !json[QString("cscFilter")].isNull() && m_csc_filter_isValid;

    applyMinMaxConstraints();
}

QString OAIPipelineStages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineStages::asJsonObject() const {
    QJsonObject obj;
    if (m_lut1d_1.isSet()) {
        obj.insert(QString("lut1d_1"), ::OpenAPI::toJsonValue(m_lut1d_1));
    }
    if (m_m3x3_2.isSet()) {
        obj.insert(QString("m3x3_2"), ::OpenAPI::toJsonValue(m_m3x3_2));
    }
    if (m_lut1d_2.isSet()) {
        obj.insert(QString("lut1d_2"), ::OpenAPI::toJsonValue(m_lut1d_2));
    }
    if (m_lut3d_1.isSet()) {
        obj.insert(QString("lut3d_1"), ::OpenAPI::toJsonValue(m_lut3d_1));
    }
    if (m_lut1d_3.isSet()) {
        obj.insert(QString("lut1d_3"), ::OpenAPI::toJsonValue(m_lut1d_3));
    }
    if (m_m3x3_3.isSet()) {
        obj.insert(QString("m3x3_3"), ::OpenAPI::toJsonValue(m_m3x3_3));
    }
    if (m_lut1d_4.isSet()) {
        obj.insert(QString("lut1d_4"), ::OpenAPI::toJsonValue(m_lut1d_4));
    }
    if (m_in_colorimetry.isSet()) {
        obj.insert(QString("inColorimetry"), ::OpenAPI::toJsonValue(m_in_colorimetry));
    }
    if (m_in_range.isSet()) {
        obj.insert(QString("inRange"), ::OpenAPI::toJsonValue(m_in_range));
    }
    if (m_out_colorimetry.isSet()) {
        obj.insert(QString("outColorimetry"), ::OpenAPI::toJsonValue(m_out_colorimetry));
    }
    if (m_out_range.isSet()) {
        obj.insert(QString("outRange"), ::OpenAPI::toJsonValue(m_out_range));
    }
    if (m_transfer_characteristic.isSet()) {
        obj.insert(QString("transferCharacteristic"), ::OpenAPI::toJsonValue(m_transfer_characteristic));
    }
    if (m_csc_filter.isSet()) {
        obj.insert(QString("cscFilter"), ::OpenAPI::toJsonValue(m_csc_filter));
    }
    return obj;
}

OAIStage OAIPipelineStages::getLut1d1() const {
    return m_lut1d_1;
}
void OAIPipelineStages::setLut1d1(const OAIStage &lut1d_1) {
	OAIStage v = lut1d_1;
	this->m_lut1d_1 = v;
    this->m_lut1d_1_isSet = true;
}

bool OAIPipelineStages::is_lut1d_1_Set() const{
    return m_lut1d_1_isSet;
}

bool OAIPipelineStages::is_lut1d_1_Valid() const{
    return m_lut1d_1_isValid;
}


OAIStage OAIPipelineStages::getM3x32() const {
    return m_m3x3_2;
}
void OAIPipelineStages::setM3x32(const OAIStage &m3x3_2) {
	OAIStage v = m3x3_2;
	this->m_m3x3_2 = v;
    this->m_m3x3_2_isSet = true;
}

bool OAIPipelineStages::is_m3x3_2_Set() const{
    return m_m3x3_2_isSet;
}

bool OAIPipelineStages::is_m3x3_2_Valid() const{
    return m_m3x3_2_isValid;
}


OAIStage OAIPipelineStages::getLut1d2() const {
    return m_lut1d_2;
}
void OAIPipelineStages::setLut1d2(const OAIStage &lut1d_2) {
	OAIStage v = lut1d_2;
	this->m_lut1d_2 = v;
    this->m_lut1d_2_isSet = true;
}

bool OAIPipelineStages::is_lut1d_2_Set() const{
    return m_lut1d_2_isSet;
}

bool OAIPipelineStages::is_lut1d_2_Valid() const{
    return m_lut1d_2_isValid;
}


OAIStage OAIPipelineStages::getLut3d1() const {
    return m_lut3d_1;
}
void OAIPipelineStages::setLut3d1(const OAIStage &lut3d_1) {
	OAIStage v = lut3d_1;
	this->m_lut3d_1 = v;
    this->m_lut3d_1_isSet = true;
}

bool OAIPipelineStages::is_lut3d_1_Set() const{
    return m_lut3d_1_isSet;
}

bool OAIPipelineStages::is_lut3d_1_Valid() const{
    return m_lut3d_1_isValid;
}


OAIStage OAIPipelineStages::getLut1d3() const {
    return m_lut1d_3;
}
void OAIPipelineStages::setLut1d3(const OAIStage &lut1d_3) {
	OAIStage v = lut1d_3;
	this->m_lut1d_3 = v;
    this->m_lut1d_3_isSet = true;
}

bool OAIPipelineStages::is_lut1d_3_Set() const{
    return m_lut1d_3_isSet;
}

bool OAIPipelineStages::is_lut1d_3_Valid() const{
    return m_lut1d_3_isValid;
}


OAIStage OAIPipelineStages::getM3x33() const {
    return m_m3x3_3;
}
void OAIPipelineStages::setM3x33(const OAIStage &m3x3_3) {
	OAIStage v = m3x3_3;
	this->m_m3x3_3 = v;
    this->m_m3x3_3_isSet = true;
}

bool OAIPipelineStages::is_m3x3_3_Set() const{
    return m_m3x3_3_isSet;
}

bool OAIPipelineStages::is_m3x3_3_Valid() const{
    return m_m3x3_3_isValid;
}


OAIStage OAIPipelineStages::getLut1d4() const {
    return m_lut1d_4;
}
void OAIPipelineStages::setLut1d4(const OAIStage &lut1d_4) {
	OAIStage v = lut1d_4;
	this->m_lut1d_4 = v;
    this->m_lut1d_4_isSet = true;
}

bool OAIPipelineStages::is_lut1d_4_Set() const{
    return m_lut1d_4_isSet;
}

bool OAIPipelineStages::is_lut1d_4_Valid() const{
    return m_lut1d_4_isValid;
}


OAIColorimetry OAIPipelineStages::getInColorimetry() const {
    return m_in_colorimetry;
}
void OAIPipelineStages::setInColorimetry(const OAIColorimetry &in_colorimetry) {
	OAIColorimetry v = in_colorimetry;
	this->m_in_colorimetry = v;
    this->m_in_colorimetry_isSet = true;
}

bool OAIPipelineStages::is_in_colorimetry_Set() const{
    return m_in_colorimetry_isSet;
}

bool OAIPipelineStages::is_in_colorimetry_Valid() const{
    return m_in_colorimetry_isValid;
}


OAIPipelineRange OAIPipelineStages::getInRange() const {
    return m_in_range;
}
void OAIPipelineStages::setInRange(const OAIPipelineRange &in_range) {
	OAIPipelineRange v = in_range;
	this->m_in_range = v;
    this->m_in_range_isSet = true;
}

bool OAIPipelineStages::is_in_range_Set() const{
    return m_in_range_isSet;
}

bool OAIPipelineStages::is_in_range_Valid() const{
    return m_in_range_isValid;
}


OAIColorimetry OAIPipelineStages::getOutColorimetry() const {
    return m_out_colorimetry;
}
void OAIPipelineStages::setOutColorimetry(const OAIColorimetry &out_colorimetry) {
	OAIColorimetry v = out_colorimetry;
	this->m_out_colorimetry = v;
    this->m_out_colorimetry_isSet = true;
}

bool OAIPipelineStages::is_out_colorimetry_Set() const{
    return m_out_colorimetry_isSet;
}

bool OAIPipelineStages::is_out_colorimetry_Valid() const{
    return m_out_colorimetry_isValid;
}


OAIPipelineRange OAIPipelineStages::getOutRange() const {
    return m_out_range;
}
void OAIPipelineStages::setOutRange(const OAIPipelineRange &out_range) {
	OAIPipelineRange v = out_range;
	this->m_out_range = v;
    this->m_out_range_isSet = true;
}

bool OAIPipelineStages::is_out_range_Set() const{
    return m_out_range_isSet;
}

bool OAIPipelineStages::is_out_range_Valid() const{
    return m_out_range_isValid;
}


OAITransfer OAIPipelineStages::getTransferCharacteristic() const {
    return m_transfer_characteristic;
}
void OAIPipelineStages::setTransferCharacteristic(const OAITransfer &transfer_characteristic) {
	OAITransfer v = transfer_characteristic;
	this->m_transfer_characteristic = v;
    this->m_transfer_characteristic_isSet = true;
}

bool OAIPipelineStages::is_transfer_characteristic_Set() const{
    return m_transfer_characteristic_isSet;
}

bool OAIPipelineStages::is_transfer_characteristic_Valid() const{
    return m_transfer_characteristic_isValid;
}


OAICSCFilter OAIPipelineStages::getCscFilter() const {
    return m_csc_filter;
}
void OAIPipelineStages::setCscFilter(const OAICSCFilter &csc_filter) {
	OAICSCFilter v = csc_filter;
	this->m_csc_filter = v;
    this->m_csc_filter_isSet = true;
}

bool OAIPipelineStages::is_csc_filter_Set() const{
    return m_csc_filter_isSet;
}

bool OAIPipelineStages::is_csc_filter_Valid() const{
    return m_csc_filter_isValid;
}


bool OAIPipelineStages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lut1d_1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m3x3_2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lut1d_2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lut3d_1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lut1d_3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m3x3_3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lut1d_4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_colorimetry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_colorimetry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_characteristic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csc_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineStages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIPipelineStages::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
