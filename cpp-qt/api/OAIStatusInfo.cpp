/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIStatusInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusInfo::OAIStatusInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusInfo::OAIStatusInfo() {
    this->initializeModel();
}

OAIStatusInfo::~OAIStatusInfo() {}

void OAIStatusInfo::initializeModel() {

    m_upper_bound_good_isSet = false;
    m_upper_bound_good_isValid = false;

    m_upper_bound_maybe_isSet = false;
    m_upper_bound_maybe_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_int_isSet = false;
    m_value_int_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_extra_value_isSet = false;
    m_extra_value_isValid = false;

    m_extra_label_isSet = false;
    m_extra_label_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIStatusInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusInfo::fromJsonObject(QJsonObject json) {

    m_upper_bound_good_isValid = ::OpenAPI::fromJsonValue(m_upper_bound_good, json[QString("upperBoundGood")]);
    m_upper_bound_good_isSet = !json[QString("upperBoundGood")].isNull() && m_upper_bound_good_isValid;

    m_upper_bound_maybe_isValid = ::OpenAPI::fromJsonValue(m_upper_bound_maybe, json[QString("upperBoundMaybe")]);
    m_upper_bound_maybe_isSet = !json[QString("upperBoundMaybe")].isNull() && m_upper_bound_maybe_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_int_isValid = ::OpenAPI::fromJsonValue(m_value_int, json[QString("valueInt")]);
    m_value_int_isSet = !json[QString("valueInt")].isNull() && m_value_int_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_extra_value_isValid = ::OpenAPI::fromJsonValue(m_extra_value, json[QString("extraValue")]);
    m_extra_value_isSet = !json[QString("extraValue")].isNull() && m_extra_value_isValid;

    m_extra_label_isValid = ::OpenAPI::fromJsonValue(m_extra_label, json[QString("extraLabel")]);
    m_extra_label_isSet = !json[QString("extraLabel")].isNull() && m_extra_label_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    applyMinMaxConstraints();
}

QString OAIStatusInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_upper_bound_good_isSet) {
        obj.insert(QString("upperBoundGood"), ::OpenAPI::toJsonValue(m_upper_bound_good));
    }
    if (m_upper_bound_maybe_isSet) {
        obj.insert(QString("upperBoundMaybe"), ::OpenAPI::toJsonValue(m_upper_bound_maybe));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_int_isSet) {
        obj.insert(QString("valueInt"), ::OpenAPI::toJsonValue(m_value_int));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_extra_value_isSet) {
        obj.insert(QString("extraValue"), ::OpenAPI::toJsonValue(m_extra_value));
    }
    if (m_extra_label_isSet) {
        obj.insert(QString("extraLabel"), ::OpenAPI::toJsonValue(m_extra_label));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

double OAIStatusInfo::getUpperBoundGood() const {
    return m_upper_bound_good;
}
void OAIStatusInfo::setUpperBoundGood(const double &upper_bound_good) {
	double v = upper_bound_good;
	this->m_upper_bound_good = v;
    this->m_upper_bound_good_isSet = true;
}

bool OAIStatusInfo::is_upper_bound_good_Set() const{
    return m_upper_bound_good_isSet;
}

bool OAIStatusInfo::is_upper_bound_good_Valid() const{
    return m_upper_bound_good_isValid;
}



double OAIStatusInfo::getUpperBoundMaybe() const {
    return m_upper_bound_maybe;
}
void OAIStatusInfo::setUpperBoundMaybe(const double &upper_bound_maybe) {
	double v = upper_bound_maybe;
	this->m_upper_bound_maybe = v;
    this->m_upper_bound_maybe_isSet = true;
}

bool OAIStatusInfo::is_upper_bound_maybe_Set() const{
    return m_upper_bound_maybe_isSet;
}

bool OAIStatusInfo::is_upper_bound_maybe_Valid() const{
    return m_upper_bound_maybe_isValid;
}



QString OAIStatusInfo::getValue() const {
    return m_value;
}
void OAIStatusInfo::setValue(const QString &value) {
	QString v = value;
	this->m_value = v;
    this->m_value_isSet = true;
}

bool OAIStatusInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIStatusInfo::is_value_Valid() const{
    return m_value_isValid;
}



double OAIStatusInfo::getValueInt() const {
    return m_value_int;
}
void OAIStatusInfo::setValueInt(const double &value_int) {
	double v = value_int;
	this->m_value_int = v;
    this->m_value_int_isSet = true;
}

bool OAIStatusInfo::is_value_int_Set() const{
    return m_value_int_isSet;
}

bool OAIStatusInfo::is_value_int_Valid() const{
    return m_value_int_isValid;
}



QString OAIStatusInfo::getLabel() const {
    return m_label;
}
void OAIStatusInfo::setLabel(const QString &label) {
	QString v = label;
	this->m_label = v;
    this->m_label_isSet = true;
}

bool OAIStatusInfo::is_label_Set() const{
    return m_label_isSet;
}

bool OAIStatusInfo::is_label_Valid() const{
    return m_label_isValid;
}



QString OAIStatusInfo::getExtraValue() const {
    return m_extra_value;
}
void OAIStatusInfo::setExtraValue(const QString &extra_value) {
	QString v = extra_value;
	this->m_extra_value = v;
    this->m_extra_value_isSet = true;
}

bool OAIStatusInfo::is_extra_value_Set() const{
    return m_extra_value_isSet;
}

bool OAIStatusInfo::is_extra_value_Valid() const{
    return m_extra_value_isValid;
}



QString OAIStatusInfo::getExtraLabel() const {
    return m_extra_label;
}
void OAIStatusInfo::setExtraLabel(const QString &extra_label) {
	QString v = extra_label;
	this->m_extra_label = v;
    this->m_extra_label_isSet = true;
}

bool OAIStatusInfo::is_extra_label_Set() const{
    return m_extra_label_isSet;
}

bool OAIStatusInfo::is_extra_label_Valid() const{
    return m_extra_label_isValid;
}



OAIStatusState OAIStatusInfo::getState() const {
    return m_state;
}
void OAIStatusInfo::setState(const OAIStatusState &state) {
	OAIStatusState v = state;
	this->m_state = v;
    this->m_state_isSet = true;
}

bool OAIStatusInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStatusInfo::is_state_Valid() const{
    return m_state_isValid;
}


bool OAIStatusInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upper_bound_good_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_bound_maybe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_int_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIStatusInfo::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_upper_bound_good_Set())
	{
		bool upperBoundGoodChanged = false;
		double v = getUpperBoundGood();
		if (upperBoundGoodChanged) { setUpperBoundGood(v); anyMinMaxValueChanged = true; }
	}
	if (is_upper_bound_maybe_Set())
	{
		bool upperBoundMaybeChanged = false;
		double v = getUpperBoundMaybe();
		if (upperBoundMaybeChanged) { setUpperBoundMaybe(v); anyMinMaxValueChanged = true; }
	}
	if (is_value_Set())
	{
		bool valueChanged = false;
		QString v = getValue();
		if (valueChanged) { setValue(v); anyMinMaxValueChanged = true; }
	}
	if (is_value_int_Set())
	{
		bool valueIntChanged = false;
		double v = getValueInt();
		if (valueIntChanged) { setValueInt(v); anyMinMaxValueChanged = true; }
	}
	if (is_label_Set())
	{
		bool labelChanged = false;
		QString v = getLabel();
		if (labelChanged) { setLabel(v); anyMinMaxValueChanged = true; }
	}
	if (is_extra_value_Set())
	{
		bool extraValueChanged = false;
		QString v = getExtraValue();
		if (extraValueChanged) { setExtraValue(v); anyMinMaxValueChanged = true; }
	}
	if (is_extra_label_Set())
	{
		bool extraLabelChanged = false;
		QString v = getExtraLabel();
		if (extraLabelChanged) { setExtraLabel(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
