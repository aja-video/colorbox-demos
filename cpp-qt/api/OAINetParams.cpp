/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAINetParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetParams::OAINetParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetParams::OAINetParams() {
    this->initializeModel();
}

OAINetParams::~OAINetParams() {}

void OAINetParams::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_dns_server1_isSet = false;
    m_dns_server1_isValid = false;

    m_dns_server2_isSet = false;
    m_dns_server2_isValid = false;

    m_dns_search_isSet = false;
    m_dns_search_isValid = false;
}

void OAINetParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetParams::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_dns_server1_isValid = ::OpenAPI::fromJsonValue(m_dns_server1, json[QString("dnsServer1")]);
    m_dns_server1_isSet = !json[QString("dnsServer1")].isNull() && m_dns_server1_isValid;

    m_dns_server2_isValid = ::OpenAPI::fromJsonValue(m_dns_server2, json[QString("dnsServer2")]);
    m_dns_server2_isSet = !json[QString("dnsServer2")].isNull() && m_dns_server2_isValid;

    m_dns_search_isValid = ::OpenAPI::fromJsonValue(m_dns_search, json[QString("dnsSearch")]);
    m_dns_search_isSet = !json[QString("dnsSearch")].isNull() && m_dns_search_isValid;

    applyMinMaxConstraints();
}

QString OAINetParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetParams::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_dns_server1_isSet) {
        obj.insert(QString("dnsServer1"), ::OpenAPI::toJsonValue(m_dns_server1));
    }
    if (m_dns_server2_isSet) {
        obj.insert(QString("dnsServer2"), ::OpenAPI::toJsonValue(m_dns_server2));
    }
    if (m_dns_search_isSet) {
        obj.insert(QString("dnsSearch"), ::OpenAPI::toJsonValue(m_dns_search));
    }
    return obj;
}

QString OAINetParams::getAddress() const {
    return m_address;
}
void OAINetParams::setAddress(const QString &address) {
	QString v = address;
	this->m_address = v;
    this->m_address_isSet = true;
}

bool OAINetParams::is_address_Set() const{
    return m_address_isSet;
}

bool OAINetParams::is_address_Valid() const{
    return m_address_isValid;
}



QString OAINetParams::getSubnet() const {
    return m_subnet;
}
void OAINetParams::setSubnet(const QString &subnet) {
	QString v = subnet;
	this->m_subnet = v;
    this->m_subnet_isSet = true;
}

bool OAINetParams::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAINetParams::is_subnet_Valid() const{
    return m_subnet_isValid;
}



QString OAINetParams::getGateway() const {
    return m_gateway;
}
void OAINetParams::setGateway(const QString &gateway) {
	QString v = gateway;
	this->m_gateway = v;
    this->m_gateway_isSet = true;
}

bool OAINetParams::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAINetParams::is_gateway_Valid() const{
    return m_gateway_isValid;
}



QString OAINetParams::getDnsServer1() const {
    return m_dns_server1;
}
void OAINetParams::setDnsServer1(const QString &dns_server1) {
	QString v = dns_server1;
	this->m_dns_server1 = v;
    this->m_dns_server1_isSet = true;
}

bool OAINetParams::is_dns_server1_Set() const{
    return m_dns_server1_isSet;
}

bool OAINetParams::is_dns_server1_Valid() const{
    return m_dns_server1_isValid;
}



QString OAINetParams::getDnsServer2() const {
    return m_dns_server2;
}
void OAINetParams::setDnsServer2(const QString &dns_server2) {
	QString v = dns_server2;
	this->m_dns_server2 = v;
    this->m_dns_server2_isSet = true;
}

bool OAINetParams::is_dns_server2_Set() const{
    return m_dns_server2_isSet;
}

bool OAINetParams::is_dns_server2_Valid() const{
    return m_dns_server2_isValid;
}



QString OAINetParams::getDnsSearch() const {
    return m_dns_search;
}
void OAINetParams::setDnsSearch(const QString &dns_search) {
	QString v = dns_search;
	this->m_dns_search = v;
    this->m_dns_search_isSet = true;
}

bool OAINetParams::is_dns_search_Set() const{
    return m_dns_search_isSet;
}

bool OAINetParams::is_dns_search_Valid() const{
    return m_dns_search_isValid;
}



bool OAINetParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_server1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_server2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_search_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAINetParams::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_address_Set())
	{
		bool addressChanged = false;
		QString v = getAddress();
		if (addressChanged) { setAddress(v); anyMinMaxValueChanged = true; }
	}
	if (is_subnet_Set())
	{
		bool subnetChanged = false;
		QString v = getSubnet();
		if (subnetChanged) { setSubnet(v); anyMinMaxValueChanged = true; }
	}
	if (is_gateway_Set())
	{
		bool gatewayChanged = false;
		QString v = getGateway();
		if (gatewayChanged) { setGateway(v); anyMinMaxValueChanged = true; }
	}
	if (is_dns_server1_Set())
	{
		bool dnsServer1Changed = false;
		QString v = getDnsServer1();
		if (dnsServer1Changed) { setDnsServer1(v); anyMinMaxValueChanged = true; }
	}
	if (is_dns_server2_Set())
	{
		bool dnsServer2Changed = false;
		QString v = getDnsServer2();
		if (dnsServer2Changed) { setDnsServer2(v); anyMinMaxValueChanged = true; }
	}
	if (is_dns_search_Set())
	{
		bool dnsSearchChanged = false;
		QString v = getDnsSearch();
		if (dnsSearchChanged) { setDnsSearch(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
