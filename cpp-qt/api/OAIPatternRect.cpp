/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIPatternRect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatternRect::OAIPatternRect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatternRect::OAIPatternRect() {
    this->initializeModel();
}

OAIPatternRect::~OAIPatternRect() {}

void OAIPatternRect::initializeModel() {

    m_xstart_isSet = false;
    m_xstart_isValid = false;

    m_ystart_isSet = false;
    m_ystart_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;
}

void OAIPatternRect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatternRect::fromJsonObject(QJsonObject json) {

    m_xstart_isValid = ::OpenAPI::fromJsonValue(m_xstart, json[QString("xstart")]);
    m_xstart_isSet = !json[QString("xstart")].isNull() && m_xstart_isValid;

    m_ystart_isValid = ::OpenAPI::fromJsonValue(m_ystart, json[QString("ystart")]);
    m_ystart_isSet = !json[QString("ystart")].isNull() && m_ystart_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    applyMinMaxConstraints();
}

QString OAIPatternRect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatternRect::asJsonObject() const {
    QJsonObject obj;
    if (m_xstart_isSet) {
        obj.insert(QString("xstart"), ::OpenAPI::toJsonValue(m_xstart));
    }
    if (m_ystart_isSet) {
        obj.insert(QString("ystart"), ::OpenAPI::toJsonValue(m_ystart));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    return obj;
}

double OAIPatternRect::getXstart() const {
    return m_xstart;
}
void OAIPatternRect::setXstart(const double &xstart) {
	double v = xstart;
	double min = xstartMin();
	double max = xstartMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_xstart = v;
    this->m_xstart_isSet = true;
}

bool OAIPatternRect::is_xstart_Set() const{
    return m_xstart_isSet;
}

bool OAIPatternRect::is_xstart_Valid() const{
    return m_xstart_isValid;
}

double OAIPatternRect::xstartMin() const {
	return 0.0;
}

double OAIPatternRect::xstartMax() const {
	return 1.0;
}

double OAIPatternRect::getYstart() const {
    return m_ystart;
}
void OAIPatternRect::setYstart(const double &ystart) {
	double v = ystart;
	double min = ystartMin();
	double max = ystartMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_ystart = v;
    this->m_ystart_isSet = true;
}

bool OAIPatternRect::is_ystart_Set() const{
    return m_ystart_isSet;
}

bool OAIPatternRect::is_ystart_Valid() const{
    return m_ystart_isValid;
}

double OAIPatternRect::ystartMin() const {
	return 0.0;
}

double OAIPatternRect::ystartMax() const {
	return 1.0;
}

double OAIPatternRect::getWidth() const {
    return m_width;
}
void OAIPatternRect::setWidth(const double &width) {
	double v = width;
	double min = widthMin();
	double max = widthMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_width = v;
    this->m_width_isSet = true;
}

bool OAIPatternRect::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPatternRect::is_width_Valid() const{
    return m_width_isValid;
}

double OAIPatternRect::widthMin() const {
	return 0.0;
}

double OAIPatternRect::widthMax() const {
	return 1.0;
}

double OAIPatternRect::getHeight() const {
    return m_height;
}
void OAIPatternRect::setHeight(const double &height) {
	double v = height;
	double min = heightMin();
	double max = heightMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_height = v;
    this->m_height_isSet = true;
}

bool OAIPatternRect::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPatternRect::is_height_Valid() const{
    return m_height_isValid;
}

double OAIPatternRect::heightMin() const {
	return 0.0;
}

double OAIPatternRect::heightMax() const {
	return 1.0;
}

bool OAIPatternRect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_xstart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ystart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatternRect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIPatternRect::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_xstart_Set())
	{
		bool xstartChanged = false;
		double v = getXstart();
		double min = xstartMin();
		double max = xstartMax();
		if (v < min) { v = min; xstartChanged = true; }
		if (v > max) { v = max; xstartChanged = true; }
		if (xstartChanged) { setXstart(v); anyMinMaxValueChanged = true; }
	}
	if (is_ystart_Set())
	{
		bool ystartChanged = false;
		double v = getYstart();
		double min = ystartMin();
		double max = ystartMax();
		if (v < min) { v = min; ystartChanged = true; }
		if (v > max) { v = max; ystartChanged = true; }
		if (ystartChanged) { setYstart(v); anyMinMaxValueChanged = true; }
	}
	if (is_width_Set())
	{
		bool widthChanged = false;
		double v = getWidth();
		double min = widthMin();
		double max = widthMax();
		if (v < min) { v = min; widthChanged = true; }
		if (v > max) { v = max; widthChanged = true; }
		if (widthChanged) { setWidth(v); anyMinMaxValueChanged = true; }
	}
	if (is_height_Set())
	{
		bool heightChanged = false;
		double v = getHeight();
		double min = heightMin();
		double max = heightMax();
		if (v < min) { v = min; heightChanged = true; }
		if (v > max) { v = max; heightChanged = true; }
		if (heightChanged) { setHeight(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
