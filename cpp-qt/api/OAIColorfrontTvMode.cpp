/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIColorfrontTvMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorfrontTvMode::OAIColorfrontTvMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorfrontTvMode::OAIColorfrontTvMode() {
    this->initializeModel();
}

OAIColorfrontTvMode::~OAIColorfrontTvMode() {}

void OAIColorfrontTvMode::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_in_dyn_range_gamut_isSet = false;
    m_in_dyn_range_gamut_isValid = false;

    m_out_dyn_range_gamut_isSet = false;
    m_out_dyn_range_gamut_isValid = false;

    m_brightness_isSet = false;
    m_brightness_isValid = false;

    m_highlight_isSet = false;
    m_highlight_isValid = false;

    m_colorfulness_isSet = false;
    m_colorfulness_isValid = false;

    m_super_highlight_isSet = false;
    m_super_highlight_isValid = false;

    m_roundtrip_isSet = false;
    m_roundtrip_isValid = false;

    m_clamp_to_legal_isSet = false;
    m_clamp_to_legal_isValid = false;

    m_color_corrector_isSet = false;
    m_color_corrector_isValid = false;

    m_lift_master_isSet = false;
    m_lift_master_isValid = false;

    m_lift_red_isSet = false;
    m_lift_red_isValid = false;

    m_lift_green_isSet = false;
    m_lift_green_isValid = false;

    m_lift_blue_isSet = false;
    m_lift_blue_isValid = false;

    m_gamma_master_isSet = false;
    m_gamma_master_isValid = false;

    m_gamma_red_isSet = false;
    m_gamma_red_isValid = false;

    m_gamma_green_isSet = false;
    m_gamma_green_isValid = false;

    m_gamma_blue_isSet = false;
    m_gamma_blue_isValid = false;

    m_gain_master_isSet = false;
    m_gain_master_isValid = false;

    m_gain_red_isSet = false;
    m_gain_red_isValid = false;

    m_gain_green_isSet = false;
    m_gain_green_isValid = false;

    m_gain_blue_isSet = false;
    m_gain_blue_isValid = false;

    m_saturation_isSet = false;
    m_saturation_isValid = false;

    m_camera_correction_isSet = false;
    m_camera_correction_isValid = false;

    m_exposure_isSet = false;
    m_exposure_isValid = false;

    m_color_temp_isSet = false;
    m_color_temp_isValid = false;

    m_tint_isSet = false;
    m_tint_isValid = false;
}

void OAIColorfrontTvMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorfrontTvMode::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_in_dyn_range_gamut_isValid = ::OpenAPI::fromJsonValue(m_in_dyn_range_gamut, json[QString("inDynRangeGamut")]);
    m_in_dyn_range_gamut_isSet = !json[QString("inDynRangeGamut")].isNull() && m_in_dyn_range_gamut_isValid;

    m_out_dyn_range_gamut_isValid = ::OpenAPI::fromJsonValue(m_out_dyn_range_gamut, json[QString("outDynRangeGamut")]);
    m_out_dyn_range_gamut_isSet = !json[QString("outDynRangeGamut")].isNull() && m_out_dyn_range_gamut_isValid;

    m_brightness_isValid = ::OpenAPI::fromJsonValue(m_brightness, json[QString("brightness")]);
    m_brightness_isSet = !json[QString("brightness")].isNull() && m_brightness_isValid;

    m_highlight_isValid = ::OpenAPI::fromJsonValue(m_highlight, json[QString("highlight")]);
    m_highlight_isSet = !json[QString("highlight")].isNull() && m_highlight_isValid;

    m_colorfulness_isValid = ::OpenAPI::fromJsonValue(m_colorfulness, json[QString("colorfulness")]);
    m_colorfulness_isSet = !json[QString("colorfulness")].isNull() && m_colorfulness_isValid;

    m_super_highlight_isValid = ::OpenAPI::fromJsonValue(m_super_highlight, json[QString("superHighlight")]);
    m_super_highlight_isSet = !json[QString("superHighlight")].isNull() && m_super_highlight_isValid;

    m_roundtrip_isValid = ::OpenAPI::fromJsonValue(m_roundtrip, json[QString("roundtrip")]);
    m_roundtrip_isSet = !json[QString("roundtrip")].isNull() && m_roundtrip_isValid;

    m_clamp_to_legal_isValid = ::OpenAPI::fromJsonValue(m_clamp_to_legal, json[QString("clampToLegal")]);
    m_clamp_to_legal_isSet = !json[QString("clampToLegal")].isNull() && m_clamp_to_legal_isValid;

    m_color_corrector_isValid = ::OpenAPI::fromJsonValue(m_color_corrector, json[QString("colorCorrector")]);
    m_color_corrector_isSet = !json[QString("colorCorrector")].isNull() && m_color_corrector_isValid;

    m_lift_master_isValid = ::OpenAPI::fromJsonValue(m_lift_master, json[QString("liftMaster")]);
    m_lift_master_isSet = !json[QString("liftMaster")].isNull() && m_lift_master_isValid;

    m_lift_red_isValid = ::OpenAPI::fromJsonValue(m_lift_red, json[QString("liftRed")]);
    m_lift_red_isSet = !json[QString("liftRed")].isNull() && m_lift_red_isValid;

    m_lift_green_isValid = ::OpenAPI::fromJsonValue(m_lift_green, json[QString("liftGreen")]);
    m_lift_green_isSet = !json[QString("liftGreen")].isNull() && m_lift_green_isValid;

    m_lift_blue_isValid = ::OpenAPI::fromJsonValue(m_lift_blue, json[QString("liftBlue")]);
    m_lift_blue_isSet = !json[QString("liftBlue")].isNull() && m_lift_blue_isValid;

    m_gamma_master_isValid = ::OpenAPI::fromJsonValue(m_gamma_master, json[QString("gammaMaster")]);
    m_gamma_master_isSet = !json[QString("gammaMaster")].isNull() && m_gamma_master_isValid;

    m_gamma_red_isValid = ::OpenAPI::fromJsonValue(m_gamma_red, json[QString("gammaRed")]);
    m_gamma_red_isSet = !json[QString("gammaRed")].isNull() && m_gamma_red_isValid;

    m_gamma_green_isValid = ::OpenAPI::fromJsonValue(m_gamma_green, json[QString("gammaGreen")]);
    m_gamma_green_isSet = !json[QString("gammaGreen")].isNull() && m_gamma_green_isValid;

    m_gamma_blue_isValid = ::OpenAPI::fromJsonValue(m_gamma_blue, json[QString("gammaBlue")]);
    m_gamma_blue_isSet = !json[QString("gammaBlue")].isNull() && m_gamma_blue_isValid;

    m_gain_master_isValid = ::OpenAPI::fromJsonValue(m_gain_master, json[QString("gainMaster")]);
    m_gain_master_isSet = !json[QString("gainMaster")].isNull() && m_gain_master_isValid;

    m_gain_red_isValid = ::OpenAPI::fromJsonValue(m_gain_red, json[QString("gainRed")]);
    m_gain_red_isSet = !json[QString("gainRed")].isNull() && m_gain_red_isValid;

    m_gain_green_isValid = ::OpenAPI::fromJsonValue(m_gain_green, json[QString("gainGreen")]);
    m_gain_green_isSet = !json[QString("gainGreen")].isNull() && m_gain_green_isValid;

    m_gain_blue_isValid = ::OpenAPI::fromJsonValue(m_gain_blue, json[QString("gainBlue")]);
    m_gain_blue_isSet = !json[QString("gainBlue")].isNull() && m_gain_blue_isValid;

    m_saturation_isValid = ::OpenAPI::fromJsonValue(m_saturation, json[QString("saturation")]);
    m_saturation_isSet = !json[QString("saturation")].isNull() && m_saturation_isValid;

    m_camera_correction_isValid = ::OpenAPI::fromJsonValue(m_camera_correction, json[QString("cameraCorrection")]);
    m_camera_correction_isSet = !json[QString("cameraCorrection")].isNull() && m_camera_correction_isValid;

    m_exposure_isValid = ::OpenAPI::fromJsonValue(m_exposure, json[QString("exposure")]);
    m_exposure_isSet = !json[QString("exposure")].isNull() && m_exposure_isValid;

    m_color_temp_isValid = ::OpenAPI::fromJsonValue(m_color_temp, json[QString("colorTemp")]);
    m_color_temp_isSet = !json[QString("colorTemp")].isNull() && m_color_temp_isValid;

    m_tint_isValid = ::OpenAPI::fromJsonValue(m_tint, json[QString("tint")]);
    m_tint_isSet = !json[QString("tint")].isNull() && m_tint_isValid;

    applyMinMaxConstraints();
}

QString OAIColorfrontTvMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorfrontTvMode::asJsonObject() const {
    QJsonObject obj;
    if (m_engine.isSet()) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_in_dyn_range_gamut.isSet()) {
        obj.insert(QString("inDynRangeGamut"), ::OpenAPI::toJsonValue(m_in_dyn_range_gamut));
    }
    if (m_out_dyn_range_gamut.isSet()) {
        obj.insert(QString("outDynRangeGamut"), ::OpenAPI::toJsonValue(m_out_dyn_range_gamut));
    }
    if (m_brightness_isSet) {
        obj.insert(QString("brightness"), ::OpenAPI::toJsonValue(m_brightness));
    }
    if (m_highlight_isSet) {
        obj.insert(QString("highlight"), ::OpenAPI::toJsonValue(m_highlight));
    }
    if (m_colorfulness_isSet) {
        obj.insert(QString("colorfulness"), ::OpenAPI::toJsonValue(m_colorfulness));
    }
    if (m_super_highlight_isSet) {
        obj.insert(QString("superHighlight"), ::OpenAPI::toJsonValue(m_super_highlight));
    }
    if (m_roundtrip_isSet) {
        obj.insert(QString("roundtrip"), ::OpenAPI::toJsonValue(m_roundtrip));
    }
    if (m_clamp_to_legal_isSet) {
        obj.insert(QString("clampToLegal"), ::OpenAPI::toJsonValue(m_clamp_to_legal));
    }
    if (m_color_corrector_isSet) {
        obj.insert(QString("colorCorrector"), ::OpenAPI::toJsonValue(m_color_corrector));
    }
    if (m_lift_master_isSet) {
        obj.insert(QString("liftMaster"), ::OpenAPI::toJsonValue(m_lift_master));
    }
    if (m_lift_red_isSet) {
        obj.insert(QString("liftRed"), ::OpenAPI::toJsonValue(m_lift_red));
    }
    if (m_lift_green_isSet) {
        obj.insert(QString("liftGreen"), ::OpenAPI::toJsonValue(m_lift_green));
    }
    if (m_lift_blue_isSet) {
        obj.insert(QString("liftBlue"), ::OpenAPI::toJsonValue(m_lift_blue));
    }
    if (m_gamma_master_isSet) {
        obj.insert(QString("gammaMaster"), ::OpenAPI::toJsonValue(m_gamma_master));
    }
    if (m_gamma_red_isSet) {
        obj.insert(QString("gammaRed"), ::OpenAPI::toJsonValue(m_gamma_red));
    }
    if (m_gamma_green_isSet) {
        obj.insert(QString("gammaGreen"), ::OpenAPI::toJsonValue(m_gamma_green));
    }
    if (m_gamma_blue_isSet) {
        obj.insert(QString("gammaBlue"), ::OpenAPI::toJsonValue(m_gamma_blue));
    }
    if (m_gain_master_isSet) {
        obj.insert(QString("gainMaster"), ::OpenAPI::toJsonValue(m_gain_master));
    }
    if (m_gain_red_isSet) {
        obj.insert(QString("gainRed"), ::OpenAPI::toJsonValue(m_gain_red));
    }
    if (m_gain_green_isSet) {
        obj.insert(QString("gainGreen"), ::OpenAPI::toJsonValue(m_gain_green));
    }
    if (m_gain_blue_isSet) {
        obj.insert(QString("gainBlue"), ::OpenAPI::toJsonValue(m_gain_blue));
    }
    if (m_saturation_isSet) {
        obj.insert(QString("saturation"), ::OpenAPI::toJsonValue(m_saturation));
    }
    if (m_camera_correction_isSet) {
        obj.insert(QString("cameraCorrection"), ::OpenAPI::toJsonValue(m_camera_correction));
    }
    if (m_exposure_isSet) {
        obj.insert(QString("exposure"), ::OpenAPI::toJsonValue(m_exposure));
    }
    if (m_color_temp_isSet) {
        obj.insert(QString("colorTemp"), ::OpenAPI::toJsonValue(m_color_temp));
    }
    if (m_tint_isSet) {
        obj.insert(QString("tint"), ::OpenAPI::toJsonValue(m_tint));
    }
    return obj;
}

OAIColorfrontEngine OAIColorfrontTvMode::getEngine() const {
    return m_engine;
}
void OAIColorfrontTvMode::setEngine(const OAIColorfrontEngine &engine) {
	OAIColorfrontEngine v = engine;
	this->m_engine = v;
    this->m_engine_isSet = true;
}

bool OAIColorfrontTvMode::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIColorfrontTvMode::is_engine_Valid() const{
    return m_engine_isValid;
}


OAIColorfrontDynRangeGamutTvModeIn OAIColorfrontTvMode::getInDynRangeGamut() const {
    return m_in_dyn_range_gamut;
}
void OAIColorfrontTvMode::setInDynRangeGamut(const OAIColorfrontDynRangeGamutTvModeIn &in_dyn_range_gamut) {
	OAIColorfrontDynRangeGamutTvModeIn v = in_dyn_range_gamut;
	this->m_in_dyn_range_gamut = v;
    this->m_in_dyn_range_gamut_isSet = true;
}

bool OAIColorfrontTvMode::is_in_dyn_range_gamut_Set() const{
    return m_in_dyn_range_gamut_isSet;
}

bool OAIColorfrontTvMode::is_in_dyn_range_gamut_Valid() const{
    return m_in_dyn_range_gamut_isValid;
}


OAIColorfrontDynRangeGamutTvModeOut OAIColorfrontTvMode::getOutDynRangeGamut() const {
    return m_out_dyn_range_gamut;
}
void OAIColorfrontTvMode::setOutDynRangeGamut(const OAIColorfrontDynRangeGamutTvModeOut &out_dyn_range_gamut) {
	OAIColorfrontDynRangeGamutTvModeOut v = out_dyn_range_gamut;
	this->m_out_dyn_range_gamut = v;
    this->m_out_dyn_range_gamut_isSet = true;
}

bool OAIColorfrontTvMode::is_out_dyn_range_gamut_Set() const{
    return m_out_dyn_range_gamut_isSet;
}

bool OAIColorfrontTvMode::is_out_dyn_range_gamut_Valid() const{
    return m_out_dyn_range_gamut_isValid;
}


double OAIColorfrontTvMode::getBrightness() const {
    return m_brightness;
}
void OAIColorfrontTvMode::setBrightness(const double &brightness) {
	double v = brightness;
	double min = brightnessMin();
	double max = brightnessMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_brightness = v;
    this->m_brightness_isSet = true;
}

bool OAIColorfrontTvMode::is_brightness_Set() const{
    return m_brightness_isSet;
}

bool OAIColorfrontTvMode::is_brightness_Valid() const{
    return m_brightness_isValid;
}

double OAIColorfrontTvMode::brightnessMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::brightnessMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getHighlight() const {
    return m_highlight;
}
void OAIColorfrontTvMode::setHighlight(const double &highlight) {
	double v = highlight;
	double min = highlightMin();
	double max = highlightMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_highlight = v;
    this->m_highlight_isSet = true;
}

bool OAIColorfrontTvMode::is_highlight_Set() const{
    return m_highlight_isSet;
}

bool OAIColorfrontTvMode::is_highlight_Valid() const{
    return m_highlight_isValid;
}

double OAIColorfrontTvMode::highlightMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::highlightMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getColorfulness() const {
    return m_colorfulness;
}
void OAIColorfrontTvMode::setColorfulness(const double &colorfulness) {
	double v = colorfulness;
	double min = colorfulnessMin();
	double max = colorfulnessMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_colorfulness = v;
    this->m_colorfulness_isSet = true;
}

bool OAIColorfrontTvMode::is_colorfulness_Set() const{
    return m_colorfulness_isSet;
}

bool OAIColorfrontTvMode::is_colorfulness_Valid() const{
    return m_colorfulness_isValid;
}

double OAIColorfrontTvMode::colorfulnessMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::colorfulnessMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getSuperHighlight() const {
    return m_super_highlight;
}
void OAIColorfrontTvMode::setSuperHighlight(const double &super_highlight) {
	double v = super_highlight;
	double min = superHighlightMin();
	double max = superHighlightMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_super_highlight = v;
    this->m_super_highlight_isSet = true;
}

bool OAIColorfrontTvMode::is_super_highlight_Set() const{
    return m_super_highlight_isSet;
}

bool OAIColorfrontTvMode::is_super_highlight_Valid() const{
    return m_super_highlight_isValid;
}

double OAIColorfrontTvMode::superHighlightMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::superHighlightMax() const {
	return 1.0;
}

bool OAIColorfrontTvMode::isRoundtrip() const {
    return m_roundtrip;
}
void OAIColorfrontTvMode::setRoundtrip(const bool &roundtrip) {
	bool v = roundtrip;
	this->m_roundtrip = v;
    this->m_roundtrip_isSet = true;
}

bool OAIColorfrontTvMode::is_roundtrip_Set() const{
    return m_roundtrip_isSet;
}

bool OAIColorfrontTvMode::is_roundtrip_Valid() const{
    return m_roundtrip_isValid;
}


bool OAIColorfrontTvMode::isClampToLegal() const {
    return m_clamp_to_legal;
}
void OAIColorfrontTvMode::setClampToLegal(const bool &clamp_to_legal) {
	bool v = clamp_to_legal;
	this->m_clamp_to_legal = v;
    this->m_clamp_to_legal_isSet = true;
}

bool OAIColorfrontTvMode::is_clamp_to_legal_Set() const{
    return m_clamp_to_legal_isSet;
}

bool OAIColorfrontTvMode::is_clamp_to_legal_Valid() const{
    return m_clamp_to_legal_isValid;
}


bool OAIColorfrontTvMode::isColorCorrector() const {
    return m_color_corrector;
}
void OAIColorfrontTvMode::setColorCorrector(const bool &color_corrector) {
	bool v = color_corrector;
	this->m_color_corrector = v;
    this->m_color_corrector_isSet = true;
}

bool OAIColorfrontTvMode::is_color_corrector_Set() const{
    return m_color_corrector_isSet;
}

bool OAIColorfrontTvMode::is_color_corrector_Valid() const{
    return m_color_corrector_isValid;
}


double OAIColorfrontTvMode::getLiftMaster() const {
    return m_lift_master;
}
void OAIColorfrontTvMode::setLiftMaster(const double &lift_master) {
	double v = lift_master;
	double min = liftMasterMin();
	double max = liftMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_lift_master = v;
    this->m_lift_master_isSet = true;
}

bool OAIColorfrontTvMode::is_lift_master_Set() const{
    return m_lift_master_isSet;
}

bool OAIColorfrontTvMode::is_lift_master_Valid() const{
    return m_lift_master_isValid;
}

double OAIColorfrontTvMode::liftMasterMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::liftMasterMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getLiftRed() const {
    return m_lift_red;
}
void OAIColorfrontTvMode::setLiftRed(const double &lift_red) {
	double v = lift_red;
	double min = liftRedMin();
	double max = liftRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_lift_red = v;
    this->m_lift_red_isSet = true;
}

bool OAIColorfrontTvMode::is_lift_red_Set() const{
    return m_lift_red_isSet;
}

bool OAIColorfrontTvMode::is_lift_red_Valid() const{
    return m_lift_red_isValid;
}

double OAIColorfrontTvMode::liftRedMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::liftRedMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getLiftGreen() const {
    return m_lift_green;
}
void OAIColorfrontTvMode::setLiftGreen(const double &lift_green) {
	double v = lift_green;
	double min = liftGreenMin();
	double max = liftGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_lift_green = v;
    this->m_lift_green_isSet = true;
}

bool OAIColorfrontTvMode::is_lift_green_Set() const{
    return m_lift_green_isSet;
}

bool OAIColorfrontTvMode::is_lift_green_Valid() const{
    return m_lift_green_isValid;
}

double OAIColorfrontTvMode::liftGreenMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::liftGreenMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getLiftBlue() const {
    return m_lift_blue;
}
void OAIColorfrontTvMode::setLiftBlue(const double &lift_blue) {
	double v = lift_blue;
	double min = liftBlueMin();
	double max = liftBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_lift_blue = v;
    this->m_lift_blue_isSet = true;
}

bool OAIColorfrontTvMode::is_lift_blue_Set() const{
    return m_lift_blue_isSet;
}

bool OAIColorfrontTvMode::is_lift_blue_Valid() const{
    return m_lift_blue_isValid;
}

double OAIColorfrontTvMode::liftBlueMin() const {
	return -1.0;
}

double OAIColorfrontTvMode::liftBlueMax() const {
	return 1.0;
}

double OAIColorfrontTvMode::getGammaMaster() const {
    return m_gamma_master;
}
void OAIColorfrontTvMode::setGammaMaster(const double &gamma_master) {
	double v = gamma_master;
	double min = gammaMasterMin();
	double max = gammaMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_master = v;
    this->m_gamma_master_isSet = true;
}

bool OAIColorfrontTvMode::is_gamma_master_Set() const{
    return m_gamma_master_isSet;
}

bool OAIColorfrontTvMode::is_gamma_master_Valid() const{
    return m_gamma_master_isValid;
}

double OAIColorfrontTvMode::gammaMasterMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gammaMasterMax() const {
	return 2.0;
}

double OAIColorfrontTvMode::getGammaRed() const {
    return m_gamma_red;
}
void OAIColorfrontTvMode::setGammaRed(const double &gamma_red) {
	double v = gamma_red;
	double min = gammaRedMin();
	double max = gammaRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_red = v;
    this->m_gamma_red_isSet = true;
}

bool OAIColorfrontTvMode::is_gamma_red_Set() const{
    return m_gamma_red_isSet;
}

bool OAIColorfrontTvMode::is_gamma_red_Valid() const{
    return m_gamma_red_isValid;
}

double OAIColorfrontTvMode::gammaRedMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gammaRedMax() const {
	return 2.0;
}

double OAIColorfrontTvMode::getGammaGreen() const {
    return m_gamma_green;
}
void OAIColorfrontTvMode::setGammaGreen(const double &gamma_green) {
	double v = gamma_green;
	double min = gammaGreenMin();
	double max = gammaGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_green = v;
    this->m_gamma_green_isSet = true;
}

bool OAIColorfrontTvMode::is_gamma_green_Set() const{
    return m_gamma_green_isSet;
}

bool OAIColorfrontTvMode::is_gamma_green_Valid() const{
    return m_gamma_green_isValid;
}

double OAIColorfrontTvMode::gammaGreenMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gammaGreenMax() const {
	return 2.0;
}

double OAIColorfrontTvMode::getGammaBlue() const {
    return m_gamma_blue;
}
void OAIColorfrontTvMode::setGammaBlue(const double &gamma_blue) {
	double v = gamma_blue;
	double min = gammaBlueMin();
	double max = gammaBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gamma_blue = v;
    this->m_gamma_blue_isSet = true;
}

bool OAIColorfrontTvMode::is_gamma_blue_Set() const{
    return m_gamma_blue_isSet;
}

bool OAIColorfrontTvMode::is_gamma_blue_Valid() const{
    return m_gamma_blue_isValid;
}

double OAIColorfrontTvMode::gammaBlueMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gammaBlueMax() const {
	return 2.0;
}

double OAIColorfrontTvMode::getGainMaster() const {
    return m_gain_master;
}
void OAIColorfrontTvMode::setGainMaster(const double &gain_master) {
	double v = gain_master;
	double min = gainMasterMin();
	double max = gainMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_master = v;
    this->m_gain_master_isSet = true;
}

bool OAIColorfrontTvMode::is_gain_master_Set() const{
    return m_gain_master_isSet;
}

bool OAIColorfrontTvMode::is_gain_master_Valid() const{
    return m_gain_master_isValid;
}

double OAIColorfrontTvMode::gainMasterMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gainMasterMax() const {
	return 5.0;
}

double OAIColorfrontTvMode::getGainRed() const {
    return m_gain_red;
}
void OAIColorfrontTvMode::setGainRed(const double &gain_red) {
	double v = gain_red;
	double min = gainRedMin();
	double max = gainRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_red = v;
    this->m_gain_red_isSet = true;
}

bool OAIColorfrontTvMode::is_gain_red_Set() const{
    return m_gain_red_isSet;
}

bool OAIColorfrontTvMode::is_gain_red_Valid() const{
    return m_gain_red_isValid;
}

double OAIColorfrontTvMode::gainRedMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gainRedMax() const {
	return 5.0;
}

double OAIColorfrontTvMode::getGainGreen() const {
    return m_gain_green;
}
void OAIColorfrontTvMode::setGainGreen(const double &gain_green) {
	double v = gain_green;
	double min = gainGreenMin();
	double max = gainGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_green = v;
    this->m_gain_green_isSet = true;
}

bool OAIColorfrontTvMode::is_gain_green_Set() const{
    return m_gain_green_isSet;
}

bool OAIColorfrontTvMode::is_gain_green_Valid() const{
    return m_gain_green_isValid;
}

double OAIColorfrontTvMode::gainGreenMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gainGreenMax() const {
	return 5.0;
}

double OAIColorfrontTvMode::getGainBlue() const {
    return m_gain_blue;
}
void OAIColorfrontTvMode::setGainBlue(const double &gain_blue) {
	double v = gain_blue;
	double min = gainBlueMin();
	double max = gainBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_gain_blue = v;
    this->m_gain_blue_isSet = true;
}

bool OAIColorfrontTvMode::is_gain_blue_Set() const{
    return m_gain_blue_isSet;
}

bool OAIColorfrontTvMode::is_gain_blue_Valid() const{
    return m_gain_blue_isValid;
}

double OAIColorfrontTvMode::gainBlueMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::gainBlueMax() const {
	return 5.0;
}

double OAIColorfrontTvMode::getSaturation() const {
    return m_saturation;
}
void OAIColorfrontTvMode::setSaturation(const double &saturation) {
	double v = saturation;
	double min = saturationMin();
	double max = saturationMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_saturation = v;
    this->m_saturation_isSet = true;
}

bool OAIColorfrontTvMode::is_saturation_Set() const{
    return m_saturation_isSet;
}

bool OAIColorfrontTvMode::is_saturation_Valid() const{
    return m_saturation_isValid;
}

double OAIColorfrontTvMode::saturationMin() const {
	return 0.0;
}

double OAIColorfrontTvMode::saturationMax() const {
	return 2.0;
}

bool OAIColorfrontTvMode::isCameraCorrection() const {
    return m_camera_correction;
}
void OAIColorfrontTvMode::setCameraCorrection(const bool &camera_correction) {
	bool v = camera_correction;
	this->m_camera_correction = v;
    this->m_camera_correction_isSet = true;
}

bool OAIColorfrontTvMode::is_camera_correction_Set() const{
    return m_camera_correction_isSet;
}

bool OAIColorfrontTvMode::is_camera_correction_Valid() const{
    return m_camera_correction_isValid;
}


double OAIColorfrontTvMode::getExposure() const {
    return m_exposure;
}
void OAIColorfrontTvMode::setExposure(const double &exposure) {
	double v = exposure;
	double min = exposureMin();
	double max = exposureMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_exposure = v;
    this->m_exposure_isSet = true;
}

bool OAIColorfrontTvMode::is_exposure_Set() const{
    return m_exposure_isSet;
}

bool OAIColorfrontTvMode::is_exposure_Valid() const{
    return m_exposure_isValid;
}

double OAIColorfrontTvMode::exposureMin() const {
	return -4.0;
}

double OAIColorfrontTvMode::exposureMax() const {
	return 4.0;
}

double OAIColorfrontTvMode::getColorTemp() const {
    return m_color_temp;
}
void OAIColorfrontTvMode::setColorTemp(const double &color_temp) {
	double v = color_temp;
	double min = colorTempMin();
	double max = colorTempMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_color_temp = v;
    this->m_color_temp_isSet = true;
}

bool OAIColorfrontTvMode::is_color_temp_Set() const{
    return m_color_temp_isSet;
}

bool OAIColorfrontTvMode::is_color_temp_Valid() const{
    return m_color_temp_isValid;
}

double OAIColorfrontTvMode::colorTempMin() const {
	return -10.0;
}

double OAIColorfrontTvMode::colorTempMax() const {
	return 10.0;
}

double OAIColorfrontTvMode::getTint() const {
    return m_tint;
}
void OAIColorfrontTvMode::setTint(const double &tint) {
	double v = tint;
	double min = tintMin();
	double max = tintMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
	this->m_tint = v;
    this->m_tint_isSet = true;
}

bool OAIColorfrontTvMode::is_tint_Set() const{
    return m_tint_isSet;
}

bool OAIColorfrontTvMode::is_tint_Valid() const{
    return m_tint_isValid;
}

double OAIColorfrontTvMode::tintMin() const {
	return -16.0;
}

double OAIColorfrontTvMode::tintMax() const {
	return 16.0;
}

bool OAIColorfrontTvMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_dyn_range_gamut.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_dyn_range_gamut.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brightness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colorfulness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roundtrip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clamp_to_legal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_corrector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lift_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_correction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorfrontTvMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIColorfrontTvMode::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_brightness_Set())
	{
		bool brightnessChanged = false;
		double v = getBrightness();
		double min = brightnessMin();
		double max = brightnessMax();
		if (v < min) { v = min; brightnessChanged = true; }
		if (v > max) { v = max; brightnessChanged = true; }
		if (brightnessChanged) { setBrightness(v); anyMinMaxValueChanged = true; }
	}
	if (is_highlight_Set())
	{
		bool highlightChanged = false;
		double v = getHighlight();
		double min = highlightMin();
		double max = highlightMax();
		if (v < min) { v = min; highlightChanged = true; }
		if (v > max) { v = max; highlightChanged = true; }
		if (highlightChanged) { setHighlight(v); anyMinMaxValueChanged = true; }
	}
	if (is_colorfulness_Set())
	{
		bool colorfulnessChanged = false;
		double v = getColorfulness();
		double min = colorfulnessMin();
		double max = colorfulnessMax();
		if (v < min) { v = min; colorfulnessChanged = true; }
		if (v > max) { v = max; colorfulnessChanged = true; }
		if (colorfulnessChanged) { setColorfulness(v); anyMinMaxValueChanged = true; }
	}
	if (is_super_highlight_Set())
	{
		bool superHighlightChanged = false;
		double v = getSuperHighlight();
		double min = superHighlightMin();
		double max = superHighlightMax();
		if (v < min) { v = min; superHighlightChanged = true; }
		if (v > max) { v = max; superHighlightChanged = true; }
		if (superHighlightChanged) { setSuperHighlight(v); anyMinMaxValueChanged = true; }
	}
	if (is_lift_master_Set())
	{
		bool liftMasterChanged = false;
		double v = getLiftMaster();
		double min = liftMasterMin();
		double max = liftMasterMax();
		if (v < min) { v = min; liftMasterChanged = true; }
		if (v > max) { v = max; liftMasterChanged = true; }
		if (liftMasterChanged) { setLiftMaster(v); anyMinMaxValueChanged = true; }
	}
	if (is_lift_red_Set())
	{
		bool liftRedChanged = false;
		double v = getLiftRed();
		double min = liftRedMin();
		double max = liftRedMax();
		if (v < min) { v = min; liftRedChanged = true; }
		if (v > max) { v = max; liftRedChanged = true; }
		if (liftRedChanged) { setLiftRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_lift_green_Set())
	{
		bool liftGreenChanged = false;
		double v = getLiftGreen();
		double min = liftGreenMin();
		double max = liftGreenMax();
		if (v < min) { v = min; liftGreenChanged = true; }
		if (v > max) { v = max; liftGreenChanged = true; }
		if (liftGreenChanged) { setLiftGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_lift_blue_Set())
	{
		bool liftBlueChanged = false;
		double v = getLiftBlue();
		double min = liftBlueMin();
		double max = liftBlueMax();
		if (v < min) { v = min; liftBlueChanged = true; }
		if (v > max) { v = max; liftBlueChanged = true; }
		if (liftBlueChanged) { setLiftBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_master_Set())
	{
		bool gammaMasterChanged = false;
		double v = getGammaMaster();
		double min = gammaMasterMin();
		double max = gammaMasterMax();
		if (v < min) { v = min; gammaMasterChanged = true; }
		if (v > max) { v = max; gammaMasterChanged = true; }
		if (gammaMasterChanged) { setGammaMaster(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_red_Set())
	{
		bool gammaRedChanged = false;
		double v = getGammaRed();
		double min = gammaRedMin();
		double max = gammaRedMax();
		if (v < min) { v = min; gammaRedChanged = true; }
		if (v > max) { v = max; gammaRedChanged = true; }
		if (gammaRedChanged) { setGammaRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_green_Set())
	{
		bool gammaGreenChanged = false;
		double v = getGammaGreen();
		double min = gammaGreenMin();
		double max = gammaGreenMax();
		if (v < min) { v = min; gammaGreenChanged = true; }
		if (v > max) { v = max; gammaGreenChanged = true; }
		if (gammaGreenChanged) { setGammaGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_gamma_blue_Set())
	{
		bool gammaBlueChanged = false;
		double v = getGammaBlue();
		double min = gammaBlueMin();
		double max = gammaBlueMax();
		if (v < min) { v = min; gammaBlueChanged = true; }
		if (v > max) { v = max; gammaBlueChanged = true; }
		if (gammaBlueChanged) { setGammaBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_master_Set())
	{
		bool gainMasterChanged = false;
		double v = getGainMaster();
		double min = gainMasterMin();
		double max = gainMasterMax();
		if (v < min) { v = min; gainMasterChanged = true; }
		if (v > max) { v = max; gainMasterChanged = true; }
		if (gainMasterChanged) { setGainMaster(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_red_Set())
	{
		bool gainRedChanged = false;
		double v = getGainRed();
		double min = gainRedMin();
		double max = gainRedMax();
		if (v < min) { v = min; gainRedChanged = true; }
		if (v > max) { v = max; gainRedChanged = true; }
		if (gainRedChanged) { setGainRed(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_green_Set())
	{
		bool gainGreenChanged = false;
		double v = getGainGreen();
		double min = gainGreenMin();
		double max = gainGreenMax();
		if (v < min) { v = min; gainGreenChanged = true; }
		if (v > max) { v = max; gainGreenChanged = true; }
		if (gainGreenChanged) { setGainGreen(v); anyMinMaxValueChanged = true; }
	}
	if (is_gain_blue_Set())
	{
		bool gainBlueChanged = false;
		double v = getGainBlue();
		double min = gainBlueMin();
		double max = gainBlueMax();
		if (v < min) { v = min; gainBlueChanged = true; }
		if (v > max) { v = max; gainBlueChanged = true; }
		if (gainBlueChanged) { setGainBlue(v); anyMinMaxValueChanged = true; }
	}
	if (is_saturation_Set())
	{
		bool saturationChanged = false;
		double v = getSaturation();
		double min = saturationMin();
		double max = saturationMax();
		if (v < min) { v = min; saturationChanged = true; }
		if (v > max) { v = max; saturationChanged = true; }
		if (saturationChanged) { setSaturation(v); anyMinMaxValueChanged = true; }
	}
	if (is_exposure_Set())
	{
		bool exposureChanged = false;
		double v = getExposure();
		double min = exposureMin();
		double max = exposureMax();
		if (v < min) { v = min; exposureChanged = true; }
		if (v > max) { v = max; exposureChanged = true; }
		if (exposureChanged) { setExposure(v); anyMinMaxValueChanged = true; }
	}
	if (is_color_temp_Set())
	{
		bool colorTempChanged = false;
		double v = getColorTemp();
		double min = colorTempMin();
		double max = colorTempMax();
		if (v < min) { v = min; colorTempChanged = true; }
		if (v > max) { v = max; colorTempChanged = true; }
		if (colorTempChanged) { setColorTemp(v); anyMinMaxValueChanged = true; }
	}
	if (is_tint_Set())
	{
		bool tintChanged = false;
		double v = getTint();
		double min = tintMin();
		double max = tintMax();
		if (v < min) { v = min; tintChanged = true; }
		if (v > max) { v = max; tintChanged = true; }
		if (tintChanged) { setTint(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
