/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

#include "OAIWiFiDeviceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWiFiDeviceConfig::OAIWiFiDeviceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWiFiDeviceConfig::OAIWiFiDeviceConfig() {
    this->initializeModel();
}

OAIWiFiDeviceConfig::~OAIWiFiDeviceConfig() {}

void OAIWiFiDeviceConfig::initializeModel() {

    m_wifi_control_isSet = false;
    m_wifi_control_isValid = false;

    m_wifi_network_isSet = false;
    m_wifi_network_isValid = false;

    m_wifi_password_isSet = false;
    m_wifi_password_isValid = false;

    m_wifi_security_isSet = false;
    m_wifi_security_isValid = false;

    m_wifi_ip_config_isSet = false;
    m_wifi_ip_config_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_wifi_ip_change_commit_isSet = false;
    m_wifi_ip_change_commit_isValid = false;
}

void OAIWiFiDeviceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWiFiDeviceConfig::fromJsonObject(QJsonObject json) {

    m_wifi_control_isValid = ::OpenAPI::fromJsonValue(m_wifi_control, json[QString("wifiControl")]);
    m_wifi_control_isSet = !json[QString("wifiControl")].isNull() && m_wifi_control_isValid;

    m_wifi_network_isValid = ::OpenAPI::fromJsonValue(m_wifi_network, json[QString("wifiNetwork")]);
    m_wifi_network_isSet = !json[QString("wifiNetwork")].isNull() && m_wifi_network_isValid;

    m_wifi_password_isValid = ::OpenAPI::fromJsonValue(m_wifi_password, json[QString("wifiPassword")]);
    m_wifi_password_isSet = !json[QString("wifiPassword")].isNull() && m_wifi_password_isValid;

    m_wifi_security_isValid = ::OpenAPI::fromJsonValue(m_wifi_security, json[QString("wifiSecurity")]);
    m_wifi_security_isSet = !json[QString("wifiSecurity")].isNull() && m_wifi_security_isValid;

    m_wifi_ip_config_isValid = ::OpenAPI::fromJsonValue(m_wifi_ip_config, json[QString("wifiIpConfig")]);
    m_wifi_ip_config_isSet = !json[QString("wifiIpConfig")].isNull() && m_wifi_ip_config_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_wifi_ip_change_commit_isValid = ::OpenAPI::fromJsonValue(m_wifi_ip_change_commit, json[QString("wifiIpChangeCommit")]);
    m_wifi_ip_change_commit_isSet = !json[QString("wifiIpChangeCommit")].isNull() && m_wifi_ip_change_commit_isValid;

    applyMinMaxConstraints();
}

QString OAIWiFiDeviceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWiFiDeviceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_wifi_control_isSet) {
        obj.insert(QString("wifiControl"), ::OpenAPI::toJsonValue(m_wifi_control));
    }
    if (m_wifi_network_isSet) {
        obj.insert(QString("wifiNetwork"), ::OpenAPI::toJsonValue(m_wifi_network));
    }
    if (m_wifi_password_isSet) {
        obj.insert(QString("wifiPassword"), ::OpenAPI::toJsonValue(m_wifi_password));
    }
    if (m_wifi_security_isSet) {
        obj.insert(QString("wifiSecurity"), ::OpenAPI::toJsonValue(m_wifi_security));
    }
    if (m_wifi_ip_config_isSet) {
        obj.insert(QString("wifiIpConfig"), ::OpenAPI::toJsonValue(m_wifi_ip_config));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_wifi_ip_change_commit_isSet) {
        obj.insert(QString("wifiIpChangeCommit"), ::OpenAPI::toJsonValue(m_wifi_ip_change_commit));
    }
    return obj;
}

QString OAIWiFiDeviceConfig::getWifiControl() const {
    return m_wifi_control;
}
void OAIWiFiDeviceConfig::setWifiControl(const QString &wifi_control) {
	QString v = wifi_control;
	this->m_wifi_control = v;
    this->m_wifi_control_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_control_Set() const{
    return m_wifi_control_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_control_Valid() const{
    return m_wifi_control_isValid;
}



QString OAIWiFiDeviceConfig::getWifiNetwork() const {
    return m_wifi_network;
}
void OAIWiFiDeviceConfig::setWifiNetwork(const QString &wifi_network) {
	QString v = wifi_network;
	this->m_wifi_network = v;
    this->m_wifi_network_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_network_Set() const{
    return m_wifi_network_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_network_Valid() const{
    return m_wifi_network_isValid;
}



QString OAIWiFiDeviceConfig::getWifiPassword() const {
    return m_wifi_password;
}
void OAIWiFiDeviceConfig::setWifiPassword(const QString &wifi_password) {
	QString v = wifi_password;
	this->m_wifi_password = v;
    this->m_wifi_password_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_password_Set() const{
    return m_wifi_password_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_password_Valid() const{
    return m_wifi_password_isValid;
}



QString OAIWiFiDeviceConfig::getWifiSecurity() const {
    return m_wifi_security;
}
void OAIWiFiDeviceConfig::setWifiSecurity(const QString &wifi_security) {
	QString v = wifi_security;
	this->m_wifi_security = v;
    this->m_wifi_security_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_security_Set() const{
    return m_wifi_security_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_security_Valid() const{
    return m_wifi_security_isValid;
}



QString OAIWiFiDeviceConfig::getWifiIpConfig() const {
    return m_wifi_ip_config;
}
void OAIWiFiDeviceConfig::setWifiIpConfig(const QString &wifi_ip_config) {
	QString v = wifi_ip_config;
	this->m_wifi_ip_config = v;
    this->m_wifi_ip_config_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_ip_config_Set() const{
    return m_wifi_ip_config_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_ip_config_Valid() const{
    return m_wifi_ip_config_isValid;
}



QString OAIWiFiDeviceConfig::getAddress() const {
    return m_address;
}
void OAIWiFiDeviceConfig::setAddress(const QString &address) {
	QString v = address;
	this->m_address = v;
    this->m_address_isSet = true;
}

bool OAIWiFiDeviceConfig::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWiFiDeviceConfig::is_address_Valid() const{
    return m_address_isValid;
}



QString OAIWiFiDeviceConfig::getSubnet() const {
    return m_subnet;
}
void OAIWiFiDeviceConfig::setSubnet(const QString &subnet) {
	QString v = subnet;
	this->m_subnet = v;
    this->m_subnet_isSet = true;
}

bool OAIWiFiDeviceConfig::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIWiFiDeviceConfig::is_subnet_Valid() const{
    return m_subnet_isValid;
}



QString OAIWiFiDeviceConfig::getGateway() const {
    return m_gateway;
}
void OAIWiFiDeviceConfig::setGateway(const QString &gateway) {
	QString v = gateway;
	this->m_gateway = v;
    this->m_gateway_isSet = true;
}

bool OAIWiFiDeviceConfig::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIWiFiDeviceConfig::is_gateway_Valid() const{
    return m_gateway_isValid;
}



qint32 OAIWiFiDeviceConfig::getWifiIpChangeCommit() const {
    return m_wifi_ip_change_commit;
}
void OAIWiFiDeviceConfig::setWifiIpChangeCommit(const qint32 &wifi_ip_change_commit) {
	qint32 v = wifi_ip_change_commit;
	this->m_wifi_ip_change_commit = v;
    this->m_wifi_ip_change_commit_isSet = true;
}

bool OAIWiFiDeviceConfig::is_wifi_ip_change_commit_Set() const{
    return m_wifi_ip_change_commit_isSet;
}

bool OAIWiFiDeviceConfig::is_wifi_ip_change_commit_Valid() const{
    return m_wifi_ip_change_commit_isValid;
}



bool OAIWiFiDeviceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wifi_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_ip_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_ip_change_commit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWiFiDeviceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAIWiFiDeviceConfig::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	if (is_wifi_control_Set())
	{
		bool wifiControlChanged = false;
		QString v = getWifiControl();
		if (wifiControlChanged) { setWifiControl(v); anyMinMaxValueChanged = true; }
	}
	if (is_wifi_network_Set())
	{
		bool wifiNetworkChanged = false;
		QString v = getWifiNetwork();
		if (wifiNetworkChanged) { setWifiNetwork(v); anyMinMaxValueChanged = true; }
	}
	if (is_wifi_password_Set())
	{
		bool wifiPasswordChanged = false;
		QString v = getWifiPassword();
		if (wifiPasswordChanged) { setWifiPassword(v); anyMinMaxValueChanged = true; }
	}
	if (is_wifi_security_Set())
	{
		bool wifiSecurityChanged = false;
		QString v = getWifiSecurity();
		if (wifiSecurityChanged) { setWifiSecurity(v); anyMinMaxValueChanged = true; }
	}
	if (is_wifi_ip_config_Set())
	{
		bool wifiIpConfigChanged = false;
		QString v = getWifiIpConfig();
		if (wifiIpConfigChanged) { setWifiIpConfig(v); anyMinMaxValueChanged = true; }
	}
	if (is_address_Set())
	{
		bool addressChanged = false;
		QString v = getAddress();
		if (addressChanged) { setAddress(v); anyMinMaxValueChanged = true; }
	}
	if (is_subnet_Set())
	{
		bool subnetChanged = false;
		QString v = getSubnet();
		if (subnetChanged) { setSubnet(v); anyMinMaxValueChanged = true; }
	}
	if (is_gateway_Set())
	{
		bool gatewayChanged = false;
		QString v = getGateway();
		if (gatewayChanged) { setGateway(v); anyMinMaxValueChanged = true; }
	}
	if (is_wifi_ip_change_commit_Set())
	{
		bool wifiIpChangeCommitChanged = false;
		qint32 v = getWifiIpChangeCommit();
		if (wifiIpChangeCommitChanged) { setWifiIpChangeCommit(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
