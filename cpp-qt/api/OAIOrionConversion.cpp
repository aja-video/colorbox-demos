/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAIOrionConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrionConversion::OAIOrionConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrionConversion::OAIOrionConversion() {
    this->initializeModel();
}

OAIOrionConversion::~OAIOrionConversion() {}

void OAIOrionConversion::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrionConversion::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrionConversion::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HLG to SDR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::HLG_TO_SDR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SDR to HLG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::SDR_TO_HLG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG Compress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::HLG_COMPRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ to SDR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::PQ_TO_SDR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SDR to PQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::SDR_TO_PQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ Compress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::PQ_COMPRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HLG to PQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::HLG_TO_PQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PQ to HLG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrionConversion::PQ_TO_HLG;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrionConversion::fromJsonValue(QJsonValue json) {
fromJson(json.toString());

    applyMinMaxConstraints();
}

QString OAIOrionConversion::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrionConversion::HLG_TO_SDR:
            val = "HLG to SDR";
            break;
        case eOAIOrionConversion::SDR_TO_HLG:
            val = "SDR to HLG";
            break;
        case eOAIOrionConversion::HLG_COMPRESS:
            val = "HLG Compress";
            break;
        case eOAIOrionConversion::PQ_TO_SDR:
            val = "PQ to SDR";
            break;
        case eOAIOrionConversion::SDR_TO_PQ:
            val = "SDR to PQ";
            break;
        case eOAIOrionConversion::PQ_COMPRESS:
            val = "PQ Compress";
            break;
        case eOAIOrionConversion::HLG_TO_PQ:
            val = "HLG to PQ";
            break;
        case eOAIOrionConversion::PQ_TO_HLG:
            val = "PQ to HLG";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrionConversion::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrionConversion::eOAIOrionConversion OAIOrionConversion::getValue() const {
    return m_value;
}

void OAIOrionConversion::setValue(const OAIOrionConversion::eOAIOrionConversion& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrionConversion::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrionConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

bool OAIOrionConversion::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
