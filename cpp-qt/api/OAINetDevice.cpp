/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *       Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

#include "OAINetDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetDevice::OAINetDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetDevice::OAINetDevice() {
    this->initializeModel();
}

OAINetDevice::~OAINetDevice() {}

void OAINetDevice::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_active_params_isSet = false;
    m_active_params_isValid = false;

    m_staged_params_isSet = false;
    m_staged_params_isValid = false;
}

void OAINetDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetDevice::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_active_params_isValid = ::OpenAPI::fromJsonValue(m_active_params, json[QString("activeParams")]);
    m_active_params_isSet = !json[QString("activeParams")].isNull() && m_active_params_isValid;

    m_staged_params_isValid = ::OpenAPI::fromJsonValue(m_staged_params, json[QString("stagedParams")]);
    m_staged_params_isSet = !json[QString("stagedParams")].isNull() && m_staged_params_isValid;

    applyMinMaxConstraints();
}

QString OAINetDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_active_params.isSet()) {
        obj.insert(QString("activeParams"), ::OpenAPI::toJsonValue(m_active_params));
    }
    if (m_staged_params.isSet()) {
        obj.insert(QString("stagedParams"), ::OpenAPI::toJsonValue(m_staged_params));
    }
    return obj;
}

OAINetConfig OAINetDevice::getConfig() const {
    return m_config;
}
void OAINetDevice::setConfig(const OAINetConfig &config) {
	OAINetConfig v = config;
	this->m_config = v;
    this->m_config_isSet = true;
}

bool OAINetDevice::is_config_Set() const{
    return m_config_isSet;
}

bool OAINetDevice::is_config_Valid() const{
    return m_config_isValid;
}


OAINetStatus OAINetDevice::getStatus() const {
    return m_status;
}
void OAINetDevice::setStatus(const OAINetStatus &status) {
	OAINetStatus v = status;
	this->m_status = v;
    this->m_status_isSet = true;
}

bool OAINetDevice::is_status_Set() const{
    return m_status_isSet;
}

bool OAINetDevice::is_status_Valid() const{
    return m_status_isValid;
}


OAINetParams OAINetDevice::getActiveParams() const {
    return m_active_params;
}
void OAINetDevice::setActiveParams(const OAINetParams &active_params) {
	OAINetParams v = active_params;
	this->m_active_params = v;
    this->m_active_params_isSet = true;
}

bool OAINetDevice::is_active_params_Set() const{
    return m_active_params_isSet;
}

bool OAINetDevice::is_active_params_Valid() const{
    return m_active_params_isValid;
}


OAINetParams OAINetDevice::getStagedParams() const {
    return m_staged_params;
}
void OAINetDevice::setStagedParams(const OAINetParams &staged_params) {
	OAINetParams v = staged_params;
	this->m_staged_params = v;
    this->m_staged_params_isSet = true;
}

bool OAINetDevice::is_staged_params_Set() const{
    return m_staged_params_isSet;
}

bool OAINetDevice::is_staged_params_Valid() const{
    return m_staged_params_isValid;
}


bool OAINetDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_staged_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

bool OAINetDevice::applyMinMaxConstraints() {
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

} // namespace OpenAPI
