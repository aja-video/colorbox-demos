/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "SystemPassword.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SystemPassword::SystemPassword()
{
    m_CurrentPassword = utility::conversions::to_string_t("");
    m_CurrentPasswordIsSet = false;
    m_NewPassword = utility::conversions::to_string_t("");
    m_NewPasswordIsSet = false;
}

SystemPassword::~SystemPassword()
{
}

void SystemPassword::validate()
{
    // TODO: implement validation
}

bool SystemPassword::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (currentPasswordIsSet())
	{
		bool currentPasswordChanged = false;
		utility::string_t v = getCurrentPassword();
		if (currentPasswordChanged) { setCurrentPassword(v); anyMinMaxValueChanged = true; }
	}
	if (newPasswordIsSet())
	{
		bool newPasswordChanged = false;
		utility::string_t v = getNewPassword();
		if (newPasswordChanged) { setNewPassword(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value SystemPassword::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CurrentPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("currentPassword"))] = ModelBase::toJson(m_CurrentPassword);
    }
    if(m_NewPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("newPassword"))] = ModelBase::toJson(m_NewPassword);
    }

    return val;
}

bool SystemPassword::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("currentPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currentPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currentPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_currentPassword);
            setCurrentPassword(refVal_currentPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("newPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("newPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_newPassword);
            setNewPassword(refVal_newPassword);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void SystemPassword::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CurrentPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currentPassword")), m_CurrentPassword));
    }
    if(m_NewPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("newPassword")), m_NewPassword));
    }
}

bool SystemPassword::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("currentPassword"))))
    {
        utility::string_t refVal_currentPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currentPassword"))), refVal_currentPassword );
        setCurrentPassword(refVal_currentPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("newPassword"))))
    {
        utility::string_t refVal_newPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("newPassword"))), refVal_newPassword );
        setNewPassword(refVal_newPassword);
    }
    
    applyMinMaxConstraints();
    return ok;
}

utility::string_t SystemPassword::getCurrentPassword() const
{
    return m_CurrentPassword;
}

void SystemPassword::setCurrentPassword(const utility::string_t& value)
{
	utility::string_t v = value;
    m_CurrentPassword = v;
    m_CurrentPasswordIsSet = true;
}

bool SystemPassword::currentPasswordIsSet() const
{
    return m_CurrentPasswordIsSet;
}

void SystemPassword::unsetCurrentPassword()
{
    m_CurrentPasswordIsSet = false;
}



utility::string_t SystemPassword::getNewPassword() const
{
    return m_NewPassword;
}

void SystemPassword::setNewPassword(const utility::string_t& value)
{
	utility::string_t v = value;
    m_NewPassword = v;
    m_NewPasswordIsSet = true;
}

bool SystemPassword::newPasswordIsSet() const
{
    return m_NewPasswordIsSet;
}

void SystemPassword::unsetNewPassword()
{
    m_NewPasswordIsSet = false;
}



}
}
}
}


