/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * ColorfrontLiveMode.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontLiveMode_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontLiveMode_H_


#include "ModelBase.h"

#include "model/ColorfrontDynRangeGamutLiveModeOut.h"
#include "model/ColorfrontDynRangeGamutLiveModeIn.h"
#include "model/ColorfrontEngine.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ColorfrontLiveMode
    : public ModelBase
{
public:
    ColorfrontLiveMode();
    virtual ~ColorfrontLiveMode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ColorfrontLiveMode members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontEngine> getEngine() const;
    bool engineIsSet() const;
    void unsetEngine();

    void setEngine(const std::shared_ptr<ColorfrontEngine>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> getInDynRangeGamut() const;
    bool inDynRangeGamutIsSet() const;
    void unsetInDynRangeGamut();

    void setInDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> getOutDynRangeGamut() const;
    bool outDynRangeGamutIsSet() const;
    void unsetOutDynRangeGamut();

    void setOutDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut>& value);


    /// <summary>
    /// 
    /// </summary>
    bool isSdrPreview() const;
    bool sdrPreviewIsSet() const;
    void unsetSdrPreview();

    void setSdrPreview(bool value);


    /// <summary>
    /// 
    /// </summary>
    double getHdrAmount() const;
    bool hdrAmountIsSet() const;
    void unsetHdrAmount();

    void setHdrAmount(double value);

    double hdrAmountMin() const;
    double hdrAmountMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getAmbLightComp() const;
    bool ambLightCompIsSet() const;
    void unsetAmbLightComp();

    void setAmbLightComp(double value);

    double ambLightCompMin() const;
    double ambLightCompMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getHdrLogLook() const;
    bool hdrLogLookIsSet() const;
    void unsetHdrLogLook();

    void setHdrLogLook(double value);

    double hdrLogLookMin() const;
    double hdrLogLookMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getSdrSoftness() const;
    bool sdrSoftnessIsSet() const;
    void unsetSdrSoftness();

    void setSdrSoftness(double value);

    double sdrSoftnessMin() const;
    double sdrSoftnessMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getLiftMaster() const;
    bool liftMasterIsSet() const;
    void unsetLiftMaster();

    void setLiftMaster(double value);

    double liftMasterMin() const;
    double liftMasterMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getLiftRed() const;
    bool liftRedIsSet() const;
    void unsetLiftRed();

    void setLiftRed(double value);

    double liftRedMin() const;
    double liftRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getLiftGreen() const;
    bool liftGreenIsSet() const;
    void unsetLiftGreen();

    void setLiftGreen(double value);

    double liftGreenMin() const;
    double liftGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getLiftBlue() const;
    bool liftBlueIsSet() const;
    void unsetLiftBlue();

    void setLiftBlue(double value);

    double liftBlueMin() const;
    double liftBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaMaster() const;
    bool gammaMasterIsSet() const;
    void unsetGammaMaster();

    void setGammaMaster(double value);

    double gammaMasterMin() const;
    double gammaMasterMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaRed() const;
    bool gammaRedIsSet() const;
    void unsetGammaRed();

    void setGammaRed(double value);

    double gammaRedMin() const;
    double gammaRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaGreen() const;
    bool gammaGreenIsSet() const;
    void unsetGammaGreen();

    void setGammaGreen(double value);

    double gammaGreenMin() const;
    double gammaGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaBlue() const;
    bool gammaBlueIsSet() const;
    void unsetGammaBlue();

    void setGammaBlue(double value);

    double gammaBlueMin() const;
    double gammaBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainMaster() const;
    bool gainMasterIsSet() const;
    void unsetGainMaster();

    void setGainMaster(double value);

    double gainMasterMin() const;
    double gainMasterMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainRed() const;
    bool gainRedIsSet() const;
    void unsetGainRed();

    void setGainRed(double value);

    double gainRedMin() const;
    double gainRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainGreen() const;
    bool gainGreenIsSet() const;
    void unsetGainGreen();

    void setGainGreen(double value);

    double gainGreenMin() const;
    double gainGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainBlue() const;
    bool gainBlueIsSet() const;
    void unsetGainBlue();

    void setGainBlue(double value);

    double gainBlueMin() const;
    double gainBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getSaturation() const;
    bool saturationIsSet() const;
    void unsetSaturation();

    void setSaturation(double value);

    double saturationMin() const;
    double saturationMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getExposure() const;
    bool exposureIsSet() const;
    void unsetExposure();

    void setExposure(double value);

    double exposureMin() const;
    double exposureMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getColorTemp() const;
    bool colorTempIsSet() const;
    void unsetColorTemp();

    void setColorTemp(double value);

    double colorTempMin() const;
    double colorTempMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getTint() const;
    bool tintIsSet() const;
    void unsetTint();

    void setTint(double value);

    double tintMin() const;
    double tintMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getPqOutputNitLevel() const;
    bool pqOutputNitLevelIsSet() const;
    void unsetPqOutputNitLevel();

    void setPqOutputNitLevel(double value);

    double pqOutputNitLevelMin() const;
    double pqOutputNitLevelMax() const;

    /// <summary>
    /// 
    /// </summary>
    bool isP3ColorspaceClamp() const;
    bool p3ColorspaceClampIsSet() const;
    void unsetP3ColorspaceClamp();

    void setP3ColorspaceClamp(bool value);


    /// <summary>
    /// 
    /// </summary>
    double getBt2408Mode() const;
    bool bt2408ModeIsSet() const;
    void unsetBt2408Mode();

    void setBt2408Mode(double value);

    double bt2408ModeMin() const;
    double bt2408ModeMax() const;


protected:
    std::shared_ptr<ColorfrontEngine> m_Engine;
    bool m_EngineIsSet;
    std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> m_InDynRangeGamut;
    bool m_InDynRangeGamutIsSet;
    std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> m_OutDynRangeGamut;
    bool m_OutDynRangeGamutIsSet;
    bool m_SdrPreview;
    bool m_SdrPreviewIsSet;
    double m_HdrAmount;
    bool m_HdrAmountIsSet;
    double m_AmbLightComp;
    bool m_AmbLightCompIsSet;
    double m_HdrLogLook;
    bool m_HdrLogLookIsSet;
    double m_SdrSoftness;
    bool m_SdrSoftnessIsSet;
    double m_LiftMaster;
    bool m_LiftMasterIsSet;
    double m_LiftRed;
    bool m_LiftRedIsSet;
    double m_LiftGreen;
    bool m_LiftGreenIsSet;
    double m_LiftBlue;
    bool m_LiftBlueIsSet;
    double m_GammaMaster;
    bool m_GammaMasterIsSet;
    double m_GammaRed;
    bool m_GammaRedIsSet;
    double m_GammaGreen;
    bool m_GammaGreenIsSet;
    double m_GammaBlue;
    bool m_GammaBlueIsSet;
    double m_GainMaster;
    bool m_GainMasterIsSet;
    double m_GainRed;
    bool m_GainRedIsSet;
    double m_GainGreen;
    bool m_GainGreenIsSet;
    double m_GainBlue;
    bool m_GainBlueIsSet;
    double m_Saturation;
    bool m_SaturationIsSet;
    double m_Exposure;
    bool m_ExposureIsSet;
    double m_ColorTemp;
    bool m_ColorTempIsSet;
    double m_Tint;
    bool m_TintIsSet;
    double m_PqOutputNitLevel;
    bool m_PqOutputNitLevelIsSet;
    bool m_P3ColorspaceClamp;
    bool m_P3ColorspaceClampIsSet;
    double m_Bt2408Mode;
    bool m_Bt2408ModeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontLiveMode_H_ */
