/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * Status.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Status_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Status_H_


#include "ModelBase.h"

#include "model/StatusInfo.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Status
    : public ModelBase
{
public:
    Status();
    virtual ~Status();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Status members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StatusInfo> getDeviceDieTemp() const;
    bool deviceDieTempIsSet() const;
    void unsetDeviceDieTemp();

    void setDeviceDieTemp(const std::shared_ptr<StatusInfo>& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemDate() const;
    bool systemDateIsSet() const;
    void unsetSystemDate();

    void setSystemDate(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemTime() const;
    bool systemTimeIsSet() const;
    void unsetSystemTime();

    void setSystemTime(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemUptime() const;
    bool systemUptimeIsSet() const;
    void unsetSystemUptime();

    void setSystemUptime(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemOsName() const;
    bool systemOsNameIsSet() const;
    void unsetSystemOsName();

    void setSystemOsName(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemSerialNumber() const;
    bool systemSerialNumberIsSet() const;
    void unsetSystemSerialNumber();

    void setSystemSerialNumber(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemBoardRevision() const;
    bool systemBoardRevisionIsSet() const;
    void unsetSystemBoardRevision();

    void setSystemBoardRevision(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemCatalogNumber() const;
    bool systemCatalogNumberIsSet() const;
    void unsetSystemCatalogNumber();

    void setSystemCatalogNumber(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemAppSwVersion() const;
    bool systemAppSwVersionIsSet() const;
    void unsetSystemAppSwVersion();

    void setSystemAppSwVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemSupportInfo() const;
    bool systemSupportInfoIsSet() const;
    void unsetSystemSupportInfo();

    void setSystemSupportInfo(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    bool isEulaAccepted() const;
    bool eulaAcceptedIsSet() const;
    void unsetEulaAccepted();

    void setEulaAccepted(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isLicenseActive() const;
    bool licenseActiveIsSet() const;
    void unsetLicenseActive();

    void setLicenseActive(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isBbcLutsLicensed() const;
    bool bbcLutsLicensedIsSet() const;
    void unsetBbcLutsLicensed();

    void setBbcLutsLicensed(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isOrionEngineLicensed() const;
    bool orionEngineLicensedIsSet() const;
    void unsetOrionEngineLicensed();

    void setOrionEngineLicensed(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isColorfrontEngineLicensed() const;
    bool colorfrontEngineLicensedIsSet() const;
    void unsetColorfrontEngineLicensed();

    void setColorfrontEngineLicensed(bool value);


    /// <summary>
    /// 
    /// </summary>
    int32_t getShutdownTime() const;
    bool shutdownTimeIsSet() const;
    void unsetShutdownTime();

    void setShutdownTime(int32_t value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColorfrontTransformVersion() const;
    bool colorfrontTransformVersionIsSet() const;
    void unsetColorfrontTransformVersion();

    void setColorfrontTransformVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColorfrontEngineVersion() const;
    bool colorfrontEngineVersionIsSet() const;
    void unsetColorfrontEngineVersion();

    void setColorfrontEngineVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrionVersion() const;
    bool orionVersionIsSet() const;
    void unsetOrionVersion();

    void setOrionVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBbcLutVersion() const;
    bool bbcLutVersionIsSet() const;
    void unsetBbcLutVersion();

    void setBbcLutVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNbcuLutVersion() const;
    bool nbcuLutVersionIsSet() const;
    void unsetNbcuLutVersion();

    void setNbcuLutVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    bool isCpuBusy() const;
    bool cpuBusyIsSet() const;
    void unsetCpuBusy();

    void setCpuBusy(bool value);



protected:
    std::shared_ptr<StatusInfo> m_DeviceDieTemp;
    bool m_DeviceDieTempIsSet;
    utility::string_t m_SystemDate;
    bool m_SystemDateIsSet;
    utility::string_t m_SystemTime;
    bool m_SystemTimeIsSet;
    utility::string_t m_SystemUptime;
    bool m_SystemUptimeIsSet;
    utility::string_t m_SystemOsName;
    bool m_SystemOsNameIsSet;
    utility::string_t m_SystemSerialNumber;
    bool m_SystemSerialNumberIsSet;
    utility::string_t m_SystemBoardRevision;
    bool m_SystemBoardRevisionIsSet;
    utility::string_t m_SystemCatalogNumber;
    bool m_SystemCatalogNumberIsSet;
    utility::string_t m_SystemAppSwVersion;
    bool m_SystemAppSwVersionIsSet;
    utility::string_t m_SystemSupportInfo;
    bool m_SystemSupportInfoIsSet;
    bool m_EulaAccepted;
    bool m_EulaAcceptedIsSet;
    bool m_LicenseActive;
    bool m_LicenseActiveIsSet;
    bool m_BbcLutsLicensed;
    bool m_BbcLutsLicensedIsSet;
    bool m_OrionEngineLicensed;
    bool m_OrionEngineLicensedIsSet;
    bool m_ColorfrontEngineLicensed;
    bool m_ColorfrontEngineLicensedIsSet;
    int32_t m_ShutdownTime;
    bool m_ShutdownTimeIsSet;
    utility::string_t m_ColorfrontTransformVersion;
    bool m_ColorfrontTransformVersionIsSet;
    utility::string_t m_ColorfrontEngineVersion;
    bool m_ColorfrontEngineVersionIsSet;
    utility::string_t m_OrionVersion;
    bool m_OrionVersionIsSet;
    utility::string_t m_BbcLutVersion;
    bool m_BbcLutVersionIsSet;
    utility::string_t m_NbcuLutVersion;
    bool m_NbcuLutVersionIsSet;
    bool m_CpuBusy;
    bool m_CpuBusyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Status_H_ */
