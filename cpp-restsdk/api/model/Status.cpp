/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "Status.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Status::Status()
{
    m_DeviceDieTempIsSet = false;
    m_SystemDate = utility::conversions::to_string_t("");
    m_SystemDateIsSet = false;
    m_SystemTime = utility::conversions::to_string_t("");
    m_SystemTimeIsSet = false;
    m_SystemUptime = utility::conversions::to_string_t("");
    m_SystemUptimeIsSet = false;
    m_SystemOsName = utility::conversions::to_string_t("");
    m_SystemOsNameIsSet = false;
    m_SystemSerialNumber = utility::conversions::to_string_t("");
    m_SystemSerialNumberIsSet = false;
    m_SystemCatalogNumber = utility::conversions::to_string_t("");
    m_SystemCatalogNumberIsSet = false;
    m_SystemAppSwVersion = utility::conversions::to_string_t("");
    m_SystemAppSwVersionIsSet = false;
    m_SystemSupportInfo = utility::conversions::to_string_t("");
    m_SystemSupportInfoIsSet = false;
    m_EulaAccepted = false;
    m_EulaAcceptedIsSet = false;
    m_LicenseActive = false;
    m_LicenseActiveIsSet = false;
    m_BbcLutsLicensed = false;
    m_BbcLutsLicensedIsSet = false;
    m_OrionEngineLicensed = false;
    m_OrionEngineLicensedIsSet = false;
    m_ColorfrontEngineLicensed = false;
    m_ColorfrontEngineLicensedIsSet = false;
    m_ShutdownTime = 0;
    m_ShutdownTimeIsSet = false;
    m_ColorfrontTransformVersion = utility::conversions::to_string_t("");
    m_ColorfrontTransformVersionIsSet = false;
    m_ColorfrontEngineVersion = utility::conversions::to_string_t("");
    m_ColorfrontEngineVersionIsSet = false;
    m_OrionVersion = utility::conversions::to_string_t("");
    m_OrionVersionIsSet = false;
    m_BbcLutVersion = utility::conversions::to_string_t("");
    m_BbcLutVersionIsSet = false;
    m_NbcuLutVersion = utility::conversions::to_string_t("");
    m_NbcuLutVersionIsSet = false;
    m_CpuBusy = false;
    m_CpuBusyIsSet = false;
}

Status::~Status()
{
}

void Status::validate()
{
    // TODO: implement validation
}

bool Status::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (systemDateIsSet())
	{
		bool systemDateChanged = false;
		utility::string_t v = getSystemDate();
		if (systemDateChanged) { setSystemDate(v); anyMinMaxValueChanged = true; }
	}
	if (systemTimeIsSet())
	{
		bool systemTimeChanged = false;
		utility::string_t v = getSystemTime();
		if (systemTimeChanged) { setSystemTime(v); anyMinMaxValueChanged = true; }
	}
	if (systemUptimeIsSet())
	{
		bool systemUptimeChanged = false;
		utility::string_t v = getSystemUptime();
		if (systemUptimeChanged) { setSystemUptime(v); anyMinMaxValueChanged = true; }
	}
	if (systemOsNameIsSet())
	{
		bool systemOsNameChanged = false;
		utility::string_t v = getSystemOsName();
		if (systemOsNameChanged) { setSystemOsName(v); anyMinMaxValueChanged = true; }
	}
	if (systemSerialNumberIsSet())
	{
		bool systemSerialNumberChanged = false;
		utility::string_t v = getSystemSerialNumber();
		if (systemSerialNumberChanged) { setSystemSerialNumber(v); anyMinMaxValueChanged = true; }
	}
	if (systemCatalogNumberIsSet())
	{
		bool systemCatalogNumberChanged = false;
		utility::string_t v = getSystemCatalogNumber();
		if (systemCatalogNumberChanged) { setSystemCatalogNumber(v); anyMinMaxValueChanged = true; }
	}
	if (systemAppSwVersionIsSet())
	{
		bool systemAppSwVersionChanged = false;
		utility::string_t v = getSystemAppSwVersion();
		if (systemAppSwVersionChanged) { setSystemAppSwVersion(v); anyMinMaxValueChanged = true; }
	}
	if (systemSupportInfoIsSet())
	{
		bool systemSupportInfoChanged = false;
		utility::string_t v = getSystemSupportInfo();
		if (systemSupportInfoChanged) { setSystemSupportInfo(v); anyMinMaxValueChanged = true; }
	}
	if (shutdownTimeIsSet())
	{
		bool shutdownTimeChanged = false;
		int32_t v = getShutdownTime();
		if (shutdownTimeChanged) { setShutdownTime(v); anyMinMaxValueChanged = true; }
	}
	if (colorfrontTransformVersionIsSet())
	{
		bool colorfrontTransformVersionChanged = false;
		utility::string_t v = getColorfrontTransformVersion();
		if (colorfrontTransformVersionChanged) { setColorfrontTransformVersion(v); anyMinMaxValueChanged = true; }
	}
	if (colorfrontEngineVersionIsSet())
	{
		bool colorfrontEngineVersionChanged = false;
		utility::string_t v = getColorfrontEngineVersion();
		if (colorfrontEngineVersionChanged) { setColorfrontEngineVersion(v); anyMinMaxValueChanged = true; }
	}
	if (orionVersionIsSet())
	{
		bool orionVersionChanged = false;
		utility::string_t v = getOrionVersion();
		if (orionVersionChanged) { setOrionVersion(v); anyMinMaxValueChanged = true; }
	}
	if (bbcLutVersionIsSet())
	{
		bool bbcLutVersionChanged = false;
		utility::string_t v = getBbcLutVersion();
		if (bbcLutVersionChanged) { setBbcLutVersion(v); anyMinMaxValueChanged = true; }
	}
	if (nbcuLutVersionIsSet())
	{
		bool nbcuLutVersionChanged = false;
		utility::string_t v = getNbcuLutVersion();
		if (nbcuLutVersionChanged) { setNbcuLutVersion(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value Status::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DeviceDieTempIsSet)
    {
        val[utility::conversions::to_string_t(U("deviceDieTemp"))] = ModelBase::toJson(m_DeviceDieTemp);
    }
    if(m_SystemDateIsSet)
    {
        val[utility::conversions::to_string_t(U("systemDate"))] = ModelBase::toJson(m_SystemDate);
    }
    if(m_SystemTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("systemTime"))] = ModelBase::toJson(m_SystemTime);
    }
    if(m_SystemUptimeIsSet)
    {
        val[utility::conversions::to_string_t(U("systemUptime"))] = ModelBase::toJson(m_SystemUptime);
    }
    if(m_SystemOsNameIsSet)
    {
        val[utility::conversions::to_string_t(U("systemOsName"))] = ModelBase::toJson(m_SystemOsName);
    }
    if(m_SystemSerialNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("systemSerialNumber"))] = ModelBase::toJson(m_SystemSerialNumber);
    }
    if(m_SystemCatalogNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("systemCatalogNumber"))] = ModelBase::toJson(m_SystemCatalogNumber);
    }
    if(m_SystemAppSwVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("systemAppSwVersion"))] = ModelBase::toJson(m_SystemAppSwVersion);
    }
    if(m_SystemSupportInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("systemSupportInfo"))] = ModelBase::toJson(m_SystemSupportInfo);
    }
    if(m_EulaAcceptedIsSet)
    {
        val[utility::conversions::to_string_t(U("eulaAccepted"))] = ModelBase::toJson(m_EulaAccepted);
    }
    if(m_LicenseActiveIsSet)
    {
        val[utility::conversions::to_string_t(U("licenseActive"))] = ModelBase::toJson(m_LicenseActive);
    }
    if(m_BbcLutsLicensedIsSet)
    {
        val[utility::conversions::to_string_t(U("bbcLutsLicensed"))] = ModelBase::toJson(m_BbcLutsLicensed);
    }
    if(m_OrionEngineLicensedIsSet)
    {
        val[utility::conversions::to_string_t(U("orionEngineLicensed"))] = ModelBase::toJson(m_OrionEngineLicensed);
    }
    if(m_ColorfrontEngineLicensedIsSet)
    {
        val[utility::conversions::to_string_t(U("colorfrontEngineLicensed"))] = ModelBase::toJson(m_ColorfrontEngineLicensed);
    }
    if(m_ShutdownTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("shutdownTime"))] = ModelBase::toJson(m_ShutdownTime);
    }
    if(m_ColorfrontTransformVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("colorfrontTransformVersion"))] = ModelBase::toJson(m_ColorfrontTransformVersion);
    }
    if(m_ColorfrontEngineVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("colorfrontEngineVersion"))] = ModelBase::toJson(m_ColorfrontEngineVersion);
    }
    if(m_OrionVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("orionVersion"))] = ModelBase::toJson(m_OrionVersion);
    }
    if(m_BbcLutVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("bbcLutVersion"))] = ModelBase::toJson(m_BbcLutVersion);
    }
    if(m_NbcuLutVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("nbcuLutVersion"))] = ModelBase::toJson(m_NbcuLutVersion);
    }
    if(m_CpuBusyIsSet)
    {
        val[utility::conversions::to_string_t(U("cpuBusy"))] = ModelBase::toJson(m_CpuBusy);
    }

    return val;
}

bool Status::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("deviceDieTemp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deviceDieTemp")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StatusInfo> refVal_deviceDieTemp;
            ok &= ModelBase::fromJson(fieldValue, refVal_deviceDieTemp);
            setDeviceDieTemp(refVal_deviceDieTemp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemDate);
            setSystemDate(refVal_systemDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemTime);
            setSystemTime(refVal_systemTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemUptime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemUptime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemUptime;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemUptime);
            setSystemUptime(refVal_systemUptime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemOsName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemOsName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemOsName;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemOsName);
            setSystemOsName(refVal_systemOsName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemSerialNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemSerialNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemSerialNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemSerialNumber);
            setSystemSerialNumber(refVal_systemSerialNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemCatalogNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemCatalogNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemCatalogNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemCatalogNumber);
            setSystemCatalogNumber(refVal_systemCatalogNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemAppSwVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemAppSwVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemAppSwVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemAppSwVersion);
            setSystemAppSwVersion(refVal_systemAppSwVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemSupportInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemSupportInfo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_systemSupportInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_systemSupportInfo);
            setSystemSupportInfo(refVal_systemSupportInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eulaAccepted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eulaAccepted")));
        if(!fieldValue.is_null())
        {
            bool refVal_eulaAccepted;
            ok &= ModelBase::fromJson(fieldValue, refVal_eulaAccepted);
            setEulaAccepted(refVal_eulaAccepted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenseActive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenseActive")));
        if(!fieldValue.is_null())
        {
            bool refVal_licenseActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_licenseActive);
            setLicenseActive(refVal_licenseActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bbcLutsLicensed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bbcLutsLicensed")));
        if(!fieldValue.is_null())
        {
            bool refVal_bbcLutsLicensed;
            ok &= ModelBase::fromJson(fieldValue, refVal_bbcLutsLicensed);
            setBbcLutsLicensed(refVal_bbcLutsLicensed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orionEngineLicensed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orionEngineLicensed")));
        if(!fieldValue.is_null())
        {
            bool refVal_orionEngineLicensed;
            ok &= ModelBase::fromJson(fieldValue, refVal_orionEngineLicensed);
            setOrionEngineLicensed(refVal_orionEngineLicensed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("colorfrontEngineLicensed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("colorfrontEngineLicensed")));
        if(!fieldValue.is_null())
        {
            bool refVal_colorfrontEngineLicensed;
            ok &= ModelBase::fromJson(fieldValue, refVal_colorfrontEngineLicensed);
            setColorfrontEngineLicensed(refVal_colorfrontEngineLicensed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shutdownTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shutdownTime")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_shutdownTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_shutdownTime);
            setShutdownTime(refVal_shutdownTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("colorfrontTransformVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("colorfrontTransformVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_colorfrontTransformVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_colorfrontTransformVersion);
            setColorfrontTransformVersion(refVal_colorfrontTransformVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("colorfrontEngineVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("colorfrontEngineVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_colorfrontEngineVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_colorfrontEngineVersion);
            setColorfrontEngineVersion(refVal_colorfrontEngineVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orionVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orionVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_orionVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_orionVersion);
            setOrionVersion(refVal_orionVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bbcLutVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bbcLutVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bbcLutVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_bbcLutVersion);
            setBbcLutVersion(refVal_bbcLutVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nbcuLutVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nbcuLutVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nbcuLutVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_nbcuLutVersion);
            setNbcuLutVersion(refVal_nbcuLutVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpuBusy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpuBusy")));
        if(!fieldValue.is_null())
        {
            bool refVal_cpuBusy;
            ok &= ModelBase::fromJson(fieldValue, refVal_cpuBusy);
            setCpuBusy(refVal_cpuBusy);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void Status::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DeviceDieTempIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deviceDieTemp")), m_DeviceDieTemp));
    }
    if(m_SystemDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemDate")), m_SystemDate));
    }
    if(m_SystemTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemTime")), m_SystemTime));
    }
    if(m_SystemUptimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemUptime")), m_SystemUptime));
    }
    if(m_SystemOsNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemOsName")), m_SystemOsName));
    }
    if(m_SystemSerialNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemSerialNumber")), m_SystemSerialNumber));
    }
    if(m_SystemCatalogNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemCatalogNumber")), m_SystemCatalogNumber));
    }
    if(m_SystemAppSwVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemAppSwVersion")), m_SystemAppSwVersion));
    }
    if(m_SystemSupportInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemSupportInfo")), m_SystemSupportInfo));
    }
    if(m_EulaAcceptedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eulaAccepted")), m_EulaAccepted));
    }
    if(m_LicenseActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenseActive")), m_LicenseActive));
    }
    if(m_BbcLutsLicensedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bbcLutsLicensed")), m_BbcLutsLicensed));
    }
    if(m_OrionEngineLicensedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orionEngineLicensed")), m_OrionEngineLicensed));
    }
    if(m_ColorfrontEngineLicensedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("colorfrontEngineLicensed")), m_ColorfrontEngineLicensed));
    }
    if(m_ShutdownTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shutdownTime")), m_ShutdownTime));
    }
    if(m_ColorfrontTransformVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("colorfrontTransformVersion")), m_ColorfrontTransformVersion));
    }
    if(m_ColorfrontEngineVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("colorfrontEngineVersion")), m_ColorfrontEngineVersion));
    }
    if(m_OrionVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orionVersion")), m_OrionVersion));
    }
    if(m_BbcLutVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bbcLutVersion")), m_BbcLutVersion));
    }
    if(m_NbcuLutVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nbcuLutVersion")), m_NbcuLutVersion));
    }
    if(m_CpuBusyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpuBusy")), m_CpuBusy));
    }
}

bool Status::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("deviceDieTemp"))))
    {
        std::shared_ptr<StatusInfo> refVal_deviceDieTemp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deviceDieTemp"))), refVal_deviceDieTemp );
        setDeviceDieTemp(refVal_deviceDieTemp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemDate"))))
    {
        utility::string_t refVal_systemDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemDate"))), refVal_systemDate );
        setSystemDate(refVal_systemDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemTime"))))
    {
        utility::string_t refVal_systemTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemTime"))), refVal_systemTime );
        setSystemTime(refVal_systemTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemUptime"))))
    {
        utility::string_t refVal_systemUptime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemUptime"))), refVal_systemUptime );
        setSystemUptime(refVal_systemUptime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemOsName"))))
    {
        utility::string_t refVal_systemOsName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemOsName"))), refVal_systemOsName );
        setSystemOsName(refVal_systemOsName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemSerialNumber"))))
    {
        utility::string_t refVal_systemSerialNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemSerialNumber"))), refVal_systemSerialNumber );
        setSystemSerialNumber(refVal_systemSerialNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemCatalogNumber"))))
    {
        utility::string_t refVal_systemCatalogNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemCatalogNumber"))), refVal_systemCatalogNumber );
        setSystemCatalogNumber(refVal_systemCatalogNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemAppSwVersion"))))
    {
        utility::string_t refVal_systemAppSwVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemAppSwVersion"))), refVal_systemAppSwVersion );
        setSystemAppSwVersion(refVal_systemAppSwVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemSupportInfo"))))
    {
        utility::string_t refVal_systemSupportInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemSupportInfo"))), refVal_systemSupportInfo );
        setSystemSupportInfo(refVal_systemSupportInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eulaAccepted"))))
    {
        bool refVal_eulaAccepted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eulaAccepted"))), refVal_eulaAccepted );
        setEulaAccepted(refVal_eulaAccepted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenseActive"))))
    {
        bool refVal_licenseActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenseActive"))), refVal_licenseActive );
        setLicenseActive(refVal_licenseActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bbcLutsLicensed"))))
    {
        bool refVal_bbcLutsLicensed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bbcLutsLicensed"))), refVal_bbcLutsLicensed );
        setBbcLutsLicensed(refVal_bbcLutsLicensed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orionEngineLicensed"))))
    {
        bool refVal_orionEngineLicensed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orionEngineLicensed"))), refVal_orionEngineLicensed );
        setOrionEngineLicensed(refVal_orionEngineLicensed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("colorfrontEngineLicensed"))))
    {
        bool refVal_colorfrontEngineLicensed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("colorfrontEngineLicensed"))), refVal_colorfrontEngineLicensed );
        setColorfrontEngineLicensed(refVal_colorfrontEngineLicensed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shutdownTime"))))
    {
        int32_t refVal_shutdownTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shutdownTime"))), refVal_shutdownTime );
        setShutdownTime(refVal_shutdownTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("colorfrontTransformVersion"))))
    {
        utility::string_t refVal_colorfrontTransformVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("colorfrontTransformVersion"))), refVal_colorfrontTransformVersion );
        setColorfrontTransformVersion(refVal_colorfrontTransformVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("colorfrontEngineVersion"))))
    {
        utility::string_t refVal_colorfrontEngineVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("colorfrontEngineVersion"))), refVal_colorfrontEngineVersion );
        setColorfrontEngineVersion(refVal_colorfrontEngineVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orionVersion"))))
    {
        utility::string_t refVal_orionVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orionVersion"))), refVal_orionVersion );
        setOrionVersion(refVal_orionVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bbcLutVersion"))))
    {
        utility::string_t refVal_bbcLutVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bbcLutVersion"))), refVal_bbcLutVersion );
        setBbcLutVersion(refVal_bbcLutVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nbcuLutVersion"))))
    {
        utility::string_t refVal_nbcuLutVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nbcuLutVersion"))), refVal_nbcuLutVersion );
        setNbcuLutVersion(refVal_nbcuLutVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpuBusy"))))
    {
        bool refVal_cpuBusy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpuBusy"))), refVal_cpuBusy );
        setCpuBusy(refVal_cpuBusy);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<StatusInfo> Status::getDeviceDieTemp() const
{
    return m_DeviceDieTemp;
}

void Status::setDeviceDieTemp(const std::shared_ptr<StatusInfo>& value)
{
	std::shared_ptr<StatusInfo> v = value;
    m_DeviceDieTemp = v;
    m_DeviceDieTempIsSet = true;
}

bool Status::deviceDieTempIsSet() const
{
    return m_DeviceDieTempIsSet;
}

void Status::unsetDeviceDieTemp()
{
    m_DeviceDieTempIsSet = false;
}


utility::string_t Status::getSystemDate() const
{
    return m_SystemDate;
}

void Status::setSystemDate(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemDate = v;
    m_SystemDateIsSet = true;
}

bool Status::systemDateIsSet() const
{
    return m_SystemDateIsSet;
}

void Status::unsetSystemDate()
{
    m_SystemDateIsSet = false;
}



utility::string_t Status::getSystemTime() const
{
    return m_SystemTime;
}

void Status::setSystemTime(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemTime = v;
    m_SystemTimeIsSet = true;
}

bool Status::systemTimeIsSet() const
{
    return m_SystemTimeIsSet;
}

void Status::unsetSystemTime()
{
    m_SystemTimeIsSet = false;
}



utility::string_t Status::getSystemUptime() const
{
    return m_SystemUptime;
}

void Status::setSystemUptime(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemUptime = v;
    m_SystemUptimeIsSet = true;
}

bool Status::systemUptimeIsSet() const
{
    return m_SystemUptimeIsSet;
}

void Status::unsetSystemUptime()
{
    m_SystemUptimeIsSet = false;
}



utility::string_t Status::getSystemOsName() const
{
    return m_SystemOsName;
}

void Status::setSystemOsName(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemOsName = v;
    m_SystemOsNameIsSet = true;
}

bool Status::systemOsNameIsSet() const
{
    return m_SystemOsNameIsSet;
}

void Status::unsetSystemOsName()
{
    m_SystemOsNameIsSet = false;
}



utility::string_t Status::getSystemSerialNumber() const
{
    return m_SystemSerialNumber;
}

void Status::setSystemSerialNumber(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemSerialNumber = v;
    m_SystemSerialNumberIsSet = true;
}

bool Status::systemSerialNumberIsSet() const
{
    return m_SystemSerialNumberIsSet;
}

void Status::unsetSystemSerialNumber()
{
    m_SystemSerialNumberIsSet = false;
}



utility::string_t Status::getSystemCatalogNumber() const
{
    return m_SystemCatalogNumber;
}

void Status::setSystemCatalogNumber(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemCatalogNumber = v;
    m_SystemCatalogNumberIsSet = true;
}

bool Status::systemCatalogNumberIsSet() const
{
    return m_SystemCatalogNumberIsSet;
}

void Status::unsetSystemCatalogNumber()
{
    m_SystemCatalogNumberIsSet = false;
}



utility::string_t Status::getSystemAppSwVersion() const
{
    return m_SystemAppSwVersion;
}

void Status::setSystemAppSwVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemAppSwVersion = v;
    m_SystemAppSwVersionIsSet = true;
}

bool Status::systemAppSwVersionIsSet() const
{
    return m_SystemAppSwVersionIsSet;
}

void Status::unsetSystemAppSwVersion()
{
    m_SystemAppSwVersionIsSet = false;
}



utility::string_t Status::getSystemSupportInfo() const
{
    return m_SystemSupportInfo;
}

void Status::setSystemSupportInfo(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SystemSupportInfo = v;
    m_SystemSupportInfoIsSet = true;
}

bool Status::systemSupportInfoIsSet() const
{
    return m_SystemSupportInfoIsSet;
}

void Status::unsetSystemSupportInfo()
{
    m_SystemSupportInfoIsSet = false;
}



bool Status::isEulaAccepted() const
{
    return m_EulaAccepted;
}

void Status::setEulaAccepted(bool value)
{
	bool v = value;
    m_EulaAccepted = v;
    m_EulaAcceptedIsSet = true;
}

bool Status::eulaAcceptedIsSet() const
{
    return m_EulaAcceptedIsSet;
}

void Status::unsetEulaAccepted()
{
    m_EulaAcceptedIsSet = false;
}


bool Status::isLicenseActive() const
{
    return m_LicenseActive;
}

void Status::setLicenseActive(bool value)
{
	bool v = value;
    m_LicenseActive = v;
    m_LicenseActiveIsSet = true;
}

bool Status::licenseActiveIsSet() const
{
    return m_LicenseActiveIsSet;
}

void Status::unsetLicenseActive()
{
    m_LicenseActiveIsSet = false;
}


bool Status::isBbcLutsLicensed() const
{
    return m_BbcLutsLicensed;
}

void Status::setBbcLutsLicensed(bool value)
{
	bool v = value;
    m_BbcLutsLicensed = v;
    m_BbcLutsLicensedIsSet = true;
}

bool Status::bbcLutsLicensedIsSet() const
{
    return m_BbcLutsLicensedIsSet;
}

void Status::unsetBbcLutsLicensed()
{
    m_BbcLutsLicensedIsSet = false;
}


bool Status::isOrionEngineLicensed() const
{
    return m_OrionEngineLicensed;
}

void Status::setOrionEngineLicensed(bool value)
{
	bool v = value;
    m_OrionEngineLicensed = v;
    m_OrionEngineLicensedIsSet = true;
}

bool Status::orionEngineLicensedIsSet() const
{
    return m_OrionEngineLicensedIsSet;
}

void Status::unsetOrionEngineLicensed()
{
    m_OrionEngineLicensedIsSet = false;
}


bool Status::isColorfrontEngineLicensed() const
{
    return m_ColorfrontEngineLicensed;
}

void Status::setColorfrontEngineLicensed(bool value)
{
	bool v = value;
    m_ColorfrontEngineLicensed = v;
    m_ColorfrontEngineLicensedIsSet = true;
}

bool Status::colorfrontEngineLicensedIsSet() const
{
    return m_ColorfrontEngineLicensedIsSet;
}

void Status::unsetColorfrontEngineLicensed()
{
    m_ColorfrontEngineLicensedIsSet = false;
}


int32_t Status::getShutdownTime() const
{
    return m_ShutdownTime;
}

void Status::setShutdownTime(int32_t value)
{
	int32_t v = value;
    m_ShutdownTime = v;
    m_ShutdownTimeIsSet = true;
}

bool Status::shutdownTimeIsSet() const
{
    return m_ShutdownTimeIsSet;
}

void Status::unsetShutdownTime()
{
    m_ShutdownTimeIsSet = false;
}



utility::string_t Status::getColorfrontTransformVersion() const
{
    return m_ColorfrontTransformVersion;
}

void Status::setColorfrontTransformVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_ColorfrontTransformVersion = v;
    m_ColorfrontTransformVersionIsSet = true;
}

bool Status::colorfrontTransformVersionIsSet() const
{
    return m_ColorfrontTransformVersionIsSet;
}

void Status::unsetColorfrontTransformVersion()
{
    m_ColorfrontTransformVersionIsSet = false;
}



utility::string_t Status::getColorfrontEngineVersion() const
{
    return m_ColorfrontEngineVersion;
}

void Status::setColorfrontEngineVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_ColorfrontEngineVersion = v;
    m_ColorfrontEngineVersionIsSet = true;
}

bool Status::colorfrontEngineVersionIsSet() const
{
    return m_ColorfrontEngineVersionIsSet;
}

void Status::unsetColorfrontEngineVersion()
{
    m_ColorfrontEngineVersionIsSet = false;
}



utility::string_t Status::getOrionVersion() const
{
    return m_OrionVersion;
}

void Status::setOrionVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_OrionVersion = v;
    m_OrionVersionIsSet = true;
}

bool Status::orionVersionIsSet() const
{
    return m_OrionVersionIsSet;
}

void Status::unsetOrionVersion()
{
    m_OrionVersionIsSet = false;
}



utility::string_t Status::getBbcLutVersion() const
{
    return m_BbcLutVersion;
}

void Status::setBbcLutVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_BbcLutVersion = v;
    m_BbcLutVersionIsSet = true;
}

bool Status::bbcLutVersionIsSet() const
{
    return m_BbcLutVersionIsSet;
}

void Status::unsetBbcLutVersion()
{
    m_BbcLutVersionIsSet = false;
}



utility::string_t Status::getNbcuLutVersion() const
{
    return m_NbcuLutVersion;
}

void Status::setNbcuLutVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_NbcuLutVersion = v;
    m_NbcuLutVersionIsSet = true;
}

bool Status::nbcuLutVersionIsSet() const
{
    return m_NbcuLutVersionIsSet;
}

void Status::unsetNbcuLutVersion()
{
    m_NbcuLutVersionIsSet = false;
}



bool Status::isCpuBusy() const
{
    return m_CpuBusy;
}

void Status::setCpuBusy(bool value)
{
	bool v = value;
    m_CpuBusy = v;
    m_CpuBusyIsSet = true;
}

bool Status::cpuBusyIsSet() const
{
    return m_CpuBusyIsSet;
}

void Status::unsetCpuBusy()
{
    m_CpuBusyIsSet = false;
}


}
}
}
}


