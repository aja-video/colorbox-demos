/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * SystemConfig.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SystemConfig_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SystemConfig_H_


#include "ModelBase.h"

#include "model/TransformMode.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SystemConfig
    : public ModelBase
{
public:
    SystemConfig();
    virtual ~SystemConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SystemConfig members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHostName() const;
    bool hostNameIsSet() const;
    void unsetHostName();

    void setHostName(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSystemOrganizationName() const;
    bool systemOrganizationNameIsSet() const;
    void unsetSystemOrganizationName();

    void setSystemOrganizationName(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    bool isSsdpEnable() const;
    bool ssdpEnableIsSet() const;
    void unsetSsdpEnable();

    void setSsdpEnable(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isIdentify() const;
    bool identifyIsSet() const;
    void unsetIdentify();

    void setIdentify(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isUpdateRequest() const;
    bool updateRequestIsSet() const;
    void unsetUpdateRequest();

    void setUpdateRequest(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isReboot() const;
    bool rebootIsSet() const;
    void unsetReboot();

    void setReboot(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isRefresh() const;
    bool refreshIsSet() const;
    void unsetRefresh();

    void setRefresh(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isShutdown() const;
    bool shutdownIsSet() const;
    void unsetShutdown();

    void setShutdown(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isFactoryPreset() const;
    bool factoryPresetIsSet() const;
    void unsetFactoryPreset();

    void setFactoryPreset(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isFactoryReset() const;
    bool factoryResetIsSet() const;
    void unsetFactoryReset();

    void setFactoryReset(bool value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TransformMode> getTransformMode() const;
    bool transformModeIsSet() const;
    void unsetTransformMode();

    void setTransformMode(const std::shared_ptr<TransformMode>& value);


    /// <summary>
    /// 
    /// </summary>
    bool isPreviewAncEnable() const;
    bool previewAncEnableIsSet() const;
    void unsetPreviewAncEnable();

    void setPreviewAncEnable(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isAuthenticationEnable() const;
    bool authenticationEnableIsSet() const;
    void unsetAuthenticationEnable();

    void setAuthenticationEnable(bool value);


    /// <summary>
    /// 
    /// </summary>
    double getFanSpeed() const;
    bool fanSpeedIsSet() const;
    void unsetFanSpeed();

    void setFanSpeed(double value);

    double fanSpeedMin() const;
    double fanSpeedMax() const;

    /// <summary>
    /// 
    /// </summary>
    int32_t getStartupPreset() const;
    bool startupPresetIsSet() const;
    void unsetStartupPreset();

    void setStartupPreset(int32_t value);

    int32_t startupPresetMin() const;
    int32_t startupPresetMax() const;


protected:
    utility::string_t m_HostName;
    bool m_HostNameIsSet;
    utility::string_t m_SystemOrganizationName;
    bool m_SystemOrganizationNameIsSet;
    bool m_SsdpEnable;
    bool m_SsdpEnableIsSet;
    bool m_Identify;
    bool m_IdentifyIsSet;
    bool m_UpdateRequest;
    bool m_UpdateRequestIsSet;
    bool m_Reboot;
    bool m_RebootIsSet;
    bool m_Refresh;
    bool m_RefreshIsSet;
    bool m_Shutdown;
    bool m_ShutdownIsSet;
    bool m_FactoryPreset;
    bool m_FactoryPresetIsSet;
    bool m_FactoryReset;
    bool m_FactoryResetIsSet;
    std::shared_ptr<TransformMode> m_TransformMode;
    bool m_TransformModeIsSet;
    bool m_PreviewAncEnable;
    bool m_PreviewAncEnableIsSet;
    bool m_AuthenticationEnable;
    bool m_AuthenticationEnableIsSet;
    double m_FanSpeed;
    bool m_FanSpeedIsSet;
    int32_t m_StartupPreset;
    bool m_StartupPresetIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SystemConfig_H_ */
