/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * SystemStatus.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SystemStatus_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SystemStatus_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SystemStatus
    : public ModelBase
{
public:
    SystemStatus();
    virtual ~SystemStatus();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SystemStatus members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafebootVersion() const;
    bool safebootVersionIsSet() const;
    void unsetSafebootVersion();

    void setSafebootVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMainbootVersion() const;
    bool mainbootVersionIsSet() const;
    void unsetMainbootVersion();

    void setMainbootVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRunningVersion() const;
    bool runningVersionIsSet() const;
    void unsetRunningVersion();

    void setRunningVersion(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    bool isSafeboot() const;
    bool safebootIsSet() const;
    void unsetSafeboot();

    void setSafeboot(bool value);


    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getUpdateMsg();
    bool updateMsgIsSet() const;
    void unsetUpdateMsg();

    void setUpdateMsg(const std::vector<utility::string_t>& value);


    /// <summary>
    /// 
    /// </summary>
    bool isTransformModeChanging() const;
    bool transformModeChangingIsSet() const;
    void unsetTransformModeChanging();

    void setTransformModeChanging(bool value);


    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTransformModeTimestamp() const;
    bool transformModeTimestampIsSet() const;
    void unsetTransformModeTimestamp();

    void setTransformModeTimestamp(const utility::datetime& value);



protected:
    utility::string_t m_SafebootVersion;
    bool m_SafebootVersionIsSet;
    utility::string_t m_MainbootVersion;
    bool m_MainbootVersionIsSet;
    utility::string_t m_RunningVersion;
    bool m_RunningVersionIsSet;
    bool m_Safeboot;
    bool m_SafebootIsSet;
    std::vector<utility::string_t> m_UpdateMsg;
    bool m_UpdateMsgIsSet;
    bool m_TransformModeChanging;
    bool m_TransformModeChangingIsSet;
    utility::datetime m_TransformModeTimestamp;
    bool m_TransformModeTimestampIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SystemStatus_H_ */
