/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * Overlay.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Overlay_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Overlay_H_


#include "ModelBase.h"

#include "model/Locations.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Overlay
    : public ModelBase
{
public:
    Overlay();
    virtual ~Overlay();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Overlay members

    /// <summary>
    /// true if overlay is enabled else disabled
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isInVpidFormat() const;
    bool inVpidFormatIsSet() const;
    void unsetInVpidFormat();

    void setInVpidFormat(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isInVpidRange() const;
    bool inVpidRangeIsSet() const;
    void unsetInVpidRange();

    void setInVpidRange(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isInVpidHdr() const;
    bool inVpidHdrIsSet() const;
    void unsetInVpidHdr();

    void setInVpidHdr(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isInVpidBitDepth() const;
    bool inVpidBitDepthIsSet() const;
    void unsetInVpidBitDepth();

    void setInVpidBitDepth(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isOutVpidFormat() const;
    bool outVpidFormatIsSet() const;
    void unsetOutVpidFormat();

    void setOutVpidFormat(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isOutVpidRange() const;
    bool outVpidRangeIsSet() const;
    void unsetOutVpidRange();

    void setOutVpidRange(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isOutVpidHdr() const;
    bool outVpidHdrIsSet() const;
    void unsetOutVpidHdr();

    void setOutVpidHdr(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isOutVpidBitDepth() const;
    bool outVpidBitDepthIsSet() const;
    void unsetOutVpidBitDepth();

    void setOutVpidBitDepth(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isTimeCode() const;
    bool timeCodeIsSet() const;
    void unsetTimeCode();

    void setTimeCode(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isClosedCaption() const;
    bool closedCaptionIsSet() const;
    void unsetClosedCaption();

    void setClosedCaption(bool value);


    /// <summary>
    /// 
    /// </summary>
    bool isUserTextEnabled() const;
    bool userTextEnabledIsSet() const;
    void unsetUserTextEnabled();

    void setUserTextEnabled(bool value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserTextLine1() const;
    bool userTextLine1IsSet() const;
    void unsetUserTextLine1();

    void setUserTextLine1(const utility::string_t& value);

    int userTextLine1Min() const;
    int userTextLine1Max() const;

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserTextLine2() const;
    bool userTextLine2IsSet() const;
    void unsetUserTextLine2();

    void setUserTextLine2(const utility::string_t& value);

    int userTextLine2Min() const;
    int userTextLine2Max() const;

    /// <summary>
    /// 
    /// </summary>
    bool isPipelineConfig() const;
    bool pipelineConfigIsSet() const;
    void unsetPipelineConfig();

    void setPipelineConfig(bool value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Locations> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const std::shared_ptr<Locations>& value);



protected:
    bool m_Enabled;
    bool m_EnabledIsSet;
    bool m_InVpidFormat;
    bool m_InVpidFormatIsSet;
    bool m_InVpidRange;
    bool m_InVpidRangeIsSet;
    bool m_InVpidHdr;
    bool m_InVpidHdrIsSet;
    bool m_InVpidBitDepth;
    bool m_InVpidBitDepthIsSet;
    bool m_OutVpidFormat;
    bool m_OutVpidFormatIsSet;
    bool m_OutVpidRange;
    bool m_OutVpidRangeIsSet;
    bool m_OutVpidHdr;
    bool m_OutVpidHdrIsSet;
    bool m_OutVpidBitDepth;
    bool m_OutVpidBitDepthIsSet;
    bool m_TimeCode;
    bool m_TimeCodeIsSet;
    bool m_ClosedCaption;
    bool m_ClosedCaptionIsSet;
    bool m_UserTextEnabled;
    bool m_UserTextEnabledIsSet;
    utility::string_t m_UserTextLine1;
    bool m_UserTextLine1IsSet;
    utility::string_t m_UserTextLine2;
    bool m_UserTextLine2IsSet;
    bool m_PipelineConfig;
    bool m_PipelineConfigIsSet;
    std::shared_ptr<Locations> m_Location;
    bool m_LocationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Overlay_H_ */
