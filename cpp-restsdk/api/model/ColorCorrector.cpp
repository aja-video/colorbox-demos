/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "ColorCorrector.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ColorCorrector::ColorCorrector()
{
    m_BlackRed = 0.0;
    m_BlackRedIsSet = false;
    m_BlackGreen = 0.0;
    m_BlackGreenIsSet = false;
    m_BlackBlue = 0.0;
    m_BlackBlueIsSet = false;
    m_GainRed = 0.0;
    m_GainRedIsSet = false;
    m_GainGreen = 0.0;
    m_GainGreenIsSet = false;
    m_GainBlue = 0.0;
    m_GainBlueIsSet = false;
    m_GammaRed = 0.0;
    m_GammaRedIsSet = false;
    m_GammaGreen = 0.0;
    m_GammaGreenIsSet = false;
    m_GammaBlue = 0.0;
    m_GammaBlueIsSet = false;
    m_UnitsBlack = utility::conversions::to_string_t("");
    m_UnitsBlackIsSet = false;
    m_UnitsGain = utility::conversions::to_string_t("");
    m_UnitsGainIsSet = false;
    m_UnitsGamma = utility::conversions::to_string_t("");
    m_UnitsGammaIsSet = false;
}

ColorCorrector::~ColorCorrector()
{
}

void ColorCorrector::validate()
{
    // TODO: implement validation
}

bool ColorCorrector::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (blackRedIsSet())
	{
		bool blackRedChanged = false;
		double v = getBlackRed();
		double min = blackRedMin();
		double max = blackRedMax();
		if (v < min) { v = min; blackRedChanged = true; }
		if (v > max) { v = max; blackRedChanged = true; }
		if (blackRedChanged) { setBlackRed(v); anyMinMaxValueChanged = true; }
	}
	if (blackGreenIsSet())
	{
		bool blackGreenChanged = false;
		double v = getBlackGreen();
		double min = blackGreenMin();
		double max = blackGreenMax();
		if (v < min) { v = min; blackGreenChanged = true; }
		if (v > max) { v = max; blackGreenChanged = true; }
		if (blackGreenChanged) { setBlackGreen(v); anyMinMaxValueChanged = true; }
	}
	if (blackBlueIsSet())
	{
		bool blackBlueChanged = false;
		double v = getBlackBlue();
		double min = blackBlueMin();
		double max = blackBlueMax();
		if (v < min) { v = min; blackBlueChanged = true; }
		if (v > max) { v = max; blackBlueChanged = true; }
		if (blackBlueChanged) { setBlackBlue(v); anyMinMaxValueChanged = true; }
	}
	if (gainRedIsSet())
	{
		bool gainRedChanged = false;
		double v = getGainRed();
		double min = gainRedMin();
		double max = gainRedMax();
		if (v < min) { v = min; gainRedChanged = true; }
		if (v > max) { v = max; gainRedChanged = true; }
		if (gainRedChanged) { setGainRed(v); anyMinMaxValueChanged = true; }
	}
	if (gainGreenIsSet())
	{
		bool gainGreenChanged = false;
		double v = getGainGreen();
		double min = gainGreenMin();
		double max = gainGreenMax();
		if (v < min) { v = min; gainGreenChanged = true; }
		if (v > max) { v = max; gainGreenChanged = true; }
		if (gainGreenChanged) { setGainGreen(v); anyMinMaxValueChanged = true; }
	}
	if (gainBlueIsSet())
	{
		bool gainBlueChanged = false;
		double v = getGainBlue();
		double min = gainBlueMin();
		double max = gainBlueMax();
		if (v < min) { v = min; gainBlueChanged = true; }
		if (v > max) { v = max; gainBlueChanged = true; }
		if (gainBlueChanged) { setGainBlue(v); anyMinMaxValueChanged = true; }
	}
	if (gammaRedIsSet())
	{
		bool gammaRedChanged = false;
		double v = getGammaRed();
		double min = gammaRedMin();
		double max = gammaRedMax();
		if (v < min) { v = min; gammaRedChanged = true; }
		if (v > max) { v = max; gammaRedChanged = true; }
		if (gammaRedChanged) { setGammaRed(v); anyMinMaxValueChanged = true; }
	}
	if (gammaGreenIsSet())
	{
		bool gammaGreenChanged = false;
		double v = getGammaGreen();
		double min = gammaGreenMin();
		double max = gammaGreenMax();
		if (v < min) { v = min; gammaGreenChanged = true; }
		if (v > max) { v = max; gammaGreenChanged = true; }
		if (gammaGreenChanged) { setGammaGreen(v); anyMinMaxValueChanged = true; }
	}
	if (gammaBlueIsSet())
	{
		bool gammaBlueChanged = false;
		double v = getGammaBlue();
		double min = gammaBlueMin();
		double max = gammaBlueMax();
		if (v < min) { v = min; gammaBlueChanged = true; }
		if (v > max) { v = max; gammaBlueChanged = true; }
		if (gammaBlueChanged) { setGammaBlue(v); anyMinMaxValueChanged = true; }
	}
	if (unitsBlackIsSet())
	{
		bool unitsBlackChanged = false;
		utility::string_t v = getUnitsBlack();
		if (unitsBlackChanged) { setUnitsBlack(v); anyMinMaxValueChanged = true; }
	}
	if (unitsGainIsSet())
	{
		bool unitsGainChanged = false;
		utility::string_t v = getUnitsGain();
		if (unitsGainChanged) { setUnitsGain(v); anyMinMaxValueChanged = true; }
	}
	if (unitsGammaIsSet())
	{
		bool unitsGammaChanged = false;
		utility::string_t v = getUnitsGamma();
		if (unitsGammaChanged) { setUnitsGamma(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value ColorCorrector::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BlackRedIsSet)
    {
        val[utility::conversions::to_string_t(U("blackRed"))] = ModelBase::toJson(m_BlackRed);
    }
    if(m_BlackGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("blackGreen"))] = ModelBase::toJson(m_BlackGreen);
    }
    if(m_BlackBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("blackBlue"))] = ModelBase::toJson(m_BlackBlue);
    }
    if(m_GainRedIsSet)
    {
        val[utility::conversions::to_string_t(U("gainRed"))] = ModelBase::toJson(m_GainRed);
    }
    if(m_GainGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("gainGreen"))] = ModelBase::toJson(m_GainGreen);
    }
    if(m_GainBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("gainBlue"))] = ModelBase::toJson(m_GainBlue);
    }
    if(m_GammaRedIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaRed"))] = ModelBase::toJson(m_GammaRed);
    }
    if(m_GammaGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaGreen"))] = ModelBase::toJson(m_GammaGreen);
    }
    if(m_GammaBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaBlue"))] = ModelBase::toJson(m_GammaBlue);
    }
    if(m_UnitsBlackIsSet)
    {
        val[utility::conversions::to_string_t(U("unitsBlack"))] = ModelBase::toJson(m_UnitsBlack);
    }
    if(m_UnitsGainIsSet)
    {
        val[utility::conversions::to_string_t(U("unitsGain"))] = ModelBase::toJson(m_UnitsGain);
    }
    if(m_UnitsGammaIsSet)
    {
        val[utility::conversions::to_string_t(U("unitsGamma"))] = ModelBase::toJson(m_UnitsGamma);
    }

    return val;
}

bool ColorCorrector::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("blackRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blackRed")));
        if(!fieldValue.is_null())
        {
            double refVal_blackRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_blackRed);
            setBlackRed(refVal_blackRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blackGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blackGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_blackGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_blackGreen);
            setBlackGreen(refVal_blackGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blackBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blackBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_blackBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_blackBlue);
            setBlackBlue(refVal_blackBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainRed")));
        if(!fieldValue.is_null())
        {
            double refVal_gainRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainRed);
            setGainRed(refVal_gainRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_gainGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainGreen);
            setGainGreen(refVal_gainGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_gainBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainBlue);
            setGainBlue(refVal_gainBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaRed")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaRed);
            setGammaRed(refVal_gammaRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaGreen);
            setGammaGreen(refVal_gammaGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaBlue);
            setGammaBlue(refVal_gammaBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unitsBlack"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unitsBlack")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unitsBlack;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitsBlack);
            setUnitsBlack(refVal_unitsBlack);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unitsGain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unitsGain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unitsGain;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitsGain);
            setUnitsGain(refVal_unitsGain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unitsGamma"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unitsGamma")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unitsGamma;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitsGamma);
            setUnitsGamma(refVal_unitsGamma);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void ColorCorrector::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BlackRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blackRed")), m_BlackRed));
    }
    if(m_BlackGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blackGreen")), m_BlackGreen));
    }
    if(m_BlackBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blackBlue")), m_BlackBlue));
    }
    if(m_GainRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainRed")), m_GainRed));
    }
    if(m_GainGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainGreen")), m_GainGreen));
    }
    if(m_GainBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainBlue")), m_GainBlue));
    }
    if(m_GammaRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaRed")), m_GammaRed));
    }
    if(m_GammaGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaGreen")), m_GammaGreen));
    }
    if(m_GammaBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaBlue")), m_GammaBlue));
    }
    if(m_UnitsBlackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unitsBlack")), m_UnitsBlack));
    }
    if(m_UnitsGainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unitsGain")), m_UnitsGain));
    }
    if(m_UnitsGammaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unitsGamma")), m_UnitsGamma));
    }
}

bool ColorCorrector::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("blackRed"))))
    {
        double refVal_blackRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blackRed"))), refVal_blackRed );
        setBlackRed(refVal_blackRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blackGreen"))))
    {
        double refVal_blackGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blackGreen"))), refVal_blackGreen );
        setBlackGreen(refVal_blackGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blackBlue"))))
    {
        double refVal_blackBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blackBlue"))), refVal_blackBlue );
        setBlackBlue(refVal_blackBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainRed"))))
    {
        double refVal_gainRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainRed"))), refVal_gainRed );
        setGainRed(refVal_gainRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainGreen"))))
    {
        double refVal_gainGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainGreen"))), refVal_gainGreen );
        setGainGreen(refVal_gainGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainBlue"))))
    {
        double refVal_gainBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainBlue"))), refVal_gainBlue );
        setGainBlue(refVal_gainBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaRed"))))
    {
        double refVal_gammaRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaRed"))), refVal_gammaRed );
        setGammaRed(refVal_gammaRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaGreen"))))
    {
        double refVal_gammaGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaGreen"))), refVal_gammaGreen );
        setGammaGreen(refVal_gammaGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaBlue"))))
    {
        double refVal_gammaBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaBlue"))), refVal_gammaBlue );
        setGammaBlue(refVal_gammaBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unitsBlack"))))
    {
        utility::string_t refVal_unitsBlack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unitsBlack"))), refVal_unitsBlack );
        setUnitsBlack(refVal_unitsBlack);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unitsGain"))))
    {
        utility::string_t refVal_unitsGain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unitsGain"))), refVal_unitsGain );
        setUnitsGain(refVal_unitsGain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unitsGamma"))))
    {
        utility::string_t refVal_unitsGamma;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unitsGamma"))), refVal_unitsGamma );
        setUnitsGamma(refVal_unitsGamma);
    }
    
    applyMinMaxConstraints();
    return ok;
}

double ColorCorrector::getBlackRed() const
{
    return m_BlackRed;
}

void ColorCorrector::setBlackRed(double value)
{
	double v = value;
	double min = blackRedMin();
	double max = blackRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_BlackRed = v;
    m_BlackRedIsSet = true;
}

bool ColorCorrector::blackRedIsSet() const
{
    return m_BlackRedIsSet;
}

void ColorCorrector::unsetBlackRed()
{
    m_BlackRedIsSet = false;
}

double ColorCorrector::blackRedMin() const {
	return -20.0;
}

double ColorCorrector::blackRedMax() const {
	return 20.0;
}

double ColorCorrector::getBlackGreen() const
{
    return m_BlackGreen;
}

void ColorCorrector::setBlackGreen(double value)
{
	double v = value;
	double min = blackGreenMin();
	double max = blackGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_BlackGreen = v;
    m_BlackGreenIsSet = true;
}

bool ColorCorrector::blackGreenIsSet() const
{
    return m_BlackGreenIsSet;
}

void ColorCorrector::unsetBlackGreen()
{
    m_BlackGreenIsSet = false;
}

double ColorCorrector::blackGreenMin() const {
	return -20.0;
}

double ColorCorrector::blackGreenMax() const {
	return 20.0;
}

double ColorCorrector::getBlackBlue() const
{
    return m_BlackBlue;
}

void ColorCorrector::setBlackBlue(double value)
{
	double v = value;
	double min = blackBlueMin();
	double max = blackBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_BlackBlue = v;
    m_BlackBlueIsSet = true;
}

bool ColorCorrector::blackBlueIsSet() const
{
    return m_BlackBlueIsSet;
}

void ColorCorrector::unsetBlackBlue()
{
    m_BlackBlueIsSet = false;
}

double ColorCorrector::blackBlueMin() const {
	return -20.0;
}

double ColorCorrector::blackBlueMax() const {
	return 20.0;
}

double ColorCorrector::getGainRed() const
{
    return m_GainRed;
}

void ColorCorrector::setGainRed(double value)
{
	double v = value;
	double min = gainRedMin();
	double max = gainRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainRed = v;
    m_GainRedIsSet = true;
}

bool ColorCorrector::gainRedIsSet() const
{
    return m_GainRedIsSet;
}

void ColorCorrector::unsetGainRed()
{
    m_GainRedIsSet = false;
}

double ColorCorrector::gainRedMin() const {
	return 0;
}

double ColorCorrector::gainRedMax() const {
	return 1.5;
}

double ColorCorrector::getGainGreen() const
{
    return m_GainGreen;
}

void ColorCorrector::setGainGreen(double value)
{
	double v = value;
	double min = gainGreenMin();
	double max = gainGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainGreen = v;
    m_GainGreenIsSet = true;
}

bool ColorCorrector::gainGreenIsSet() const
{
    return m_GainGreenIsSet;
}

void ColorCorrector::unsetGainGreen()
{
    m_GainGreenIsSet = false;
}

double ColorCorrector::gainGreenMin() const {
	return 0;
}

double ColorCorrector::gainGreenMax() const {
	return 1.5;
}

double ColorCorrector::getGainBlue() const
{
    return m_GainBlue;
}

void ColorCorrector::setGainBlue(double value)
{
	double v = value;
	double min = gainBlueMin();
	double max = gainBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainBlue = v;
    m_GainBlueIsSet = true;
}

bool ColorCorrector::gainBlueIsSet() const
{
    return m_GainBlueIsSet;
}

void ColorCorrector::unsetGainBlue()
{
    m_GainBlueIsSet = false;
}

double ColorCorrector::gainBlueMin() const {
	return 0;
}

double ColorCorrector::gainBlueMax() const {
	return 1.5;
}

double ColorCorrector::getGammaRed() const
{
    return m_GammaRed;
}

void ColorCorrector::setGammaRed(double value)
{
	double v = value;
	double min = gammaRedMin();
	double max = gammaRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaRed = v;
    m_GammaRedIsSet = true;
}

bool ColorCorrector::gammaRedIsSet() const
{
    return m_GammaRedIsSet;
}

void ColorCorrector::unsetGammaRed()
{
    m_GammaRedIsSet = false;
}

double ColorCorrector::gammaRedMin() const {
	return -1.0;
}

double ColorCorrector::gammaRedMax() const {
	return 1.0;
}

double ColorCorrector::getGammaGreen() const
{
    return m_GammaGreen;
}

void ColorCorrector::setGammaGreen(double value)
{
	double v = value;
	double min = gammaGreenMin();
	double max = gammaGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaGreen = v;
    m_GammaGreenIsSet = true;
}

bool ColorCorrector::gammaGreenIsSet() const
{
    return m_GammaGreenIsSet;
}

void ColorCorrector::unsetGammaGreen()
{
    m_GammaGreenIsSet = false;
}

double ColorCorrector::gammaGreenMin() const {
	return -1.0;
}

double ColorCorrector::gammaGreenMax() const {
	return 1.0;
}

double ColorCorrector::getGammaBlue() const
{
    return m_GammaBlue;
}

void ColorCorrector::setGammaBlue(double value)
{
	double v = value;
	double min = gammaBlueMin();
	double max = gammaBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaBlue = v;
    m_GammaBlueIsSet = true;
}

bool ColorCorrector::gammaBlueIsSet() const
{
    return m_GammaBlueIsSet;
}

void ColorCorrector::unsetGammaBlue()
{
    m_GammaBlueIsSet = false;
}

double ColorCorrector::gammaBlueMin() const {
	return -1.0;
}

double ColorCorrector::gammaBlueMax() const {
	return 1.0;
}

utility::string_t ColorCorrector::getUnitsBlack() const
{
    return m_UnitsBlack;
}

void ColorCorrector::setUnitsBlack(const utility::string_t& value)
{
	utility::string_t v = value;
    m_UnitsBlack = v;
    m_UnitsBlackIsSet = true;
}

bool ColorCorrector::unitsBlackIsSet() const
{
    return m_UnitsBlackIsSet;
}

void ColorCorrector::unsetUnitsBlack()
{
    m_UnitsBlackIsSet = false;
}



utility::string_t ColorCorrector::getUnitsGain() const
{
    return m_UnitsGain;
}

void ColorCorrector::setUnitsGain(const utility::string_t& value)
{
	utility::string_t v = value;
    m_UnitsGain = v;
    m_UnitsGainIsSet = true;
}

bool ColorCorrector::unitsGainIsSet() const
{
    return m_UnitsGainIsSet;
}

void ColorCorrector::unsetUnitsGain()
{
    m_UnitsGainIsSet = false;
}



utility::string_t ColorCorrector::getUnitsGamma() const
{
    return m_UnitsGamma;
}

void ColorCorrector::setUnitsGamma(const utility::string_t& value)
{
	utility::string_t v = value;
    m_UnitsGamma = v;
    m_UnitsGammaIsSet = true;
}

bool ColorCorrector::unitsGammaIsSet() const
{
    return m_UnitsGammaIsSet;
}

void ColorCorrector::unsetUnitsGamma()
{
    m_UnitsGammaIsSet = false;
}



}
}
}
}


