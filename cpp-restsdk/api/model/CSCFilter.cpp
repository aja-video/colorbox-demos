/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "CSCFilter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



namespace
{
using EnumUnderlyingType = utility::string_t;

CSCFilter::eCSCFilter toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("None")))
        return CSCFilter::eCSCFilter::CSCFilter_NONE;
    if (val == utility::conversions::to_string_t(U("Auto")))
        return CSCFilter::eCSCFilter::CSCFilter_AUTO;
    if (val == utility::conversions::to_string_t(U("Full")))
        return CSCFilter::eCSCFilter::CSCFilter_FULL;
    if (val == utility::conversions::to_string_t(U("Light")))
        return CSCFilter::eCSCFilter::CSCFilter_LIGHT;
    return {};
}

EnumUnderlyingType fromEnum(CSCFilter::eCSCFilter e)
{
    switch (e)
    {
    case CSCFilter::eCSCFilter::CSCFilter_NONE:
        return U("None");
    case CSCFilter::eCSCFilter::CSCFilter_AUTO:
        return U("Auto");
    case CSCFilter::eCSCFilter::CSCFilter_FULL:
        return U("Full");
    case CSCFilter::eCSCFilter::CSCFilter_LIGHT:
        return U("Light");
    default:
        break;
    }
    return {};
}
}

CSCFilter::CSCFilter()
{
}

CSCFilter::~CSCFilter()
{
}

void CSCFilter::validate()
{
    // TODO: implement validation
}

bool CSCFilter::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value CSCFilter::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool CSCFilter::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void CSCFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool CSCFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

CSCFilter::eCSCFilter CSCFilter::getValue() const
{
   return m_value;
}

void CSCFilter::setValue(CSCFilter::eCSCFilter const value)
{
   m_value = value;
}


}
}
}
}


