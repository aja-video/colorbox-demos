/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "SystemStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SystemStatus::SystemStatus()
{
    m_SafebootVersion = utility::conversions::to_string_t("");
    m_SafebootVersionIsSet = false;
    m_MainbootVersion = utility::conversions::to_string_t("");
    m_MainbootVersionIsSet = false;
    m_RunningVersion = utility::conversions::to_string_t("");
    m_RunningVersionIsSet = false;
    m_Safeboot = false;
    m_SafebootIsSet = false;
    m_UpdateMsgIsSet = false;
    m_TransformModeChanging = false;
    m_TransformModeChangingIsSet = false;
    m_TransformModeTimestamp = utility::datetime();
    m_TransformModeTimestampIsSet = false;
}

SystemStatus::~SystemStatus()
{
}

void SystemStatus::validate()
{
    // TODO: implement validation
}

bool SystemStatus::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (safebootVersionIsSet())
	{
		bool safebootVersionChanged = false;
		utility::string_t v = getSafebootVersion();
		if (safebootVersionChanged) { setSafebootVersion(v); anyMinMaxValueChanged = true; }
	}
	if (mainbootVersionIsSet())
	{
		bool mainbootVersionChanged = false;
		utility::string_t v = getMainbootVersion();
		if (mainbootVersionChanged) { setMainbootVersion(v); anyMinMaxValueChanged = true; }
	}
	if (runningVersionIsSet())
	{
		bool runningVersionChanged = false;
		utility::string_t v = getRunningVersion();
		if (runningVersionChanged) { setRunningVersion(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value SystemStatus::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SafebootVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("safebootVersion"))] = ModelBase::toJson(m_SafebootVersion);
    }
    if(m_MainbootVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("mainbootVersion"))] = ModelBase::toJson(m_MainbootVersion);
    }
    if(m_RunningVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("runningVersion"))] = ModelBase::toJson(m_RunningVersion);
    }
    if(m_SafebootIsSet)
    {
        val[utility::conversions::to_string_t(U("safeboot"))] = ModelBase::toJson(m_Safeboot);
    }
    if(m_UpdateMsgIsSet)
    {
        val[utility::conversions::to_string_t(U("updateMsg"))] = ModelBase::toJson(m_UpdateMsg);
    }
    if(m_TransformModeChangingIsSet)
    {
        val[utility::conversions::to_string_t(U("transformModeChanging"))] = ModelBase::toJson(m_TransformModeChanging);
    }
    if(m_TransformModeTimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("transformModeTimestamp"))] = ModelBase::toJson(m_TransformModeTimestamp);
    }

    return val;
}

bool SystemStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("safebootVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safebootVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safebootVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_safebootVersion);
            setSafebootVersion(refVal_safebootVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mainbootVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mainbootVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mainbootVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_mainbootVersion);
            setMainbootVersion(refVal_mainbootVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("runningVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("runningVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_runningVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_runningVersion);
            setRunningVersion(refVal_runningVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safeboot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safeboot")));
        if(!fieldValue.is_null())
        {
            bool refVal_safeboot;
            ok &= ModelBase::fromJson(fieldValue, refVal_safeboot);
            setSafeboot(refVal_safeboot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateMsg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateMsg")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_updateMsg;
            ok &= ModelBase::fromJson(fieldValue, refVal_updateMsg);
            setUpdateMsg(refVal_updateMsg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transformModeChanging"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transformModeChanging")));
        if(!fieldValue.is_null())
        {
            bool refVal_transformModeChanging;
            ok &= ModelBase::fromJson(fieldValue, refVal_transformModeChanging);
            setTransformModeChanging(refVal_transformModeChanging);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transformModeTimestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transformModeTimestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_transformModeTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_transformModeTimestamp);
            setTransformModeTimestamp(refVal_transformModeTimestamp);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void SystemStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SafebootVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safebootVersion")), m_SafebootVersion));
    }
    if(m_MainbootVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mainbootVersion")), m_MainbootVersion));
    }
    if(m_RunningVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("runningVersion")), m_RunningVersion));
    }
    if(m_SafebootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safeboot")), m_Safeboot));
    }
    if(m_UpdateMsgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateMsg")), m_UpdateMsg));
    }
    if(m_TransformModeChangingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transformModeChanging")), m_TransformModeChanging));
    }
    if(m_TransformModeTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transformModeTimestamp")), m_TransformModeTimestamp));
    }
}

bool SystemStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("safebootVersion"))))
    {
        utility::string_t refVal_safebootVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safebootVersion"))), refVal_safebootVersion );
        setSafebootVersion(refVal_safebootVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mainbootVersion"))))
    {
        utility::string_t refVal_mainbootVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mainbootVersion"))), refVal_mainbootVersion );
        setMainbootVersion(refVal_mainbootVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("runningVersion"))))
    {
        utility::string_t refVal_runningVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("runningVersion"))), refVal_runningVersion );
        setRunningVersion(refVal_runningVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safeboot"))))
    {
        bool refVal_safeboot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safeboot"))), refVal_safeboot );
        setSafeboot(refVal_safeboot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateMsg"))))
    {
        std::vector<utility::string_t> refVal_updateMsg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateMsg"))), refVal_updateMsg );
        setUpdateMsg(refVal_updateMsg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transformModeChanging"))))
    {
        bool refVal_transformModeChanging;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transformModeChanging"))), refVal_transformModeChanging );
        setTransformModeChanging(refVal_transformModeChanging);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transformModeTimestamp"))))
    {
        utility::datetime refVal_transformModeTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transformModeTimestamp"))), refVal_transformModeTimestamp );
        setTransformModeTimestamp(refVal_transformModeTimestamp);
    }
    
    applyMinMaxConstraints();
    return ok;
}

utility::string_t SystemStatus::getSafebootVersion() const
{
    return m_SafebootVersion;
}

void SystemStatus::setSafebootVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_SafebootVersion = v;
    m_SafebootVersionIsSet = true;
}

bool SystemStatus::safebootVersionIsSet() const
{
    return m_SafebootVersionIsSet;
}

void SystemStatus::unsetSafebootVersion()
{
    m_SafebootVersionIsSet = false;
}



utility::string_t SystemStatus::getMainbootVersion() const
{
    return m_MainbootVersion;
}

void SystemStatus::setMainbootVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_MainbootVersion = v;
    m_MainbootVersionIsSet = true;
}

bool SystemStatus::mainbootVersionIsSet() const
{
    return m_MainbootVersionIsSet;
}

void SystemStatus::unsetMainbootVersion()
{
    m_MainbootVersionIsSet = false;
}



utility::string_t SystemStatus::getRunningVersion() const
{
    return m_RunningVersion;
}

void SystemStatus::setRunningVersion(const utility::string_t& value)
{
	utility::string_t v = value;
    m_RunningVersion = v;
    m_RunningVersionIsSet = true;
}

bool SystemStatus::runningVersionIsSet() const
{
    return m_RunningVersionIsSet;
}

void SystemStatus::unsetRunningVersion()
{
    m_RunningVersionIsSet = false;
}



bool SystemStatus::isSafeboot() const
{
    return m_Safeboot;
}

void SystemStatus::setSafeboot(bool value)
{
	bool v = value;
    m_Safeboot = v;
    m_SafebootIsSet = true;
}

bool SystemStatus::safebootIsSet() const
{
    return m_SafebootIsSet;
}

void SystemStatus::unsetSafeboot()
{
    m_SafebootIsSet = false;
}


std::vector<utility::string_t>& SystemStatus::getUpdateMsg()
{
    return m_UpdateMsg;
}

void SystemStatus::setUpdateMsg(const std::vector<utility::string_t>& value)
{
	std::vector<utility::string_t> v = value;
    m_UpdateMsg = v;
    m_UpdateMsgIsSet = true;
}

bool SystemStatus::updateMsgIsSet() const
{
    return m_UpdateMsgIsSet;
}

void SystemStatus::unsetUpdateMsg()
{
    m_UpdateMsgIsSet = false;
}


bool SystemStatus::isTransformModeChanging() const
{
    return m_TransformModeChanging;
}

void SystemStatus::setTransformModeChanging(bool value)
{
	bool v = value;
    m_TransformModeChanging = v;
    m_TransformModeChangingIsSet = true;
}

bool SystemStatus::transformModeChangingIsSet() const
{
    return m_TransformModeChangingIsSet;
}

void SystemStatus::unsetTransformModeChanging()
{
    m_TransformModeChangingIsSet = false;
}


utility::datetime SystemStatus::getTransformModeTimestamp() const
{
    return m_TransformModeTimestamp;
}

void SystemStatus::setTransformModeTimestamp(const utility::datetime& value)
{
	utility::datetime v = value;
    m_TransformModeTimestamp = v;
    m_TransformModeTimestampIsSet = true;
}

bool SystemStatus::transformModeTimestampIsSet() const
{
    return m_TransformModeTimestampIsSet;
}

void SystemStatus::unsetTransformModeTimestamp()
{
    m_TransformModeTimestampIsSet = false;
}


}
}
}
}


