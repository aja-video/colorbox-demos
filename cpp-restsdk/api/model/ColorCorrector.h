/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * ColorCorrector.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ColorCorrector_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ColorCorrector_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ColorCorrector
    : public ModelBase
{
public:
    ColorCorrector();
    virtual ~ColorCorrector();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ColorCorrector members

    /// <summary>
    /// 
    /// </summary>
    double getBlackRed() const;
    bool blackRedIsSet() const;
    void unsetBlackRed();

    void setBlackRed(double value);

    double blackRedMin() const;
    double blackRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getBlackGreen() const;
    bool blackGreenIsSet() const;
    void unsetBlackGreen();

    void setBlackGreen(double value);

    double blackGreenMin() const;
    double blackGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getBlackBlue() const;
    bool blackBlueIsSet() const;
    void unsetBlackBlue();

    void setBlackBlue(double value);

    double blackBlueMin() const;
    double blackBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainRed() const;
    bool gainRedIsSet() const;
    void unsetGainRed();

    void setGainRed(double value);

    double gainRedMin() const;
    double gainRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainGreen() const;
    bool gainGreenIsSet() const;
    void unsetGainGreen();

    void setGainGreen(double value);

    double gainGreenMin() const;
    double gainGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGainBlue() const;
    bool gainBlueIsSet() const;
    void unsetGainBlue();

    void setGainBlue(double value);

    double gainBlueMin() const;
    double gainBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaRed() const;
    bool gammaRedIsSet() const;
    void unsetGammaRed();

    void setGammaRed(double value);

    double gammaRedMin() const;
    double gammaRedMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaGreen() const;
    bool gammaGreenIsSet() const;
    void unsetGammaGreen();

    void setGammaGreen(double value);

    double gammaGreenMin() const;
    double gammaGreenMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getGammaBlue() const;
    bool gammaBlueIsSet() const;
    void unsetGammaBlue();

    void setGammaBlue(double value);

    double gammaBlueMin() const;
    double gammaBlueMax() const;

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnitsBlack() const;
    bool unitsBlackIsSet() const;
    void unsetUnitsBlack();

    void setUnitsBlack(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnitsGain() const;
    bool unitsGainIsSet() const;
    void unsetUnitsGain();

    void setUnitsGain(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnitsGamma() const;
    bool unitsGammaIsSet() const;
    void unsetUnitsGamma();

    void setUnitsGamma(const utility::string_t& value);



protected:
    double m_BlackRed;
    bool m_BlackRedIsSet;
    double m_BlackGreen;
    bool m_BlackGreenIsSet;
    double m_BlackBlue;
    bool m_BlackBlueIsSet;
    double m_GainRed;
    bool m_GainRedIsSet;
    double m_GainGreen;
    bool m_GainGreenIsSet;
    double m_GainBlue;
    bool m_GainBlueIsSet;
    double m_GammaRed;
    bool m_GammaRedIsSet;
    double m_GammaGreen;
    bool m_GammaGreenIsSet;
    double m_GammaBlue;
    bool m_GammaBlueIsSet;
    utility::string_t m_UnitsBlack;
    bool m_UnitsBlackIsSet;
    utility::string_t m_UnitsGain;
    bool m_UnitsGainIsSet;
    utility::string_t m_UnitsGamma;
    bool m_UnitsGammaIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ColorCorrector_H_ */
