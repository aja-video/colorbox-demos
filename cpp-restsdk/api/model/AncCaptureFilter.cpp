/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "AncCaptureFilter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AncCaptureFilter::AncCaptureFilter()
{
    m_Enable = false;
    m_EnableIsSet = false;
    m_DidsIsSet = false;
}

AncCaptureFilter::~AncCaptureFilter()
{
}

void AncCaptureFilter::validate()
{
    // TODO: implement validation
}

bool AncCaptureFilter::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value AncCaptureFilter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnableIsSet)
    {
        val[utility::conversions::to_string_t(U("enable"))] = ModelBase::toJson(m_Enable);
    }
    if(m_DidsIsSet)
    {
        val[utility::conversions::to_string_t(U("dids"))] = ModelBase::toJson(m_Dids);
    }

    return val;
}

bool AncCaptureFilter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("enable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enable")));
        if(!fieldValue.is_null())
        {
            bool refVal_enable;
            ok &= ModelBase::fromJson(fieldValue, refVal_enable);
            setEnable(refVal_enable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dids")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_dids;
            ok &= ModelBase::fromJson(fieldValue, refVal_dids);
            setDids(refVal_dids);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void AncCaptureFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enable")), m_Enable));
    }
    if(m_DidsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dids")), m_Dids));
    }
}

bool AncCaptureFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("enable"))))
    {
        bool refVal_enable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enable"))), refVal_enable );
        setEnable(refVal_enable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dids"))))
    {
        std::vector<double> refVal_dids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dids"))), refVal_dids );
        setDids(refVal_dids);
    }
    
    applyMinMaxConstraints();
    return ok;
}

bool AncCaptureFilter::isEnable() const
{
    return m_Enable;
}

void AncCaptureFilter::setEnable(bool value)
{
	bool v = value;
    m_Enable = v;
    m_EnableIsSet = true;
}

bool AncCaptureFilter::enableIsSet() const
{
    return m_EnableIsSet;
}

void AncCaptureFilter::unsetEnable()
{
    m_EnableIsSet = false;
}


std::vector<double>& AncCaptureFilter::getDids()
{
    return m_Dids;
}

void AncCaptureFilter::setDids(std::vector<double> value)
{
	std::vector<double> v = value;
    m_Dids = v;
    m_DidsIsSet = true;
}

bool AncCaptureFilter::didsIsSet() const
{
    return m_DidsIsSet;
}

void AncCaptureFilter::unsetDids()
{
    m_DidsIsSet = false;
}


}
}
}
}


