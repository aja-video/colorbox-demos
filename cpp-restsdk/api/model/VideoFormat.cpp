/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "VideoFormat.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



namespace
{
using EnumUnderlyingType = utility::string_t;

VideoFormat::eVideoFormat toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Auto")))
        return VideoFormat::eVideoFormat::VideoFormat_AUTO;
    if (val == utility::conversions::to_string_t(U("Unknown")))
        return VideoFormat::eVideoFormat::VideoFormat_UNKNOWN;
    if (val == utility::conversions::to_string_t(U("720p50")))
        return VideoFormat::eVideoFormat::VideoFormat__720P50;
    if (val == utility::conversions::to_string_t(U("720p59.94")))
        return VideoFormat::eVideoFormat::VideoFormat__720P59_94;
    if (val == utility::conversions::to_string_t(U("720p60")))
        return VideoFormat::eVideoFormat::VideoFormat__720P60;
    if (val == utility::conversions::to_string_t(U("1080i50")))
        return VideoFormat::eVideoFormat::VideoFormat__1080I50;
    if (val == utility::conversions::to_string_t(U("1080i59.94")))
        return VideoFormat::eVideoFormat::VideoFormat__1080I59_94;
    if (val == utility::conversions::to_string_t(U("1080i60")))
        return VideoFormat::eVideoFormat::VideoFormat__1080I60;
    if (val == utility::conversions::to_string_t(U("1080PsF23.98")))
        return VideoFormat::eVideoFormat::VideoFormat__1080PSF23_98;
    if (val == utility::conversions::to_string_t(U("1080PsF24")))
        return VideoFormat::eVideoFormat::VideoFormat__1080PSF24;
    if (val == utility::conversions::to_string_t(U("1080PsF25")))
        return VideoFormat::eVideoFormat::VideoFormat__1080PSF25;
    if (val == utility::conversions::to_string_t(U("1080PsF29.97")))
        return VideoFormat::eVideoFormat::VideoFormat__1080PSF29_97;
    if (val == utility::conversions::to_string_t(U("1080PsF30")))
        return VideoFormat::eVideoFormat::VideoFormat__1080PSF30;
    if (val == utility::conversions::to_string_t(U("1080p23.98")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P23_98;
    if (val == utility::conversions::to_string_t(U("1080p24")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P24;
    if (val == utility::conversions::to_string_t(U("1080p25")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P25;
    if (val == utility::conversions::to_string_t(U("1080p29.97")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P29_97;
    if (val == utility::conversions::to_string_t(U("1080p30")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P30;
    if (val == utility::conversions::to_string_t(U("1080p50")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P50;
    if (val == utility::conversions::to_string_t(U("1080p59.94")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P59_94;
    if (val == utility::conversions::to_string_t(U("1080p60")))
        return VideoFormat::eVideoFormat::VideoFormat__1080P60;
    if (val == utility::conversions::to_string_t(U("2Kp23.98")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP23_98;
    if (val == utility::conversions::to_string_t(U("2Kp24")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP24;
    if (val == utility::conversions::to_string_t(U("2Kp25")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP25;
    if (val == utility::conversions::to_string_t(U("2Kp29.97")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP29_97;
    if (val == utility::conversions::to_string_t(U("2Kp30")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP30;
    if (val == utility::conversions::to_string_t(U("2Kp47.95")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP47_95;
    if (val == utility::conversions::to_string_t(U("2Kp48")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP48;
    if (val == utility::conversions::to_string_t(U("2Kp50")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP50;
    if (val == utility::conversions::to_string_t(U("2Kp59.94")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP59_94;
    if (val == utility::conversions::to_string_t(U("2Kp60")))
        return VideoFormat::eVideoFormat::VideoFormat__2KP60;
    if (val == utility::conversions::to_string_t(U("2KPsF23.98")))
        return VideoFormat::eVideoFormat::VideoFormat__2KPSF23_98;
    if (val == utility::conversions::to_string_t(U("2KPsF24")))
        return VideoFormat::eVideoFormat::VideoFormat__2KPSF24;
    if (val == utility::conversions::to_string_t(U("2KPsF25")))
        return VideoFormat::eVideoFormat::VideoFormat__2KPSF25;
    if (val == utility::conversions::to_string_t(U("UHDp23.98")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP23_98;
    if (val == utility::conversions::to_string_t(U("UHDp24")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP24;
    if (val == utility::conversions::to_string_t(U("UHDp25")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP25;
    if (val == utility::conversions::to_string_t(U("UHDp29.97")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP29_97;
    if (val == utility::conversions::to_string_t(U("UHDp30")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP30;
    if (val == utility::conversions::to_string_t(U("UHDp50")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP50;
    if (val == utility::conversions::to_string_t(U("UHDp59.94")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP59_94;
    if (val == utility::conversions::to_string_t(U("UHDp60")))
        return VideoFormat::eVideoFormat::VideoFormat_UHDP60;
    if (val == utility::conversions::to_string_t(U("4Kp23.98")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP23_98;
    if (val == utility::conversions::to_string_t(U("4Kp24")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP24;
    if (val == utility::conversions::to_string_t(U("4Kp25")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP25;
    if (val == utility::conversions::to_string_t(U("4Kp29.97")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP29_97;
    if (val == utility::conversions::to_string_t(U("4Kp30")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP30;
    if (val == utility::conversions::to_string_t(U("4Kp47.95")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP47_95;
    if (val == utility::conversions::to_string_t(U("4Kp48")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP48;
    if (val == utility::conversions::to_string_t(U("4Kp50")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP50;
    if (val == utility::conversions::to_string_t(U("4Kp59.94")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP59_94;
    if (val == utility::conversions::to_string_t(U("4Kp60")))
        return VideoFormat::eVideoFormat::VideoFormat__4KP60;
    return {};
}

EnumUnderlyingType fromEnum(VideoFormat::eVideoFormat e)
{
    switch (e)
    {
    case VideoFormat::eVideoFormat::VideoFormat_AUTO:
        return U("Auto");
    case VideoFormat::eVideoFormat::VideoFormat_UNKNOWN:
        return U("Unknown");
    case VideoFormat::eVideoFormat::VideoFormat__720P50:
        return U("720p50");
    case VideoFormat::eVideoFormat::VideoFormat__720P59_94:
        return U("720p59.94");
    case VideoFormat::eVideoFormat::VideoFormat__720P60:
        return U("720p60");
    case VideoFormat::eVideoFormat::VideoFormat__1080I50:
        return U("1080i50");
    case VideoFormat::eVideoFormat::VideoFormat__1080I59_94:
        return U("1080i59.94");
    case VideoFormat::eVideoFormat::VideoFormat__1080I60:
        return U("1080i60");
    case VideoFormat::eVideoFormat::VideoFormat__1080PSF23_98:
        return U("1080PsF23.98");
    case VideoFormat::eVideoFormat::VideoFormat__1080PSF24:
        return U("1080PsF24");
    case VideoFormat::eVideoFormat::VideoFormat__1080PSF25:
        return U("1080PsF25");
    case VideoFormat::eVideoFormat::VideoFormat__1080PSF29_97:
        return U("1080PsF29.97");
    case VideoFormat::eVideoFormat::VideoFormat__1080PSF30:
        return U("1080PsF30");
    case VideoFormat::eVideoFormat::VideoFormat__1080P23_98:
        return U("1080p23.98");
    case VideoFormat::eVideoFormat::VideoFormat__1080P24:
        return U("1080p24");
    case VideoFormat::eVideoFormat::VideoFormat__1080P25:
        return U("1080p25");
    case VideoFormat::eVideoFormat::VideoFormat__1080P29_97:
        return U("1080p29.97");
    case VideoFormat::eVideoFormat::VideoFormat__1080P30:
        return U("1080p30");
    case VideoFormat::eVideoFormat::VideoFormat__1080P50:
        return U("1080p50");
    case VideoFormat::eVideoFormat::VideoFormat__1080P59_94:
        return U("1080p59.94");
    case VideoFormat::eVideoFormat::VideoFormat__1080P60:
        return U("1080p60");
    case VideoFormat::eVideoFormat::VideoFormat__2KP23_98:
        return U("2Kp23.98");
    case VideoFormat::eVideoFormat::VideoFormat__2KP24:
        return U("2Kp24");
    case VideoFormat::eVideoFormat::VideoFormat__2KP25:
        return U("2Kp25");
    case VideoFormat::eVideoFormat::VideoFormat__2KP29_97:
        return U("2Kp29.97");
    case VideoFormat::eVideoFormat::VideoFormat__2KP30:
        return U("2Kp30");
    case VideoFormat::eVideoFormat::VideoFormat__2KP47_95:
        return U("2Kp47.95");
    case VideoFormat::eVideoFormat::VideoFormat__2KP48:
        return U("2Kp48");
    case VideoFormat::eVideoFormat::VideoFormat__2KP50:
        return U("2Kp50");
    case VideoFormat::eVideoFormat::VideoFormat__2KP59_94:
        return U("2Kp59.94");
    case VideoFormat::eVideoFormat::VideoFormat__2KP60:
        return U("2Kp60");
    case VideoFormat::eVideoFormat::VideoFormat__2KPSF23_98:
        return U("2KPsF23.98");
    case VideoFormat::eVideoFormat::VideoFormat__2KPSF24:
        return U("2KPsF24");
    case VideoFormat::eVideoFormat::VideoFormat__2KPSF25:
        return U("2KPsF25");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP23_98:
        return U("UHDp23.98");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP24:
        return U("UHDp24");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP25:
        return U("UHDp25");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP29_97:
        return U("UHDp29.97");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP30:
        return U("UHDp30");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP50:
        return U("UHDp50");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP59_94:
        return U("UHDp59.94");
    case VideoFormat::eVideoFormat::VideoFormat_UHDP60:
        return U("UHDp60");
    case VideoFormat::eVideoFormat::VideoFormat__4KP23_98:
        return U("4Kp23.98");
    case VideoFormat::eVideoFormat::VideoFormat__4KP24:
        return U("4Kp24");
    case VideoFormat::eVideoFormat::VideoFormat__4KP25:
        return U("4Kp25");
    case VideoFormat::eVideoFormat::VideoFormat__4KP29_97:
        return U("4Kp29.97");
    case VideoFormat::eVideoFormat::VideoFormat__4KP30:
        return U("4Kp30");
    case VideoFormat::eVideoFormat::VideoFormat__4KP47_95:
        return U("4Kp47.95");
    case VideoFormat::eVideoFormat::VideoFormat__4KP48:
        return U("4Kp48");
    case VideoFormat::eVideoFormat::VideoFormat__4KP50:
        return U("4Kp50");
    case VideoFormat::eVideoFormat::VideoFormat__4KP59_94:
        return U("4Kp59.94");
    case VideoFormat::eVideoFormat::VideoFormat__4KP60:
        return U("4Kp60");
    default:
        break;
    }
    return {};
}
}

VideoFormat::VideoFormat()
{
}

VideoFormat::~VideoFormat()
{
}

void VideoFormat::validate()
{
    // TODO: implement validation
}

bool VideoFormat::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value VideoFormat::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool VideoFormat::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void VideoFormat::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool VideoFormat::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

VideoFormat::eVideoFormat VideoFormat::getValue() const
{
   return m_value;
}

void VideoFormat::setValue(VideoFormat::eVideoFormat const value)
{
   m_value = value;
}


}
}
}
}


