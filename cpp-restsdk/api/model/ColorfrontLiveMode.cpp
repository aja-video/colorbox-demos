/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "ColorfrontLiveMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ColorfrontLiveMode::ColorfrontLiveMode()
{
    m_EngineIsSet = false;
    m_InDynRangeGamutIsSet = false;
    m_OutDynRangeGamutIsSet = false;
    m_SdrPreview = false;
    m_SdrPreviewIsSet = false;
    m_HdrAmount = 0.0;
    m_HdrAmountIsSet = false;
    m_AmbLightComp = 0.0;
    m_AmbLightCompIsSet = false;
    m_HdrLogLook = 0.0;
    m_HdrLogLookIsSet = false;
    m_SdrSoftness = 0.0;
    m_SdrSoftnessIsSet = false;
    m_LiftMaster = 0.0;
    m_LiftMasterIsSet = false;
    m_LiftRed = 0.0;
    m_LiftRedIsSet = false;
    m_LiftGreen = 0.0;
    m_LiftGreenIsSet = false;
    m_LiftBlue = 0.0;
    m_LiftBlueIsSet = false;
    m_GammaMaster = 0.0;
    m_GammaMasterIsSet = false;
    m_GammaRed = 0.0;
    m_GammaRedIsSet = false;
    m_GammaGreen = 0.0;
    m_GammaGreenIsSet = false;
    m_GammaBlue = 0.0;
    m_GammaBlueIsSet = false;
    m_GainMaster = 0.0;
    m_GainMasterIsSet = false;
    m_GainRed = 0.0;
    m_GainRedIsSet = false;
    m_GainGreen = 0.0;
    m_GainGreenIsSet = false;
    m_GainBlue = 0.0;
    m_GainBlueIsSet = false;
    m_Saturation = 0.0;
    m_SaturationIsSet = false;
    m_Exposure = 0.0;
    m_ExposureIsSet = false;
    m_ColorTemp = 0.0;
    m_ColorTempIsSet = false;
    m_Tint = 0.0;
    m_TintIsSet = false;
    m_PqOutputNitLevel = 0.0;
    m_PqOutputNitLevelIsSet = false;
    m_P3ColorspaceClamp = false;
    m_P3ColorspaceClampIsSet = false;
    m_Bt2408Mode = 0.0;
    m_Bt2408ModeIsSet = false;
}

ColorfrontLiveMode::~ColorfrontLiveMode()
{
}

void ColorfrontLiveMode::validate()
{
    // TODO: implement validation
}

bool ColorfrontLiveMode::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (hdrAmountIsSet())
	{
		bool hdrAmountChanged = false;
		double v = getHdrAmount();
		double min = hdrAmountMin();
		double max = hdrAmountMax();
		if (v < min) { v = min; hdrAmountChanged = true; }
		if (v > max) { v = max; hdrAmountChanged = true; }
		if (hdrAmountChanged) { setHdrAmount(v); anyMinMaxValueChanged = true; }
	}
	if (ambLightCompIsSet())
	{
		bool ambLightCompChanged = false;
		double v = getAmbLightComp();
		double min = ambLightCompMin();
		double max = ambLightCompMax();
		if (v < min) { v = min; ambLightCompChanged = true; }
		if (v > max) { v = max; ambLightCompChanged = true; }
		if (ambLightCompChanged) { setAmbLightComp(v); anyMinMaxValueChanged = true; }
	}
	if (hdrLogLookIsSet())
	{
		bool hdrLogLookChanged = false;
		double v = getHdrLogLook();
		double min = hdrLogLookMin();
		double max = hdrLogLookMax();
		if (v < min) { v = min; hdrLogLookChanged = true; }
		if (v > max) { v = max; hdrLogLookChanged = true; }
		if (hdrLogLookChanged) { setHdrLogLook(v); anyMinMaxValueChanged = true; }
	}
	if (sdrSoftnessIsSet())
	{
		bool sdrSoftnessChanged = false;
		double v = getSdrSoftness();
		double min = sdrSoftnessMin();
		double max = sdrSoftnessMax();
		if (v < min) { v = min; sdrSoftnessChanged = true; }
		if (v > max) { v = max; sdrSoftnessChanged = true; }
		if (sdrSoftnessChanged) { setSdrSoftness(v); anyMinMaxValueChanged = true; }
	}
	if (liftMasterIsSet())
	{
		bool liftMasterChanged = false;
		double v = getLiftMaster();
		double min = liftMasterMin();
		double max = liftMasterMax();
		if (v < min) { v = min; liftMasterChanged = true; }
		if (v > max) { v = max; liftMasterChanged = true; }
		if (liftMasterChanged) { setLiftMaster(v); anyMinMaxValueChanged = true; }
	}
	if (liftRedIsSet())
	{
		bool liftRedChanged = false;
		double v = getLiftRed();
		double min = liftRedMin();
		double max = liftRedMax();
		if (v < min) { v = min; liftRedChanged = true; }
		if (v > max) { v = max; liftRedChanged = true; }
		if (liftRedChanged) { setLiftRed(v); anyMinMaxValueChanged = true; }
	}
	if (liftGreenIsSet())
	{
		bool liftGreenChanged = false;
		double v = getLiftGreen();
		double min = liftGreenMin();
		double max = liftGreenMax();
		if (v < min) { v = min; liftGreenChanged = true; }
		if (v > max) { v = max; liftGreenChanged = true; }
		if (liftGreenChanged) { setLiftGreen(v); anyMinMaxValueChanged = true; }
	}
	if (liftBlueIsSet())
	{
		bool liftBlueChanged = false;
		double v = getLiftBlue();
		double min = liftBlueMin();
		double max = liftBlueMax();
		if (v < min) { v = min; liftBlueChanged = true; }
		if (v > max) { v = max; liftBlueChanged = true; }
		if (liftBlueChanged) { setLiftBlue(v); anyMinMaxValueChanged = true; }
	}
	if (gammaMasterIsSet())
	{
		bool gammaMasterChanged = false;
		double v = getGammaMaster();
		double min = gammaMasterMin();
		double max = gammaMasterMax();
		if (v < min) { v = min; gammaMasterChanged = true; }
		if (v > max) { v = max; gammaMasterChanged = true; }
		if (gammaMasterChanged) { setGammaMaster(v); anyMinMaxValueChanged = true; }
	}
	if (gammaRedIsSet())
	{
		bool gammaRedChanged = false;
		double v = getGammaRed();
		double min = gammaRedMin();
		double max = gammaRedMax();
		if (v < min) { v = min; gammaRedChanged = true; }
		if (v > max) { v = max; gammaRedChanged = true; }
		if (gammaRedChanged) { setGammaRed(v); anyMinMaxValueChanged = true; }
	}
	if (gammaGreenIsSet())
	{
		bool gammaGreenChanged = false;
		double v = getGammaGreen();
		double min = gammaGreenMin();
		double max = gammaGreenMax();
		if (v < min) { v = min; gammaGreenChanged = true; }
		if (v > max) { v = max; gammaGreenChanged = true; }
		if (gammaGreenChanged) { setGammaGreen(v); anyMinMaxValueChanged = true; }
	}
	if (gammaBlueIsSet())
	{
		bool gammaBlueChanged = false;
		double v = getGammaBlue();
		double min = gammaBlueMin();
		double max = gammaBlueMax();
		if (v < min) { v = min; gammaBlueChanged = true; }
		if (v > max) { v = max; gammaBlueChanged = true; }
		if (gammaBlueChanged) { setGammaBlue(v); anyMinMaxValueChanged = true; }
	}
	if (gainMasterIsSet())
	{
		bool gainMasterChanged = false;
		double v = getGainMaster();
		double min = gainMasterMin();
		double max = gainMasterMax();
		if (v < min) { v = min; gainMasterChanged = true; }
		if (v > max) { v = max; gainMasterChanged = true; }
		if (gainMasterChanged) { setGainMaster(v); anyMinMaxValueChanged = true; }
	}
	if (gainRedIsSet())
	{
		bool gainRedChanged = false;
		double v = getGainRed();
		double min = gainRedMin();
		double max = gainRedMax();
		if (v < min) { v = min; gainRedChanged = true; }
		if (v > max) { v = max; gainRedChanged = true; }
		if (gainRedChanged) { setGainRed(v); anyMinMaxValueChanged = true; }
	}
	if (gainGreenIsSet())
	{
		bool gainGreenChanged = false;
		double v = getGainGreen();
		double min = gainGreenMin();
		double max = gainGreenMax();
		if (v < min) { v = min; gainGreenChanged = true; }
		if (v > max) { v = max; gainGreenChanged = true; }
		if (gainGreenChanged) { setGainGreen(v); anyMinMaxValueChanged = true; }
	}
	if (gainBlueIsSet())
	{
		bool gainBlueChanged = false;
		double v = getGainBlue();
		double min = gainBlueMin();
		double max = gainBlueMax();
		if (v < min) { v = min; gainBlueChanged = true; }
		if (v > max) { v = max; gainBlueChanged = true; }
		if (gainBlueChanged) { setGainBlue(v); anyMinMaxValueChanged = true; }
	}
	if (saturationIsSet())
	{
		bool saturationChanged = false;
		double v = getSaturation();
		double min = saturationMin();
		double max = saturationMax();
		if (v < min) { v = min; saturationChanged = true; }
		if (v > max) { v = max; saturationChanged = true; }
		if (saturationChanged) { setSaturation(v); anyMinMaxValueChanged = true; }
	}
	if (exposureIsSet())
	{
		bool exposureChanged = false;
		double v = getExposure();
		double min = exposureMin();
		double max = exposureMax();
		if (v < min) { v = min; exposureChanged = true; }
		if (v > max) { v = max; exposureChanged = true; }
		if (exposureChanged) { setExposure(v); anyMinMaxValueChanged = true; }
	}
	if (colorTempIsSet())
	{
		bool colorTempChanged = false;
		double v = getColorTemp();
		double min = colorTempMin();
		double max = colorTempMax();
		if (v < min) { v = min; colorTempChanged = true; }
		if (v > max) { v = max; colorTempChanged = true; }
		if (colorTempChanged) { setColorTemp(v); anyMinMaxValueChanged = true; }
	}
	if (tintIsSet())
	{
		bool tintChanged = false;
		double v = getTint();
		double min = tintMin();
		double max = tintMax();
		if (v < min) { v = min; tintChanged = true; }
		if (v > max) { v = max; tintChanged = true; }
		if (tintChanged) { setTint(v); anyMinMaxValueChanged = true; }
	}
	if (pqOutputNitLevelIsSet())
	{
		bool pqOutputNitLevelChanged = false;
		double v = getPqOutputNitLevel();
		double min = pqOutputNitLevelMin();
		double max = pqOutputNitLevelMax();
		if (v < min) { v = min; pqOutputNitLevelChanged = true; }
		if (v > max) { v = max; pqOutputNitLevelChanged = true; }
		if (pqOutputNitLevelChanged) { setPqOutputNitLevel(v); anyMinMaxValueChanged = true; }
	}
	if (bt2408ModeIsSet())
	{
		bool bt2408ModeChanged = false;
		double v = getBt2408Mode();
		double min = bt2408ModeMin();
		double max = bt2408ModeMax();
		if (v < min) { v = min; bt2408ModeChanged = true; }
		if (v > max) { v = max; bt2408ModeChanged = true; }
		if (bt2408ModeChanged) { setBt2408Mode(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value ColorfrontLiveMode::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EngineIsSet)
    {
        val[utility::conversions::to_string_t(U("engine"))] = ModelBase::toJson(m_Engine);
    }
    if(m_InDynRangeGamutIsSet)
    {
        val[utility::conversions::to_string_t(U("inDynRangeGamut"))] = ModelBase::toJson(m_InDynRangeGamut);
    }
    if(m_OutDynRangeGamutIsSet)
    {
        val[utility::conversions::to_string_t(U("outDynRangeGamut"))] = ModelBase::toJson(m_OutDynRangeGamut);
    }
    if(m_SdrPreviewIsSet)
    {
        val[utility::conversions::to_string_t(U("sdrPreview"))] = ModelBase::toJson(m_SdrPreview);
    }
    if(m_HdrAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("hdrAmount"))] = ModelBase::toJson(m_HdrAmount);
    }
    if(m_AmbLightCompIsSet)
    {
        val[utility::conversions::to_string_t(U("ambLightComp"))] = ModelBase::toJson(m_AmbLightComp);
    }
    if(m_HdrLogLookIsSet)
    {
        val[utility::conversions::to_string_t(U("hdrLogLook"))] = ModelBase::toJson(m_HdrLogLook);
    }
    if(m_SdrSoftnessIsSet)
    {
        val[utility::conversions::to_string_t(U("sdrSoftness"))] = ModelBase::toJson(m_SdrSoftness);
    }
    if(m_LiftMasterIsSet)
    {
        val[utility::conversions::to_string_t(U("liftMaster"))] = ModelBase::toJson(m_LiftMaster);
    }
    if(m_LiftRedIsSet)
    {
        val[utility::conversions::to_string_t(U("liftRed"))] = ModelBase::toJson(m_LiftRed);
    }
    if(m_LiftGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("liftGreen"))] = ModelBase::toJson(m_LiftGreen);
    }
    if(m_LiftBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("liftBlue"))] = ModelBase::toJson(m_LiftBlue);
    }
    if(m_GammaMasterIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaMaster"))] = ModelBase::toJson(m_GammaMaster);
    }
    if(m_GammaRedIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaRed"))] = ModelBase::toJson(m_GammaRed);
    }
    if(m_GammaGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaGreen"))] = ModelBase::toJson(m_GammaGreen);
    }
    if(m_GammaBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("gammaBlue"))] = ModelBase::toJson(m_GammaBlue);
    }
    if(m_GainMasterIsSet)
    {
        val[utility::conversions::to_string_t(U("gainMaster"))] = ModelBase::toJson(m_GainMaster);
    }
    if(m_GainRedIsSet)
    {
        val[utility::conversions::to_string_t(U("gainRed"))] = ModelBase::toJson(m_GainRed);
    }
    if(m_GainGreenIsSet)
    {
        val[utility::conversions::to_string_t(U("gainGreen"))] = ModelBase::toJson(m_GainGreen);
    }
    if(m_GainBlueIsSet)
    {
        val[utility::conversions::to_string_t(U("gainBlue"))] = ModelBase::toJson(m_GainBlue);
    }
    if(m_SaturationIsSet)
    {
        val[utility::conversions::to_string_t(U("saturation"))] = ModelBase::toJson(m_Saturation);
    }
    if(m_ExposureIsSet)
    {
        val[utility::conversions::to_string_t(U("exposure"))] = ModelBase::toJson(m_Exposure);
    }
    if(m_ColorTempIsSet)
    {
        val[utility::conversions::to_string_t(U("colorTemp"))] = ModelBase::toJson(m_ColorTemp);
    }
    if(m_TintIsSet)
    {
        val[utility::conversions::to_string_t(U("tint"))] = ModelBase::toJson(m_Tint);
    }
    if(m_PqOutputNitLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("pqOutputNitLevel"))] = ModelBase::toJson(m_PqOutputNitLevel);
    }
    if(m_P3ColorspaceClampIsSet)
    {
        val[utility::conversions::to_string_t(U("p3ColorspaceClamp"))] = ModelBase::toJson(m_P3ColorspaceClamp);
    }
    if(m_Bt2408ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("bt2408Mode"))] = ModelBase::toJson(m_Bt2408Mode);
    }

    return val;
}

bool ColorfrontLiveMode::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("engine"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engine")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontEngine> refVal_engine;
            ok &= ModelBase::fromJson(fieldValue, refVal_engine);
            setEngine(refVal_engine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inDynRangeGamut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inDynRangeGamut")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> refVal_inDynRangeGamut;
            ok &= ModelBase::fromJson(fieldValue, refVal_inDynRangeGamut);
            setInDynRangeGamut(refVal_inDynRangeGamut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outDynRangeGamut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outDynRangeGamut")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> refVal_outDynRangeGamut;
            ok &= ModelBase::fromJson(fieldValue, refVal_outDynRangeGamut);
            setOutDynRangeGamut(refVal_outDynRangeGamut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sdrPreview"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sdrPreview")));
        if(!fieldValue.is_null())
        {
            bool refVal_sdrPreview;
            ok &= ModelBase::fromJson(fieldValue, refVal_sdrPreview);
            setSdrPreview(refVal_sdrPreview);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hdrAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hdrAmount")));
        if(!fieldValue.is_null())
        {
            double refVal_hdrAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_hdrAmount);
            setHdrAmount(refVal_hdrAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ambLightComp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ambLightComp")));
        if(!fieldValue.is_null())
        {
            double refVal_ambLightComp;
            ok &= ModelBase::fromJson(fieldValue, refVal_ambLightComp);
            setAmbLightComp(refVal_ambLightComp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hdrLogLook"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hdrLogLook")));
        if(!fieldValue.is_null())
        {
            double refVal_hdrLogLook;
            ok &= ModelBase::fromJson(fieldValue, refVal_hdrLogLook);
            setHdrLogLook(refVal_hdrLogLook);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sdrSoftness"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sdrSoftness")));
        if(!fieldValue.is_null())
        {
            double refVal_sdrSoftness;
            ok &= ModelBase::fromJson(fieldValue, refVal_sdrSoftness);
            setSdrSoftness(refVal_sdrSoftness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftMaster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftMaster")));
        if(!fieldValue.is_null())
        {
            double refVal_liftMaster;
            ok &= ModelBase::fromJson(fieldValue, refVal_liftMaster);
            setLiftMaster(refVal_liftMaster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftRed")));
        if(!fieldValue.is_null())
        {
            double refVal_liftRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_liftRed);
            setLiftRed(refVal_liftRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_liftGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_liftGreen);
            setLiftGreen(refVal_liftGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_liftBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_liftBlue);
            setLiftBlue(refVal_liftBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaMaster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaMaster")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaMaster;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaMaster);
            setGammaMaster(refVal_gammaMaster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaRed")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaRed);
            setGammaRed(refVal_gammaRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaGreen);
            setGammaGreen(refVal_gammaGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gammaBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gammaBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_gammaBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_gammaBlue);
            setGammaBlue(refVal_gammaBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainMaster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainMaster")));
        if(!fieldValue.is_null())
        {
            double refVal_gainMaster;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainMaster);
            setGainMaster(refVal_gainMaster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainRed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainRed")));
        if(!fieldValue.is_null())
        {
            double refVal_gainRed;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainRed);
            setGainRed(refVal_gainRed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainGreen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainGreen")));
        if(!fieldValue.is_null())
        {
            double refVal_gainGreen;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainGreen);
            setGainGreen(refVal_gainGreen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gainBlue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gainBlue")));
        if(!fieldValue.is_null())
        {
            double refVal_gainBlue;
            ok &= ModelBase::fromJson(fieldValue, refVal_gainBlue);
            setGainBlue(refVal_gainBlue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("saturation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("saturation")));
        if(!fieldValue.is_null())
        {
            double refVal_saturation;
            ok &= ModelBase::fromJson(fieldValue, refVal_saturation);
            setSaturation(refVal_saturation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exposure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exposure")));
        if(!fieldValue.is_null())
        {
            double refVal_exposure;
            ok &= ModelBase::fromJson(fieldValue, refVal_exposure);
            setExposure(refVal_exposure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("colorTemp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("colorTemp")));
        if(!fieldValue.is_null())
        {
            double refVal_colorTemp;
            ok &= ModelBase::fromJson(fieldValue, refVal_colorTemp);
            setColorTemp(refVal_colorTemp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tint")));
        if(!fieldValue.is_null())
        {
            double refVal_tint;
            ok &= ModelBase::fromJson(fieldValue, refVal_tint);
            setTint(refVal_tint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pqOutputNitLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pqOutputNitLevel")));
        if(!fieldValue.is_null())
        {
            double refVal_pqOutputNitLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_pqOutputNitLevel);
            setPqOutputNitLevel(refVal_pqOutputNitLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("p3ColorspaceClamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("p3ColorspaceClamp")));
        if(!fieldValue.is_null())
        {
            bool refVal_p3ColorspaceClamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_p3ColorspaceClamp);
            setP3ColorspaceClamp(refVal_p3ColorspaceClamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bt2408Mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bt2408Mode")));
        if(!fieldValue.is_null())
        {
            double refVal_bt2408Mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_bt2408Mode);
            setBt2408Mode(refVal_bt2408Mode);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void ColorfrontLiveMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EngineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engine")), m_Engine));
    }
    if(m_InDynRangeGamutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inDynRangeGamut")), m_InDynRangeGamut));
    }
    if(m_OutDynRangeGamutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outDynRangeGamut")), m_OutDynRangeGamut));
    }
    if(m_SdrPreviewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sdrPreview")), m_SdrPreview));
    }
    if(m_HdrAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hdrAmount")), m_HdrAmount));
    }
    if(m_AmbLightCompIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ambLightComp")), m_AmbLightComp));
    }
    if(m_HdrLogLookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hdrLogLook")), m_HdrLogLook));
    }
    if(m_SdrSoftnessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sdrSoftness")), m_SdrSoftness));
    }
    if(m_LiftMasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftMaster")), m_LiftMaster));
    }
    if(m_LiftRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftRed")), m_LiftRed));
    }
    if(m_LiftGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftGreen")), m_LiftGreen));
    }
    if(m_LiftBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftBlue")), m_LiftBlue));
    }
    if(m_GammaMasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaMaster")), m_GammaMaster));
    }
    if(m_GammaRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaRed")), m_GammaRed));
    }
    if(m_GammaGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaGreen")), m_GammaGreen));
    }
    if(m_GammaBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gammaBlue")), m_GammaBlue));
    }
    if(m_GainMasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainMaster")), m_GainMaster));
    }
    if(m_GainRedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainRed")), m_GainRed));
    }
    if(m_GainGreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainGreen")), m_GainGreen));
    }
    if(m_GainBlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gainBlue")), m_GainBlue));
    }
    if(m_SaturationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("saturation")), m_Saturation));
    }
    if(m_ExposureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exposure")), m_Exposure));
    }
    if(m_ColorTempIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("colorTemp")), m_ColorTemp));
    }
    if(m_TintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tint")), m_Tint));
    }
    if(m_PqOutputNitLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pqOutputNitLevel")), m_PqOutputNitLevel));
    }
    if(m_P3ColorspaceClampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("p3ColorspaceClamp")), m_P3ColorspaceClamp));
    }
    if(m_Bt2408ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bt2408Mode")), m_Bt2408Mode));
    }
}

bool ColorfrontLiveMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("engine"))))
    {
        std::shared_ptr<ColorfrontEngine> refVal_engine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engine"))), refVal_engine );
        setEngine(refVal_engine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inDynRangeGamut"))))
    {
        std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> refVal_inDynRangeGamut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inDynRangeGamut"))), refVal_inDynRangeGamut );
        setInDynRangeGamut(refVal_inDynRangeGamut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outDynRangeGamut"))))
    {
        std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> refVal_outDynRangeGamut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outDynRangeGamut"))), refVal_outDynRangeGamut );
        setOutDynRangeGamut(refVal_outDynRangeGamut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sdrPreview"))))
    {
        bool refVal_sdrPreview;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sdrPreview"))), refVal_sdrPreview );
        setSdrPreview(refVal_sdrPreview);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hdrAmount"))))
    {
        double refVal_hdrAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hdrAmount"))), refVal_hdrAmount );
        setHdrAmount(refVal_hdrAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ambLightComp"))))
    {
        double refVal_ambLightComp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ambLightComp"))), refVal_ambLightComp );
        setAmbLightComp(refVal_ambLightComp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hdrLogLook"))))
    {
        double refVal_hdrLogLook;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hdrLogLook"))), refVal_hdrLogLook );
        setHdrLogLook(refVal_hdrLogLook);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sdrSoftness"))))
    {
        double refVal_sdrSoftness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sdrSoftness"))), refVal_sdrSoftness );
        setSdrSoftness(refVal_sdrSoftness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftMaster"))))
    {
        double refVal_liftMaster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftMaster"))), refVal_liftMaster );
        setLiftMaster(refVal_liftMaster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftRed"))))
    {
        double refVal_liftRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftRed"))), refVal_liftRed );
        setLiftRed(refVal_liftRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftGreen"))))
    {
        double refVal_liftGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftGreen"))), refVal_liftGreen );
        setLiftGreen(refVal_liftGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftBlue"))))
    {
        double refVal_liftBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftBlue"))), refVal_liftBlue );
        setLiftBlue(refVal_liftBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaMaster"))))
    {
        double refVal_gammaMaster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaMaster"))), refVal_gammaMaster );
        setGammaMaster(refVal_gammaMaster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaRed"))))
    {
        double refVal_gammaRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaRed"))), refVal_gammaRed );
        setGammaRed(refVal_gammaRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaGreen"))))
    {
        double refVal_gammaGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaGreen"))), refVal_gammaGreen );
        setGammaGreen(refVal_gammaGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gammaBlue"))))
    {
        double refVal_gammaBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gammaBlue"))), refVal_gammaBlue );
        setGammaBlue(refVal_gammaBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainMaster"))))
    {
        double refVal_gainMaster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainMaster"))), refVal_gainMaster );
        setGainMaster(refVal_gainMaster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainRed"))))
    {
        double refVal_gainRed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainRed"))), refVal_gainRed );
        setGainRed(refVal_gainRed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainGreen"))))
    {
        double refVal_gainGreen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainGreen"))), refVal_gainGreen );
        setGainGreen(refVal_gainGreen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gainBlue"))))
    {
        double refVal_gainBlue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gainBlue"))), refVal_gainBlue );
        setGainBlue(refVal_gainBlue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("saturation"))))
    {
        double refVal_saturation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("saturation"))), refVal_saturation );
        setSaturation(refVal_saturation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exposure"))))
    {
        double refVal_exposure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exposure"))), refVal_exposure );
        setExposure(refVal_exposure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("colorTemp"))))
    {
        double refVal_colorTemp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("colorTemp"))), refVal_colorTemp );
        setColorTemp(refVal_colorTemp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tint"))))
    {
        double refVal_tint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tint"))), refVal_tint );
        setTint(refVal_tint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pqOutputNitLevel"))))
    {
        double refVal_pqOutputNitLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pqOutputNitLevel"))), refVal_pqOutputNitLevel );
        setPqOutputNitLevel(refVal_pqOutputNitLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("p3ColorspaceClamp"))))
    {
        bool refVal_p3ColorspaceClamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("p3ColorspaceClamp"))), refVal_p3ColorspaceClamp );
        setP3ColorspaceClamp(refVal_p3ColorspaceClamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bt2408Mode"))))
    {
        double refVal_bt2408Mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bt2408Mode"))), refVal_bt2408Mode );
        setBt2408Mode(refVal_bt2408Mode);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<ColorfrontEngine> ColorfrontLiveMode::getEngine() const
{
    return m_Engine;
}

void ColorfrontLiveMode::setEngine(const std::shared_ptr<ColorfrontEngine>& value)
{
	std::shared_ptr<ColorfrontEngine> v = value;
    m_Engine = v;
    m_EngineIsSet = true;
}

bool ColorfrontLiveMode::engineIsSet() const
{
    return m_EngineIsSet;
}

void ColorfrontLiveMode::unsetEngine()
{
    m_EngineIsSet = false;
}


std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> ColorfrontLiveMode::getInDynRangeGamut() const
{
    return m_InDynRangeGamut;
}

void ColorfrontLiveMode::setInDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn>& value)
{
	std::shared_ptr<ColorfrontDynRangeGamutLiveModeIn> v = value;
    m_InDynRangeGamut = v;
    m_InDynRangeGamutIsSet = true;
}

bool ColorfrontLiveMode::inDynRangeGamutIsSet() const
{
    return m_InDynRangeGamutIsSet;
}

void ColorfrontLiveMode::unsetInDynRangeGamut()
{
    m_InDynRangeGamutIsSet = false;
}


std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> ColorfrontLiveMode::getOutDynRangeGamut() const
{
    return m_OutDynRangeGamut;
}

void ColorfrontLiveMode::setOutDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut>& value)
{
	std::shared_ptr<ColorfrontDynRangeGamutLiveModeOut> v = value;
    m_OutDynRangeGamut = v;
    m_OutDynRangeGamutIsSet = true;
}

bool ColorfrontLiveMode::outDynRangeGamutIsSet() const
{
    return m_OutDynRangeGamutIsSet;
}

void ColorfrontLiveMode::unsetOutDynRangeGamut()
{
    m_OutDynRangeGamutIsSet = false;
}


bool ColorfrontLiveMode::isSdrPreview() const
{
    return m_SdrPreview;
}

void ColorfrontLiveMode::setSdrPreview(bool value)
{
	bool v = value;
    m_SdrPreview = v;
    m_SdrPreviewIsSet = true;
}

bool ColorfrontLiveMode::sdrPreviewIsSet() const
{
    return m_SdrPreviewIsSet;
}

void ColorfrontLiveMode::unsetSdrPreview()
{
    m_SdrPreviewIsSet = false;
}


double ColorfrontLiveMode::getHdrAmount() const
{
    return m_HdrAmount;
}

void ColorfrontLiveMode::setHdrAmount(double value)
{
	double v = value;
	double min = hdrAmountMin();
	double max = hdrAmountMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_HdrAmount = v;
    m_HdrAmountIsSet = true;
}

bool ColorfrontLiveMode::hdrAmountIsSet() const
{
    return m_HdrAmountIsSet;
}

void ColorfrontLiveMode::unsetHdrAmount()
{
    m_HdrAmountIsSet = false;
}

double ColorfrontLiveMode::hdrAmountMin() const {
	return -1.0;
}

double ColorfrontLiveMode::hdrAmountMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getAmbLightComp() const
{
    return m_AmbLightComp;
}

void ColorfrontLiveMode::setAmbLightComp(double value)
{
	double v = value;
	double min = ambLightCompMin();
	double max = ambLightCompMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_AmbLightComp = v;
    m_AmbLightCompIsSet = true;
}

bool ColorfrontLiveMode::ambLightCompIsSet() const
{
    return m_AmbLightCompIsSet;
}

void ColorfrontLiveMode::unsetAmbLightComp()
{
    m_AmbLightCompIsSet = false;
}

double ColorfrontLiveMode::ambLightCompMin() const {
	return -1.0;
}

double ColorfrontLiveMode::ambLightCompMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getHdrLogLook() const
{
    return m_HdrLogLook;
}

void ColorfrontLiveMode::setHdrLogLook(double value)
{
	double v = value;
	double min = hdrLogLookMin();
	double max = hdrLogLookMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_HdrLogLook = v;
    m_HdrLogLookIsSet = true;
}

bool ColorfrontLiveMode::hdrLogLookIsSet() const
{
    return m_HdrLogLookIsSet;
}

void ColorfrontLiveMode::unsetHdrLogLook()
{
    m_HdrLogLookIsSet = false;
}

double ColorfrontLiveMode::hdrLogLookMin() const {
	return 0.0;
}

double ColorfrontLiveMode::hdrLogLookMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getSdrSoftness() const
{
    return m_SdrSoftness;
}

void ColorfrontLiveMode::setSdrSoftness(double value)
{
	double v = value;
	double min = sdrSoftnessMin();
	double max = sdrSoftnessMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_SdrSoftness = v;
    m_SdrSoftnessIsSet = true;
}

bool ColorfrontLiveMode::sdrSoftnessIsSet() const
{
    return m_SdrSoftnessIsSet;
}

void ColorfrontLiveMode::unsetSdrSoftness()
{
    m_SdrSoftnessIsSet = false;
}

double ColorfrontLiveMode::sdrSoftnessMin() const {
	return 0.0;
}

double ColorfrontLiveMode::sdrSoftnessMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getLiftMaster() const
{
    return m_LiftMaster;
}

void ColorfrontLiveMode::setLiftMaster(double value)
{
	double v = value;
	double min = liftMasterMin();
	double max = liftMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_LiftMaster = v;
    m_LiftMasterIsSet = true;
}

bool ColorfrontLiveMode::liftMasterIsSet() const
{
    return m_LiftMasterIsSet;
}

void ColorfrontLiveMode::unsetLiftMaster()
{
    m_LiftMasterIsSet = false;
}

double ColorfrontLiveMode::liftMasterMin() const {
	return -1.0;
}

double ColorfrontLiveMode::liftMasterMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getLiftRed() const
{
    return m_LiftRed;
}

void ColorfrontLiveMode::setLiftRed(double value)
{
	double v = value;
	double min = liftRedMin();
	double max = liftRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_LiftRed = v;
    m_LiftRedIsSet = true;
}

bool ColorfrontLiveMode::liftRedIsSet() const
{
    return m_LiftRedIsSet;
}

void ColorfrontLiveMode::unsetLiftRed()
{
    m_LiftRedIsSet = false;
}

double ColorfrontLiveMode::liftRedMin() const {
	return -1.0;
}

double ColorfrontLiveMode::liftRedMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getLiftGreen() const
{
    return m_LiftGreen;
}

void ColorfrontLiveMode::setLiftGreen(double value)
{
	double v = value;
	double min = liftGreenMin();
	double max = liftGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_LiftGreen = v;
    m_LiftGreenIsSet = true;
}

bool ColorfrontLiveMode::liftGreenIsSet() const
{
    return m_LiftGreenIsSet;
}

void ColorfrontLiveMode::unsetLiftGreen()
{
    m_LiftGreenIsSet = false;
}

double ColorfrontLiveMode::liftGreenMin() const {
	return -1.0;
}

double ColorfrontLiveMode::liftGreenMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getLiftBlue() const
{
    return m_LiftBlue;
}

void ColorfrontLiveMode::setLiftBlue(double value)
{
	double v = value;
	double min = liftBlueMin();
	double max = liftBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_LiftBlue = v;
    m_LiftBlueIsSet = true;
}

bool ColorfrontLiveMode::liftBlueIsSet() const
{
    return m_LiftBlueIsSet;
}

void ColorfrontLiveMode::unsetLiftBlue()
{
    m_LiftBlueIsSet = false;
}

double ColorfrontLiveMode::liftBlueMin() const {
	return -1.0;
}

double ColorfrontLiveMode::liftBlueMax() const {
	return 1.0;
}

double ColorfrontLiveMode::getGammaMaster() const
{
    return m_GammaMaster;
}

void ColorfrontLiveMode::setGammaMaster(double value)
{
	double v = value;
	double min = gammaMasterMin();
	double max = gammaMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaMaster = v;
    m_GammaMasterIsSet = true;
}

bool ColorfrontLiveMode::gammaMasterIsSet() const
{
    return m_GammaMasterIsSet;
}

void ColorfrontLiveMode::unsetGammaMaster()
{
    m_GammaMasterIsSet = false;
}

double ColorfrontLiveMode::gammaMasterMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gammaMasterMax() const {
	return 2.0;
}

double ColorfrontLiveMode::getGammaRed() const
{
    return m_GammaRed;
}

void ColorfrontLiveMode::setGammaRed(double value)
{
	double v = value;
	double min = gammaRedMin();
	double max = gammaRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaRed = v;
    m_GammaRedIsSet = true;
}

bool ColorfrontLiveMode::gammaRedIsSet() const
{
    return m_GammaRedIsSet;
}

void ColorfrontLiveMode::unsetGammaRed()
{
    m_GammaRedIsSet = false;
}

double ColorfrontLiveMode::gammaRedMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gammaRedMax() const {
	return 2.0;
}

double ColorfrontLiveMode::getGammaGreen() const
{
    return m_GammaGreen;
}

void ColorfrontLiveMode::setGammaGreen(double value)
{
	double v = value;
	double min = gammaGreenMin();
	double max = gammaGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaGreen = v;
    m_GammaGreenIsSet = true;
}

bool ColorfrontLiveMode::gammaGreenIsSet() const
{
    return m_GammaGreenIsSet;
}

void ColorfrontLiveMode::unsetGammaGreen()
{
    m_GammaGreenIsSet = false;
}

double ColorfrontLiveMode::gammaGreenMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gammaGreenMax() const {
	return 2.0;
}

double ColorfrontLiveMode::getGammaBlue() const
{
    return m_GammaBlue;
}

void ColorfrontLiveMode::setGammaBlue(double value)
{
	double v = value;
	double min = gammaBlueMin();
	double max = gammaBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GammaBlue = v;
    m_GammaBlueIsSet = true;
}

bool ColorfrontLiveMode::gammaBlueIsSet() const
{
    return m_GammaBlueIsSet;
}

void ColorfrontLiveMode::unsetGammaBlue()
{
    m_GammaBlueIsSet = false;
}

double ColorfrontLiveMode::gammaBlueMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gammaBlueMax() const {
	return 2.0;
}

double ColorfrontLiveMode::getGainMaster() const
{
    return m_GainMaster;
}

void ColorfrontLiveMode::setGainMaster(double value)
{
	double v = value;
	double min = gainMasterMin();
	double max = gainMasterMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainMaster = v;
    m_GainMasterIsSet = true;
}

bool ColorfrontLiveMode::gainMasterIsSet() const
{
    return m_GainMasterIsSet;
}

void ColorfrontLiveMode::unsetGainMaster()
{
    m_GainMasterIsSet = false;
}

double ColorfrontLiveMode::gainMasterMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gainMasterMax() const {
	return 5.0;
}

double ColorfrontLiveMode::getGainRed() const
{
    return m_GainRed;
}

void ColorfrontLiveMode::setGainRed(double value)
{
	double v = value;
	double min = gainRedMin();
	double max = gainRedMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainRed = v;
    m_GainRedIsSet = true;
}

bool ColorfrontLiveMode::gainRedIsSet() const
{
    return m_GainRedIsSet;
}

void ColorfrontLiveMode::unsetGainRed()
{
    m_GainRedIsSet = false;
}

double ColorfrontLiveMode::gainRedMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gainRedMax() const {
	return 5.0;
}

double ColorfrontLiveMode::getGainGreen() const
{
    return m_GainGreen;
}

void ColorfrontLiveMode::setGainGreen(double value)
{
	double v = value;
	double min = gainGreenMin();
	double max = gainGreenMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainGreen = v;
    m_GainGreenIsSet = true;
}

bool ColorfrontLiveMode::gainGreenIsSet() const
{
    return m_GainGreenIsSet;
}

void ColorfrontLiveMode::unsetGainGreen()
{
    m_GainGreenIsSet = false;
}

double ColorfrontLiveMode::gainGreenMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gainGreenMax() const {
	return 5.0;
}

double ColorfrontLiveMode::getGainBlue() const
{
    return m_GainBlue;
}

void ColorfrontLiveMode::setGainBlue(double value)
{
	double v = value;
	double min = gainBlueMin();
	double max = gainBlueMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_GainBlue = v;
    m_GainBlueIsSet = true;
}

bool ColorfrontLiveMode::gainBlueIsSet() const
{
    return m_GainBlueIsSet;
}

void ColorfrontLiveMode::unsetGainBlue()
{
    m_GainBlueIsSet = false;
}

double ColorfrontLiveMode::gainBlueMin() const {
	return 0.0;
}

double ColorfrontLiveMode::gainBlueMax() const {
	return 5.0;
}

double ColorfrontLiveMode::getSaturation() const
{
    return m_Saturation;
}

void ColorfrontLiveMode::setSaturation(double value)
{
	double v = value;
	double min = saturationMin();
	double max = saturationMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_Saturation = v;
    m_SaturationIsSet = true;
}

bool ColorfrontLiveMode::saturationIsSet() const
{
    return m_SaturationIsSet;
}

void ColorfrontLiveMode::unsetSaturation()
{
    m_SaturationIsSet = false;
}

double ColorfrontLiveMode::saturationMin() const {
	return 0.0;
}

double ColorfrontLiveMode::saturationMax() const {
	return 2.0;
}

double ColorfrontLiveMode::getExposure() const
{
    return m_Exposure;
}

void ColorfrontLiveMode::setExposure(double value)
{
	double v = value;
	double min = exposureMin();
	double max = exposureMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_Exposure = v;
    m_ExposureIsSet = true;
}

bool ColorfrontLiveMode::exposureIsSet() const
{
    return m_ExposureIsSet;
}

void ColorfrontLiveMode::unsetExposure()
{
    m_ExposureIsSet = false;
}

double ColorfrontLiveMode::exposureMin() const {
	return -4.0;
}

double ColorfrontLiveMode::exposureMax() const {
	return 4.0;
}

double ColorfrontLiveMode::getColorTemp() const
{
    return m_ColorTemp;
}

void ColorfrontLiveMode::setColorTemp(double value)
{
	double v = value;
	double min = colorTempMin();
	double max = colorTempMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_ColorTemp = v;
    m_ColorTempIsSet = true;
}

bool ColorfrontLiveMode::colorTempIsSet() const
{
    return m_ColorTempIsSet;
}

void ColorfrontLiveMode::unsetColorTemp()
{
    m_ColorTempIsSet = false;
}

double ColorfrontLiveMode::colorTempMin() const {
	return -10.0;
}

double ColorfrontLiveMode::colorTempMax() const {
	return 10.0;
}

double ColorfrontLiveMode::getTint() const
{
    return m_Tint;
}

void ColorfrontLiveMode::setTint(double value)
{
	double v = value;
	double min = tintMin();
	double max = tintMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_Tint = v;
    m_TintIsSet = true;
}

bool ColorfrontLiveMode::tintIsSet() const
{
    return m_TintIsSet;
}

void ColorfrontLiveMode::unsetTint()
{
    m_TintIsSet = false;
}

double ColorfrontLiveMode::tintMin() const {
	return -16.0;
}

double ColorfrontLiveMode::tintMax() const {
	return 16.0;
}

double ColorfrontLiveMode::getPqOutputNitLevel() const
{
    return m_PqOutputNitLevel;
}

void ColorfrontLiveMode::setPqOutputNitLevel(double value)
{
	double v = value;
	double min = pqOutputNitLevelMin();
	double max = pqOutputNitLevelMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_PqOutputNitLevel = v;
    m_PqOutputNitLevelIsSet = true;
}

bool ColorfrontLiveMode::pqOutputNitLevelIsSet() const
{
    return m_PqOutputNitLevelIsSet;
}

void ColorfrontLiveMode::unsetPqOutputNitLevel()
{
    m_PqOutputNitLevelIsSet = false;
}

double ColorfrontLiveMode::pqOutputNitLevelMin() const {
	return 48;
}

double ColorfrontLiveMode::pqOutputNitLevelMax() const {
	return 4000;
}

bool ColorfrontLiveMode::isP3ColorspaceClamp() const
{
    return m_P3ColorspaceClamp;
}

void ColorfrontLiveMode::setP3ColorspaceClamp(bool value)
{
	bool v = value;
    m_P3ColorspaceClamp = v;
    m_P3ColorspaceClampIsSet = true;
}

bool ColorfrontLiveMode::p3ColorspaceClampIsSet() const
{
    return m_P3ColorspaceClampIsSet;
}

void ColorfrontLiveMode::unsetP3ColorspaceClamp()
{
    m_P3ColorspaceClampIsSet = false;
}


double ColorfrontLiveMode::getBt2408Mode() const
{
    return m_Bt2408Mode;
}

void ColorfrontLiveMode::setBt2408Mode(double value)
{
	double v = value;
	double min = bt2408ModeMin();
	double max = bt2408ModeMax();
	if (v < min) { v = min; }
	if (v > max) { v = max; }
    m_Bt2408Mode = v;
    m_Bt2408ModeIsSet = true;
}

bool ColorfrontLiveMode::bt2408ModeIsSet() const
{
    return m_Bt2408ModeIsSet;
}

void ColorfrontLiveMode::unsetBt2408Mode()
{
    m_Bt2408ModeIsSet = false;
}

double ColorfrontLiveMode::bt2408ModeMin() const {
	return 0.0;
}

double ColorfrontLiveMode::bt2408ModeMax() const {
	return 1.0;
}

}
}
}
}


