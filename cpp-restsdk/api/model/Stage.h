/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * Stage.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Stage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Stage_H_


#include "ModelBase.h"

#include "model/ProcAmp.h"
#include "model/ColorCorrector.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Stage
    : public ModelBase
{
public:
    Stage();
    virtual ~Stage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Stage members

    /// <summary>
    /// true if stage is enabled else disabled (unity passthru)
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);


    /// <summary>
    /// true if stage can be dynamically adjusted
    /// </summary>
    bool isDynamic() const;
    bool dynamicIsSet() const;
    void unsetDynamic();

    void setDynamic(bool value);


    /// <summary>
    /// library entry number, zero is unity bypass
    /// </summary>
    int32_t getLibraryEntry() const;
    bool libraryEntryIsSet() const;
    void unsetLibraryEntry();

    void setLibraryEntry(int32_t value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorCorrector> getColorCorrector() const;
    bool colorCorrectorIsSet() const;
    void unsetColorCorrector();

    void setColorCorrector(const std::shared_ptr<ColorCorrector>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProcAmp> getProcAmp() const;
    bool procAmpIsSet() const;
    void unsetProcAmp();

    void setProcAmp(const std::shared_ptr<ProcAmp>& value);



protected:
    bool m_Enabled;
    bool m_EnabledIsSet;
    bool m_Dynamic;
    bool m_DynamicIsSet;
    int32_t m_LibraryEntry;
    bool m_LibraryEntryIsSet;
    std::shared_ptr<ColorCorrector> m_ColorCorrector;
    bool m_ColorCorrectorIsSet;
    std::shared_ptr<ProcAmp> m_ProcAmp;
    bool m_ProcAmpIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Stage_H_ */
