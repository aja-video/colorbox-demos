/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "NetStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NetStatus::NetStatus()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Mac = utility::conversions::to_string_t("");
    m_MacIsSet = false;
    m_Connected = false;
    m_ConnectedIsSet = false;
    m_DhcpStateIsSet = false;
    m_InterfaceSetupStateIsSet = false;
    m_IpAddressOffered = utility::conversions::to_string_t("");
    m_IpAddressOfferedIsSet = false;
    m_LinkErrors = 0;
    m_LinkErrorsIsSet = false;
    m_LinkState = utility::conversions::to_string_t("");
    m_LinkStateIsSet = false;
    m_LldpChassisId = utility::conversions::to_string_t("");
    m_LldpChassisIdIsSet = false;
    m_LldpPortId = utility::conversions::to_string_t("");
    m_LldpPortIdIsSet = false;
    m_LldpName = utility::conversions::to_string_t("");
    m_LldpNameIsSet = false;
}

NetStatus::~NetStatus()
{
}

void NetStatus::validate()
{
    // TODO: implement validation
}

bool NetStatus::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (nameIsSet())
	{
		bool nameChanged = false;
		utility::string_t v = getName();
		if (nameChanged) { setName(v); anyMinMaxValueChanged = true; }
	}
	if (macIsSet())
	{
		bool macChanged = false;
		utility::string_t v = getMac();
		if (macChanged) { setMac(v); anyMinMaxValueChanged = true; }
	}
	if (ipAddressOfferedIsSet())
	{
		bool ipAddressOfferedChanged = false;
		utility::string_t v = getIpAddressOffered();
		if (ipAddressOfferedChanged) { setIpAddressOffered(v); anyMinMaxValueChanged = true; }
	}
	if (linkErrorsIsSet())
	{
		bool linkErrorsChanged = false;
		int32_t v = getLinkErrors();
		if (linkErrorsChanged) { setLinkErrors(v); anyMinMaxValueChanged = true; }
	}
	if (linkStateIsSet())
	{
		bool linkStateChanged = false;
		utility::string_t v = getLinkState();
		if (linkStateChanged) { setLinkState(v); anyMinMaxValueChanged = true; }
	}
	if (lldpChassisIdIsSet())
	{
		bool lldpChassisIdChanged = false;
		utility::string_t v = getLldpChassisId();
		if (lldpChassisIdChanged) { setLldpChassisId(v); anyMinMaxValueChanged = true; }
	}
	if (lldpPortIdIsSet())
	{
		bool lldpPortIdChanged = false;
		utility::string_t v = getLldpPortId();
		if (lldpPortIdChanged) { setLldpPortId(v); anyMinMaxValueChanged = true; }
	}
	if (lldpNameIsSet())
	{
		bool lldpNameChanged = false;
		utility::string_t v = getLldpName();
		if (lldpNameChanged) { setLldpName(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value NetStatus::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_MacIsSet)
    {
        val[utility::conversions::to_string_t(U("mac"))] = ModelBase::toJson(m_Mac);
    }
    if(m_ConnectedIsSet)
    {
        val[utility::conversions::to_string_t(U("connected"))] = ModelBase::toJson(m_Connected);
    }
    if(m_DhcpStateIsSet)
    {
        val[utility::conversions::to_string_t(U("dhcpState"))] = ModelBase::toJson(m_DhcpState);
    }
    if(m_InterfaceSetupStateIsSet)
    {
        val[utility::conversions::to_string_t(U("interfaceSetupState"))] = ModelBase::toJson(m_InterfaceSetupState);
    }
    if(m_IpAddressOfferedIsSet)
    {
        val[utility::conversions::to_string_t(U("ipAddressOffered"))] = ModelBase::toJson(m_IpAddressOffered);
    }
    if(m_LinkErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("linkErrors"))] = ModelBase::toJson(m_LinkErrors);
    }
    if(m_LinkStateIsSet)
    {
        val[utility::conversions::to_string_t(U("linkState"))] = ModelBase::toJson(m_LinkState);
    }
    if(m_LldpChassisIdIsSet)
    {
        val[utility::conversions::to_string_t(U("lldpChassisId"))] = ModelBase::toJson(m_LldpChassisId);
    }
    if(m_LldpPortIdIsSet)
    {
        val[utility::conversions::to_string_t(U("lldpPortId"))] = ModelBase::toJson(m_LldpPortId);
    }
    if(m_LldpNameIsSet)
    {
        val[utility::conversions::to_string_t(U("lldpName"))] = ModelBase::toJson(m_LldpName);
    }

    return val;
}

bool NetStatus::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mac;
            ok &= ModelBase::fromJson(fieldValue, refVal_mac);
            setMac(refVal_mac);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connected"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connected")));
        if(!fieldValue.is_null())
        {
            bool refVal_connected;
            ok &= ModelBase::fromJson(fieldValue, refVal_connected);
            setConnected(refVal_connected);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dhcpState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dhcpState")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DHCPState> refVal_dhcpState;
            ok &= ModelBase::fromJson(fieldValue, refVal_dhcpState);
            setDhcpState(refVal_dhcpState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("interfaceSetupState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("interfaceSetupState")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<InterfaceSetupState> refVal_interfaceSetupState;
            ok &= ModelBase::fromJson(fieldValue, refVal_interfaceSetupState);
            setInterfaceSetupState(refVal_interfaceSetupState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ipAddressOffered"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ipAddressOffered")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ipAddressOffered;
            ok &= ModelBase::fromJson(fieldValue, refVal_ipAddressOffered);
            setIpAddressOffered(refVal_ipAddressOffered);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("linkErrors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("linkErrors")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_linkErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkErrors);
            setLinkErrors(refVal_linkErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("linkState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("linkState")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkState;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkState);
            setLinkState(refVal_linkState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lldpChassisId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lldpChassisId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lldpChassisId;
            ok &= ModelBase::fromJson(fieldValue, refVal_lldpChassisId);
            setLldpChassisId(refVal_lldpChassisId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lldpPortId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lldpPortId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lldpPortId;
            ok &= ModelBase::fromJson(fieldValue, refVal_lldpPortId);
            setLldpPortId(refVal_lldpPortId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lldpName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lldpName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lldpName;
            ok &= ModelBase::fromJson(fieldValue, refVal_lldpName);
            setLldpName(refVal_lldpName);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void NetStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_MacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mac")), m_Mac));
    }
    if(m_ConnectedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connected")), m_Connected));
    }
    if(m_DhcpStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dhcpState")), m_DhcpState));
    }
    if(m_InterfaceSetupStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("interfaceSetupState")), m_InterfaceSetupState));
    }
    if(m_IpAddressOfferedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ipAddressOffered")), m_IpAddressOffered));
    }
    if(m_LinkErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("linkErrors")), m_LinkErrors));
    }
    if(m_LinkStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("linkState")), m_LinkState));
    }
    if(m_LldpChassisIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lldpChassisId")), m_LldpChassisId));
    }
    if(m_LldpPortIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lldpPortId")), m_LldpPortId));
    }
    if(m_LldpNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lldpName")), m_LldpName));
    }
}

bool NetStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mac"))))
    {
        utility::string_t refVal_mac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mac"))), refVal_mac );
        setMac(refVal_mac);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connected"))))
    {
        bool refVal_connected;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connected"))), refVal_connected );
        setConnected(refVal_connected);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dhcpState"))))
    {
        std::shared_ptr<DHCPState> refVal_dhcpState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dhcpState"))), refVal_dhcpState );
        setDhcpState(refVal_dhcpState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("interfaceSetupState"))))
    {
        std::shared_ptr<InterfaceSetupState> refVal_interfaceSetupState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("interfaceSetupState"))), refVal_interfaceSetupState );
        setInterfaceSetupState(refVal_interfaceSetupState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ipAddressOffered"))))
    {
        utility::string_t refVal_ipAddressOffered;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ipAddressOffered"))), refVal_ipAddressOffered );
        setIpAddressOffered(refVal_ipAddressOffered);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("linkErrors"))))
    {
        int32_t refVal_linkErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("linkErrors"))), refVal_linkErrors );
        setLinkErrors(refVal_linkErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("linkState"))))
    {
        utility::string_t refVal_linkState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("linkState"))), refVal_linkState );
        setLinkState(refVal_linkState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lldpChassisId"))))
    {
        utility::string_t refVal_lldpChassisId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lldpChassisId"))), refVal_lldpChassisId );
        setLldpChassisId(refVal_lldpChassisId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lldpPortId"))))
    {
        utility::string_t refVal_lldpPortId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lldpPortId"))), refVal_lldpPortId );
        setLldpPortId(refVal_lldpPortId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lldpName"))))
    {
        utility::string_t refVal_lldpName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lldpName"))), refVal_lldpName );
        setLldpName(refVal_lldpName);
    }
    
    applyMinMaxConstraints();
    return ok;
}

utility::string_t NetStatus::getName() const
{
    return m_Name;
}

void NetStatus::setName(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Name = v;
    m_NameIsSet = true;
}

bool NetStatus::nameIsSet() const
{
    return m_NameIsSet;
}

void NetStatus::unsetName()
{
    m_NameIsSet = false;
}



utility::string_t NetStatus::getMac() const
{
    return m_Mac;
}

void NetStatus::setMac(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Mac = v;
    m_MacIsSet = true;
}

bool NetStatus::macIsSet() const
{
    return m_MacIsSet;
}

void NetStatus::unsetMac()
{
    m_MacIsSet = false;
}



bool NetStatus::isConnected() const
{
    return m_Connected;
}

void NetStatus::setConnected(bool value)
{
	bool v = value;
    m_Connected = v;
    m_ConnectedIsSet = true;
}

bool NetStatus::connectedIsSet() const
{
    return m_ConnectedIsSet;
}

void NetStatus::unsetConnected()
{
    m_ConnectedIsSet = false;
}


std::shared_ptr<DHCPState> NetStatus::getDhcpState() const
{
    return m_DhcpState;
}

void NetStatus::setDhcpState(const std::shared_ptr<DHCPState>& value)
{
	std::shared_ptr<DHCPState> v = value;
    m_DhcpState = v;
    m_DhcpStateIsSet = true;
}

bool NetStatus::dhcpStateIsSet() const
{
    return m_DhcpStateIsSet;
}

void NetStatus::unsetDhcpState()
{
    m_DhcpStateIsSet = false;
}


std::shared_ptr<InterfaceSetupState> NetStatus::getInterfaceSetupState() const
{
    return m_InterfaceSetupState;
}

void NetStatus::setInterfaceSetupState(const std::shared_ptr<InterfaceSetupState>& value)
{
	std::shared_ptr<InterfaceSetupState> v = value;
    m_InterfaceSetupState = v;
    m_InterfaceSetupStateIsSet = true;
}

bool NetStatus::interfaceSetupStateIsSet() const
{
    return m_InterfaceSetupStateIsSet;
}

void NetStatus::unsetInterfaceSetupState()
{
    m_InterfaceSetupStateIsSet = false;
}


utility::string_t NetStatus::getIpAddressOffered() const
{
    return m_IpAddressOffered;
}

void NetStatus::setIpAddressOffered(const utility::string_t& value)
{
	utility::string_t v = value;
    m_IpAddressOffered = v;
    m_IpAddressOfferedIsSet = true;
}

bool NetStatus::ipAddressOfferedIsSet() const
{
    return m_IpAddressOfferedIsSet;
}

void NetStatus::unsetIpAddressOffered()
{
    m_IpAddressOfferedIsSet = false;
}



int32_t NetStatus::getLinkErrors() const
{
    return m_LinkErrors;
}

void NetStatus::setLinkErrors(int32_t value)
{
	int32_t v = value;
    m_LinkErrors = v;
    m_LinkErrorsIsSet = true;
}

bool NetStatus::linkErrorsIsSet() const
{
    return m_LinkErrorsIsSet;
}

void NetStatus::unsetLinkErrors()
{
    m_LinkErrorsIsSet = false;
}



utility::string_t NetStatus::getLinkState() const
{
    return m_LinkState;
}

void NetStatus::setLinkState(const utility::string_t& value)
{
	utility::string_t v = value;
    m_LinkState = v;
    m_LinkStateIsSet = true;
}

bool NetStatus::linkStateIsSet() const
{
    return m_LinkStateIsSet;
}

void NetStatus::unsetLinkState()
{
    m_LinkStateIsSet = false;
}



utility::string_t NetStatus::getLldpChassisId() const
{
    return m_LldpChassisId;
}

void NetStatus::setLldpChassisId(const utility::string_t& value)
{
	utility::string_t v = value;
    m_LldpChassisId = v;
    m_LldpChassisIdIsSet = true;
}

bool NetStatus::lldpChassisIdIsSet() const
{
    return m_LldpChassisIdIsSet;
}

void NetStatus::unsetLldpChassisId()
{
    m_LldpChassisIdIsSet = false;
}



utility::string_t NetStatus::getLldpPortId() const
{
    return m_LldpPortId;
}

void NetStatus::setLldpPortId(const utility::string_t& value)
{
	utility::string_t v = value;
    m_LldpPortId = v;
    m_LldpPortIdIsSet = true;
}

bool NetStatus::lldpPortIdIsSet() const
{
    return m_LldpPortIdIsSet;
}

void NetStatus::unsetLldpPortId()
{
    m_LldpPortIdIsSet = false;
}



utility::string_t NetStatus::getLldpName() const
{
    return m_LldpName;
}

void NetStatus::setLldpName(const utility::string_t& value)
{
	utility::string_t v = value;
    m_LldpName = v;
    m_LldpNameIsSet = true;
}

bool NetStatus::lldpNameIsSet() const
{
    return m_LldpNameIsSet;
}

void NetStatus::unsetLldpName()
{
    m_LldpNameIsSet = false;
}



}
}
}
}


