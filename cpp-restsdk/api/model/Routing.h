/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * Routing.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Routing_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Routing_H_


#include "ModelBase.h"

#include "model/PreviewTap.h"
#include "model/Mode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Routing
    : public ModelBase
{
public:
    Routing();
    virtual ~Routing();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Routing members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Mode> getMode() const;
    bool modeIsSet() const;
    void unsetMode();

    void setMode(const std::shared_ptr<Mode>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PreviewTap> getPreviewTap() const;
    bool previewTapIsSet() const;
    void unsetPreviewTap();

    void setPreviewTap(const std::shared_ptr<PreviewTap>& value);


    /// <summary>
    /// This is the bypass state due to the button on the device being pressed
    /// </summary>
    bool isPipelineBypassButton() const;
    bool pipelineBypassButtonIsSet() const;
    void unsetPipelineBypassButton();

    void setPipelineBypassButton(bool value);


    /// <summary>
    /// This is the bypass state set by the user in the UI
    /// </summary>
    bool isPipelineBypassUser() const;
    bool pipelineBypassUserIsSet() const;
    void unsetPipelineBypassUser();

    void setPipelineBypassUser(bool value);



protected:
    std::shared_ptr<Mode> m_Mode;
    bool m_ModeIsSet;
    std::shared_ptr<PreviewTap> m_PreviewTap;
    bool m_PreviewTapIsSet;
    bool m_PipelineBypassButton;
    bool m_PipelineBypassButtonIsSet;
    bool m_PipelineBypassUser;
    bool m_PipelineBypassUserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Routing_H_ */
