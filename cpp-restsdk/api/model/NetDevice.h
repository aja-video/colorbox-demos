/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * NetDevice.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_NetDevice_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_NetDevice_H_


#include "ModelBase.h"

#include "model/NetStatus.h"
#include "model/NetParams.h"
#include "model/NetConfig.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  NetDevice
    : public ModelBase
{
public:
    NetDevice();
    virtual ~NetDevice();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NetDevice members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetConfig> getConfig() const;
    bool configIsSet() const;
    void unsetConfig();

    void setConfig(const std::shared_ptr<NetConfig>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<NetStatus>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetParams> getActiveParams() const;
    bool activeParamsIsSet() const;
    void unsetActiveParams();

    void setActiveParams(const std::shared_ptr<NetParams>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetParams> getStagedParams() const;
    bool stagedParamsIsSet() const;
    void unsetStagedParams();

    void setStagedParams(const std::shared_ptr<NetParams>& value);



protected:
    std::shared_ptr<NetConfig> m_Config;
    bool m_ConfigIsSet;
    std::shared_ptr<NetStatus> m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<NetParams> m_ActiveParams;
    bool m_ActiveParamsIsSet;
    std::shared_ptr<NetParams> m_StagedParams;
    bool m_StagedParamsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_NetDevice_H_ */
