/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "ColorfrontConfig.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ColorfrontConfig::ColorfrontConfig()
{
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_InDynRangeGamutIsSet = false;
    m_OutDynRangeGamutIsSet = false;
    m_ModeIsSet = false;
    m_TvModeIsSet = false;
    m_LiveModeIsSet = false;
}

ColorfrontConfig::~ColorfrontConfig()
{
}

void ColorfrontConfig::validate()
{
    // TODO: implement validation
}

bool ColorfrontConfig::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value ColorfrontConfig::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }
    if(m_InDynRangeGamutIsSet)
    {
        val[utility::conversions::to_string_t(U("inDynRangeGamut"))] = ModelBase::toJson(m_InDynRangeGamut);
    }
    if(m_OutDynRangeGamutIsSet)
    {
        val[utility::conversions::to_string_t(U("outDynRangeGamut"))] = ModelBase::toJson(m_OutDynRangeGamut);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mode"))] = ModelBase::toJson(m_Mode);
    }
    if(m_TvModeIsSet)
    {
        val[utility::conversions::to_string_t(U("tvMode"))] = ModelBase::toJson(m_TvMode);
    }
    if(m_LiveModeIsSet)
    {
        val[utility::conversions::to_string_t(U("liveMode"))] = ModelBase::toJson(m_LiveMode);
    }

    return val;
}

bool ColorfrontConfig::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inDynRangeGamut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inDynRangeGamut")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontDynRangeGamut> refVal_inDynRangeGamut;
            ok &= ModelBase::fromJson(fieldValue, refVal_inDynRangeGamut);
            setInDynRangeGamut(refVal_inDynRangeGamut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outDynRangeGamut"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outDynRangeGamut")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontDynRangeGamut> refVal_outDynRangeGamut;
            ok &= ModelBase::fromJson(fieldValue, refVal_outDynRangeGamut);
            setOutDynRangeGamut(refVal_outDynRangeGamut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontMode> refVal_mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode);
            setMode(refVal_mode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tvMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tvMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontTvMode> refVal_tvMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_tvMode);
            setTvMode(refVal_tvMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liveMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liveMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ColorfrontLiveMode> refVal_liveMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_liveMode);
            setLiveMode(refVal_liveMode);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void ColorfrontConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
    if(m_InDynRangeGamutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inDynRangeGamut")), m_InDynRangeGamut));
    }
    if(m_OutDynRangeGamutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outDynRangeGamut")), m_OutDynRangeGamut));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
    }
    if(m_TvModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tvMode")), m_TvMode));
    }
    if(m_LiveModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liveMode")), m_LiveMode));
    }
}

bool ColorfrontConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inDynRangeGamut"))))
    {
        std::shared_ptr<ColorfrontDynRangeGamut> refVal_inDynRangeGamut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inDynRangeGamut"))), refVal_inDynRangeGamut );
        setInDynRangeGamut(refVal_inDynRangeGamut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outDynRangeGamut"))))
    {
        std::shared_ptr<ColorfrontDynRangeGamut> refVal_outDynRangeGamut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outDynRangeGamut"))), refVal_outDynRangeGamut );
        setOutDynRangeGamut(refVal_outDynRangeGamut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mode"))))
    {
        std::shared_ptr<ColorfrontMode> refVal_mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mode"))), refVal_mode );
        setMode(refVal_mode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tvMode"))))
    {
        std::shared_ptr<ColorfrontTvMode> refVal_tvMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tvMode"))), refVal_tvMode );
        setTvMode(refVal_tvMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liveMode"))))
    {
        std::shared_ptr<ColorfrontLiveMode> refVal_liveMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liveMode"))), refVal_liveMode );
        setLiveMode(refVal_liveMode);
    }
    
    applyMinMaxConstraints();
    return ok;
}

bool ColorfrontConfig::isEnabled() const
{
    return m_Enabled;
}

void ColorfrontConfig::setEnabled(bool value)
{
	bool v = value;
    m_Enabled = v;
    m_EnabledIsSet = true;
}

bool ColorfrontConfig::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ColorfrontConfig::unsetEnabled()
{
    m_EnabledIsSet = false;
}


std::shared_ptr<ColorfrontDynRangeGamut> ColorfrontConfig::getInDynRangeGamut() const
{
    return m_InDynRangeGamut;
}

void ColorfrontConfig::setInDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamut>& value)
{
	std::shared_ptr<ColorfrontDynRangeGamut> v = value;
    m_InDynRangeGamut = v;
    m_InDynRangeGamutIsSet = true;
}

bool ColorfrontConfig::inDynRangeGamutIsSet() const
{
    return m_InDynRangeGamutIsSet;
}

void ColorfrontConfig::unsetInDynRangeGamut()
{
    m_InDynRangeGamutIsSet = false;
}


std::shared_ptr<ColorfrontDynRangeGamut> ColorfrontConfig::getOutDynRangeGamut() const
{
    return m_OutDynRangeGamut;
}

void ColorfrontConfig::setOutDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamut>& value)
{
	std::shared_ptr<ColorfrontDynRangeGamut> v = value;
    m_OutDynRangeGamut = v;
    m_OutDynRangeGamutIsSet = true;
}

bool ColorfrontConfig::outDynRangeGamutIsSet() const
{
    return m_OutDynRangeGamutIsSet;
}

void ColorfrontConfig::unsetOutDynRangeGamut()
{
    m_OutDynRangeGamutIsSet = false;
}


std::shared_ptr<ColorfrontMode> ColorfrontConfig::getMode() const
{
    return m_Mode;
}

void ColorfrontConfig::setMode(const std::shared_ptr<ColorfrontMode>& value)
{
	std::shared_ptr<ColorfrontMode> v = value;
    m_Mode = v;
    m_ModeIsSet = true;
}

bool ColorfrontConfig::modeIsSet() const
{
    return m_ModeIsSet;
}

void ColorfrontConfig::unsetMode()
{
    m_ModeIsSet = false;
}


std::shared_ptr<ColorfrontTvMode> ColorfrontConfig::getTvMode() const
{
    return m_TvMode;
}

void ColorfrontConfig::setTvMode(const std::shared_ptr<ColorfrontTvMode>& value)
{
	std::shared_ptr<ColorfrontTvMode> v = value;
    m_TvMode = v;
    m_TvModeIsSet = true;
}

bool ColorfrontConfig::tvModeIsSet() const
{
    return m_TvModeIsSet;
}

void ColorfrontConfig::unsetTvMode()
{
    m_TvModeIsSet = false;
}


std::shared_ptr<ColorfrontLiveMode> ColorfrontConfig::getLiveMode() const
{
    return m_LiveMode;
}

void ColorfrontConfig::setLiveMode(const std::shared_ptr<ColorfrontLiveMode>& value)
{
	std::shared_ptr<ColorfrontLiveMode> v = value;
    m_LiveMode = v;
    m_LiveModeIsSet = true;
}

bool ColorfrontConfig::liveModeIsSet() const
{
    return m_LiveModeIsSet;
}

void ColorfrontConfig::unsetLiveMode()
{
    m_LiveModeIsSet = false;
}


}
}
}
}


