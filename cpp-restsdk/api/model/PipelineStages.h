/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * PipelineStages.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineStages_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineStages_H_


#include "ModelBase.h"

#include "model/CSCFilter.h"
#include "model/Colorimetry.h"
#include "model/Stage.h"
#include "model/PipelineRange.h"
#include "model/Transfer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PipelineStages
    : public ModelBase
{
public:
    PipelineStages();
    virtual ~PipelineStages();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PipelineStages members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getLut1d1() const;
    bool lut1d1IsSet() const;
    void unsetLut1d_1();

    void setLut1d1(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getM3x32() const;
    bool m3x32IsSet() const;
    void unsetM3x3_2();

    void setM3x32(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getLut1d2() const;
    bool lut1d2IsSet() const;
    void unsetLut1d_2();

    void setLut1d2(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getLut3d1() const;
    bool lut3d1IsSet() const;
    void unsetLut3d_1();

    void setLut3d1(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getLut1d3() const;
    bool lut1d3IsSet() const;
    void unsetLut1d_3();

    void setLut1d3(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getM3x33() const;
    bool m3x33IsSet() const;
    void unsetM3x3_3();

    void setM3x33(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Stage> getLut1d4() const;
    bool lut1d4IsSet() const;
    void unsetLut1d_4();

    void setLut1d4(const std::shared_ptr<Stage>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Colorimetry> getInColorimetry() const;
    bool inColorimetryIsSet() const;
    void unsetInColorimetry();

    void setInColorimetry(const std::shared_ptr<Colorimetry>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineRange> getInRange() const;
    bool inRangeIsSet() const;
    void unsetInRange();

    void setInRange(const std::shared_ptr<PipelineRange>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Colorimetry> getOutColorimetry() const;
    bool outColorimetryIsSet() const;
    void unsetOutColorimetry();

    void setOutColorimetry(const std::shared_ptr<Colorimetry>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineRange> getOutRange() const;
    bool outRangeIsSet() const;
    void unsetOutRange();

    void setOutRange(const std::shared_ptr<PipelineRange>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Transfer> getTransferCharacteristic() const;
    bool transferCharacteristicIsSet() const;
    void unsetTransferCharacteristic();

    void setTransferCharacteristic(const std::shared_ptr<Transfer>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CSCFilter> getCscFilter() const;
    bool cscFilterIsSet() const;
    void unsetCscFilter();

    void setCscFilter(const std::shared_ptr<CSCFilter>& value);



protected:
    std::shared_ptr<Stage> m_Lut1d_1;
    bool m_Lut1d_1IsSet;
    std::shared_ptr<Stage> m_M3x3_2;
    bool m_M3x3_2IsSet;
    std::shared_ptr<Stage> m_Lut1d_2;
    bool m_Lut1d_2IsSet;
    std::shared_ptr<Stage> m_Lut3d_1;
    bool m_Lut3d_1IsSet;
    std::shared_ptr<Stage> m_Lut1d_3;
    bool m_Lut1d_3IsSet;
    std::shared_ptr<Stage> m_M3x3_3;
    bool m_M3x3_3IsSet;
    std::shared_ptr<Stage> m_Lut1d_4;
    bool m_Lut1d_4IsSet;
    std::shared_ptr<Colorimetry> m_InColorimetry;
    bool m_InColorimetryIsSet;
    std::shared_ptr<PipelineRange> m_InRange;
    bool m_InRangeIsSet;
    std::shared_ptr<Colorimetry> m_OutColorimetry;
    bool m_OutColorimetryIsSet;
    std::shared_ptr<PipelineRange> m_OutRange;
    bool m_OutRangeIsSet;
    std::shared_ptr<Transfer> m_TransferCharacteristic;
    bool m_TransferCharacteristicIsSet;
    std::shared_ptr<CSCFilter> m_CscFilter;
    bool m_CscFilterIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineStages_H_ */
