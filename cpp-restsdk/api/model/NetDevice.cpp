/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "NetDevice.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NetDevice::NetDevice()
{
    m_ConfigIsSet = false;
    m_StatusIsSet = false;
    m_ActiveParamsIsSet = false;
    m_StagedParamsIsSet = false;
}

NetDevice::~NetDevice()
{
}

void NetDevice::validate()
{
    // TODO: implement validation
}

bool NetDevice::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value NetDevice::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConfigIsSet)
    {
        val[utility::conversions::to_string_t(U("config"))] = ModelBase::toJson(m_Config);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ActiveParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("activeParams"))] = ModelBase::toJson(m_ActiveParams);
    }
    if(m_StagedParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("stagedParams"))] = ModelBase::toJson(m_StagedParams);
    }

    return val;
}

bool NetDevice::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("config"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("config")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetConfig> refVal_config;
            ok &= ModelBase::fromJson(fieldValue, refVal_config);
            setConfig(refVal_config);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetStatus> refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activeParams"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activeParams")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetParams> refVal_activeParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_activeParams);
            setActiveParams(refVal_activeParams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stagedParams"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stagedParams")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetParams> refVal_stagedParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_stagedParams);
            setStagedParams(refVal_stagedParams);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void NetDevice::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConfigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("config")), m_Config));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ActiveParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activeParams")), m_ActiveParams));
    }
    if(m_StagedParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stagedParams")), m_StagedParams));
    }
}

bool NetDevice::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("config"))))
    {
        std::shared_ptr<NetConfig> refVal_config;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("config"))), refVal_config );
        setConfig(refVal_config);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<NetStatus> refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activeParams"))))
    {
        std::shared_ptr<NetParams> refVal_activeParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activeParams"))), refVal_activeParams );
        setActiveParams(refVal_activeParams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stagedParams"))))
    {
        std::shared_ptr<NetParams> refVal_stagedParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stagedParams"))), refVal_stagedParams );
        setStagedParams(refVal_stagedParams);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<NetConfig> NetDevice::getConfig() const
{
    return m_Config;
}

void NetDevice::setConfig(const std::shared_ptr<NetConfig>& value)
{
	std::shared_ptr<NetConfig> v = value;
    m_Config = v;
    m_ConfigIsSet = true;
}

bool NetDevice::configIsSet() const
{
    return m_ConfigIsSet;
}

void NetDevice::unsetConfig()
{
    m_ConfigIsSet = false;
}


std::shared_ptr<NetStatus> NetDevice::getStatus() const
{
    return m_Status;
}

void NetDevice::setStatus(const std::shared_ptr<NetStatus>& value)
{
	std::shared_ptr<NetStatus> v = value;
    m_Status = v;
    m_StatusIsSet = true;
}

bool NetDevice::statusIsSet() const
{
    return m_StatusIsSet;
}

void NetDevice::unsetStatus()
{
    m_StatusIsSet = false;
}


std::shared_ptr<NetParams> NetDevice::getActiveParams() const
{
    return m_ActiveParams;
}

void NetDevice::setActiveParams(const std::shared_ptr<NetParams>& value)
{
	std::shared_ptr<NetParams> v = value;
    m_ActiveParams = v;
    m_ActiveParamsIsSet = true;
}

bool NetDevice::activeParamsIsSet() const
{
    return m_ActiveParamsIsSet;
}

void NetDevice::unsetActiveParams()
{
    m_ActiveParamsIsSet = false;
}


std::shared_ptr<NetParams> NetDevice::getStagedParams() const
{
    return m_StagedParams;
}

void NetDevice::setStagedParams(const std::shared_ptr<NetParams>& value)
{
	std::shared_ptr<NetParams> v = value;
    m_StagedParams = v;
    m_StagedParamsIsSet = true;
}

bool NetDevice::stagedParamsIsSet() const
{
    return m_StagedParamsIsSet;
}

void NetDevice::unsetStagedParams()
{
    m_StagedParamsIsSet = false;
}


}
}
}
}


