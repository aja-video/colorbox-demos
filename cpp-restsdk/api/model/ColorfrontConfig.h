/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * ColorfrontConfig.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontConfig_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontConfig_H_


#include "ModelBase.h"

#include "model/ColorfrontDynRangeGamut.h"
#include "model/ColorfrontMode.h"
#include "model/ColorfrontLiveMode.h"
#include "model/ColorfrontTvMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ColorfrontConfig
    : public ModelBase
{
public:
    ColorfrontConfig();
    virtual ~ColorfrontConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ColorfrontConfig members

    /// <summary>
    /// true if stage is enabled else disabled (unity passthru)
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontDynRangeGamut> getInDynRangeGamut() const;
    bool inDynRangeGamutIsSet() const;
    void unsetInDynRangeGamut();

    void setInDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamut>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontDynRangeGamut> getOutDynRangeGamut() const;
    bool outDynRangeGamutIsSet() const;
    void unsetOutDynRangeGamut();

    void setOutDynRangeGamut(const std::shared_ptr<ColorfrontDynRangeGamut>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontMode> getMode() const;
    bool modeIsSet() const;
    void unsetMode();

    void setMode(const std::shared_ptr<ColorfrontMode>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontTvMode> getTvMode() const;
    bool tvModeIsSet() const;
    void unsetTvMode();

    void setTvMode(const std::shared_ptr<ColorfrontTvMode>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorfrontLiveMode> getLiveMode() const;
    bool liveModeIsSet() const;
    void unsetLiveMode();

    void setLiveMode(const std::shared_ptr<ColorfrontLiveMode>& value);



protected:
    bool m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ColorfrontDynRangeGamut> m_InDynRangeGamut;
    bool m_InDynRangeGamutIsSet;
    std::shared_ptr<ColorfrontDynRangeGamut> m_OutDynRangeGamut;
    bool m_OutDynRangeGamutIsSet;
    std::shared_ptr<ColorfrontMode> m_Mode;
    bool m_ModeIsSet;
    std::shared_ptr<ColorfrontTvMode> m_TvMode;
    bool m_TvModeIsSet;
    std::shared_ptr<ColorfrontLiveMode> m_LiveMode;
    bool m_LiveModeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ColorfrontConfig_H_ */
