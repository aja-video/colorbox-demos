/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "SystemPasswordResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SystemPasswordResponse::SystemPasswordResponse()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

SystemPasswordResponse::~SystemPasswordResponse()
{
}

void SystemPasswordResponse::validate()
{
    // TODO: implement validation
}

bool SystemPasswordResponse::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (messageIsSet())
	{
		bool messageChanged = false;
		utility::string_t v = getMessage();
		if (messageChanged) { setMessage(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value SystemPasswordResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t(U("successful"))] = ModelBase::toJson(m_Successful);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool SystemPasswordResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("successful"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("successful")));
        if(!fieldValue.is_null())
        {
            bool refVal_successful;
            ok &= ModelBase::fromJson(fieldValue, refVal_successful);
            setSuccessful(refVal_successful);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void SystemPasswordResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("successful")), m_Successful));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
}

bool SystemPasswordResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("successful"))))
    {
        bool refVal_successful;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("successful"))), refVal_successful );
        setSuccessful(refVal_successful);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_message );
        setMessage(refVal_message);
    }
    
    applyMinMaxConstraints();
    return ok;
}

bool SystemPasswordResponse::isSuccessful() const
{
    return m_Successful;
}

void SystemPasswordResponse::setSuccessful(bool value)
{
	bool v = value;
    m_Successful = v;
    m_SuccessfulIsSet = true;
}

bool SystemPasswordResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void SystemPasswordResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}


utility::string_t SystemPasswordResponse::getMessage() const
{
    return m_Message;
}

void SystemPasswordResponse::setMessage(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Message = v;
    m_MessageIsSet = true;
}

bool SystemPasswordResponse::messageIsSet() const
{
    return m_MessageIsSet;
}

void SystemPasswordResponse::unsetMessage()
{
    m_MessageIsSet = false;
}



}
}
}
}


