/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * LibraryControl.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LibraryControl_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LibraryControl_H_


#include "ModelBase.h"

#include "model/Library.h"
#include "model/LibraryAction.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  LibraryControl
    : public ModelBase
{
public:
    LibraryControl();
    virtual ~LibraryControl();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LibraryControl members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Library> getLibrary() const;
    bool libraryIsSet() const;
    void unsetLibrary();

    void setLibrary(const std::shared_ptr<Library>& value);


    /// <summary>
    /// The library entry to act on(starting at 1)
    /// </summary>
    int32_t getEntry() const;
    bool entryIsSet() const;
    void unsetEntry();

    void setEntry(int32_t value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LibraryAction> getAction() const;
    bool actionIsSet() const;
    void unsetAction();

    void setAction(const std::shared_ptr<LibraryAction>& value);


    /// <summary>
    /// Data to be used with action
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);


    /// <summary>
    /// Message to alert when things go wrong
    /// </summary>
    utility::string_t getErrorMsg() const;
    bool errorMsgIsSet() const;
    void unsetErrorMsg();

    void setErrorMsg(const utility::string_t& value);



protected:
    std::shared_ptr<Library> m_Library;
    bool m_LibraryIsSet;
    int32_t m_Entry;
    bool m_EntryIsSet;
    std::shared_ptr<LibraryAction> m_Action;
    bool m_ActionIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    utility::string_t m_ErrorMsg;
    bool m_ErrorMsgIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LibraryControl_H_ */
