/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "NbcConfig.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NbcConfig::NbcConfig()
{
    m_Lut1d_1IsSet = false;
    m_M3x3_2IsSet = false;
    m_Lut3d_1IsSet = false;
}

NbcConfig::~NbcConfig()
{
}

void NbcConfig::validate()
{
    // TODO: implement validation
}

bool NbcConfig::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value NbcConfig::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Lut1d_1IsSet)
    {
        val[utility::conversions::to_string_t(U("lut1d_1"))] = ModelBase::toJson(m_Lut1d_1);
    }
    if(m_M3x3_2IsSet)
    {
        val[utility::conversions::to_string_t(U("m3x3_2"))] = ModelBase::toJson(m_M3x3_2);
    }
    if(m_Lut3d_1IsSet)
    {
        val[utility::conversions::to_string_t(U("lut3d_1"))] = ModelBase::toJson(m_Lut3d_1);
    }

    return val;
}

bool NbcConfig::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("lut1d_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut1d_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut1d_1;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut1d_1);
            setLut1d1(refVal_lut1d_1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("m3x3_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("m3x3_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_m3x3_2;
            ok &= ModelBase::fromJson(fieldValue, refVal_m3x3_2);
            setM3x32(refVal_m3x3_2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lut3d_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut3d_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut3d_1;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut3d_1);
            setLut3d1(refVal_lut3d_1);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void NbcConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Lut1d_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut1d_1")), m_Lut1d_1));
    }
    if(m_M3x3_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("m3x3_2")), m_M3x3_2));
    }
    if(m_Lut3d_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut3d_1")), m_Lut3d_1));
    }
}

bool NbcConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("lut1d_1"))))
    {
        std::shared_ptr<Stage> refVal_lut1d_1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut1d_1"))), refVal_lut1d_1 );
        setLut1d1(refVal_lut1d_1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("m3x3_2"))))
    {
        std::shared_ptr<Stage> refVal_m3x3_2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("m3x3_2"))), refVal_m3x3_2 );
        setM3x32(refVal_m3x3_2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lut3d_1"))))
    {
        std::shared_ptr<Stage> refVal_lut3d_1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut3d_1"))), refVal_lut3d_1 );
        setLut3d1(refVal_lut3d_1);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<Stage> NbcConfig::getLut1d1() const
{
    return m_Lut1d_1;
}

void NbcConfig::setLut1d1(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut1d_1 = v;
    m_Lut1d_1IsSet = true;
}

bool NbcConfig::lut1d1IsSet() const
{
    return m_Lut1d_1IsSet;
}

void NbcConfig::unsetLut1d_1()
{
    m_Lut1d_1IsSet = false;
}


std::shared_ptr<Stage> NbcConfig::getM3x32() const
{
    return m_M3x3_2;
}

void NbcConfig::setM3x32(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_M3x3_2 = v;
    m_M3x3_2IsSet = true;
}

bool NbcConfig::m3x32IsSet() const
{
    return m_M3x3_2IsSet;
}

void NbcConfig::unsetM3x3_2()
{
    m_M3x3_2IsSet = false;
}


std::shared_ptr<Stage> NbcConfig::getLut3d1() const
{
    return m_Lut3d_1;
}

void NbcConfig::setLut3d1(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut3d_1 = v;
    m_Lut3d_1IsSet = true;
}

bool NbcConfig::lut3d1IsSet() const
{
    return m_Lut3d_1IsSet;
}

void NbcConfig::unsetLut3d_1()
{
    m_Lut3d_1IsSet = false;
}


}
}
}
}


