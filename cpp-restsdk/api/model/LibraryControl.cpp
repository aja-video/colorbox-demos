/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "LibraryControl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LibraryControl::LibraryControl()
{
    m_LibraryIsSet = false;
    m_Entry = 0;
    m_EntryIsSet = false;
    m_ActionIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
    m_ErrorMsg = utility::conversions::to_string_t("");
    m_ErrorMsgIsSet = false;
}

LibraryControl::~LibraryControl()
{
}

void LibraryControl::validate()
{
    // TODO: implement validation
}

bool LibraryControl::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (entryIsSet())
	{
		bool entryChanged = false;
		int32_t v = getEntry();
		if (entryChanged) { setEntry(v); anyMinMaxValueChanged = true; }
	}
	if (dataIsSet())
	{
		bool dataChanged = false;
		utility::string_t v = getData();
		if (dataChanged) { setData(v); anyMinMaxValueChanged = true; }
	}
	if (errorMsgIsSet())
	{
		bool errorMsgChanged = false;
		utility::string_t v = getErrorMsg();
		if (errorMsgChanged) { setErrorMsg(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value LibraryControl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LibraryIsSet)
    {
        val[utility::conversions::to_string_t(U("library"))] = ModelBase::toJson(m_Library);
    }
    if(m_EntryIsSet)
    {
        val[utility::conversions::to_string_t(U("entry"))] = ModelBase::toJson(m_Entry);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_ErrorMsgIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMsg"))] = ModelBase::toJson(m_ErrorMsg);
    }

    return val;
}

bool LibraryControl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("library"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("library")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Library> refVal_library;
            ok &= ModelBase::fromJson(fieldValue, refVal_library);
            setLibrary(refVal_library);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_entry;
            ok &= ModelBase::fromJson(fieldValue, refVal_entry);
            setEntry(refVal_entry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LibraryAction> refVal_action;
            ok &= ModelBase::fromJson(fieldValue, refVal_action);
            setAction(refVal_action);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMsg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMsg")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorMsg;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorMsg);
            setErrorMsg(refVal_errorMsg);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void LibraryControl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LibraryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("library")), m_Library));
    }
    if(m_EntryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry")), m_Entry));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_ErrorMsgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMsg")), m_ErrorMsg));
    }
}

bool LibraryControl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("library"))))
    {
        std::shared_ptr<Library> refVal_library;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("library"))), refVal_library );
        setLibrary(refVal_library);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entry"))))
    {
        int32_t refVal_entry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry"))), refVal_entry );
        setEntry(refVal_entry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        std::shared_ptr<LibraryAction> refVal_action;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_action );
        setAction(refVal_action);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        utility::string_t refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMsg"))))
    {
        utility::string_t refVal_errorMsg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMsg"))), refVal_errorMsg );
        setErrorMsg(refVal_errorMsg);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<Library> LibraryControl::getLibrary() const
{
    return m_Library;
}

void LibraryControl::setLibrary(const std::shared_ptr<Library>& value)
{
	std::shared_ptr<Library> v = value;
    m_Library = v;
    m_LibraryIsSet = true;
}

bool LibraryControl::libraryIsSet() const
{
    return m_LibraryIsSet;
}

void LibraryControl::unsetLibrary()
{
    m_LibraryIsSet = false;
}


int32_t LibraryControl::getEntry() const
{
    return m_Entry;
}

void LibraryControl::setEntry(int32_t value)
{
	int32_t v = value;
    m_Entry = v;
    m_EntryIsSet = true;
}

bool LibraryControl::entryIsSet() const
{
    return m_EntryIsSet;
}

void LibraryControl::unsetEntry()
{
    m_EntryIsSet = false;
}



std::shared_ptr<LibraryAction> LibraryControl::getAction() const
{
    return m_Action;
}

void LibraryControl::setAction(const std::shared_ptr<LibraryAction>& value)
{
	std::shared_ptr<LibraryAction> v = value;
    m_Action = v;
    m_ActionIsSet = true;
}

bool LibraryControl::actionIsSet() const
{
    return m_ActionIsSet;
}

void LibraryControl::unsetAction()
{
    m_ActionIsSet = false;
}


utility::string_t LibraryControl::getData() const
{
    return m_Data;
}

void LibraryControl::setData(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Data = v;
    m_DataIsSet = true;
}

bool LibraryControl::dataIsSet() const
{
    return m_DataIsSet;
}

void LibraryControl::unsetData()
{
    m_DataIsSet = false;
}



utility::string_t LibraryControl::getErrorMsg() const
{
    return m_ErrorMsg;
}

void LibraryControl::setErrorMsg(const utility::string_t& value)
{
	utility::string_t v = value;
    m_ErrorMsg = v;
    m_ErrorMsgIsSet = true;
}

bool LibraryControl::errorMsgIsSet() const
{
    return m_ErrorMsgIsSet;
}

void LibraryControl::unsetErrorMsg()
{
    m_ErrorMsgIsSet = false;
}



}
}
}
}


