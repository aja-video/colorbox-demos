/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * SDI.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SDI_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SDI_H_


#include "ModelBase.h"

#include "model/SdiMode3g.h"
#include "model/VideoFormat.h"
#include "model/ColorSpace.h"
#include "model/RgbRange.h"
#include "model/Colorimetry.h"
#include "model/BitDepth.h"
#include "model/ScanMode.h"
#include "model/Transfer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SDI
    : public ModelBase
{
public:
    SDI();
    virtual ~SDI();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDI members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ColorSpace> getColorSpace() const;
    bool colorSpaceIsSet() const;
    void unsetColorSpace();

    void setColorSpace(const std::shared_ptr<ColorSpace>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RgbRange> getRgbRange() const;
    bool rgbRangeIsSet() const;
    void unsetRgbRange();

    void setRgbRange(const std::shared_ptr<RgbRange>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BitDepth> getBitDepth() const;
    bool bitDepthIsSet() const;
    void unsetBitDepth();

    void setBitDepth(const std::shared_ptr<BitDepth>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ScanMode> getScanMode() const;
    bool scanModeIsSet() const;
    void unsetScanMode();

    void setScanMode(const std::shared_ptr<ScanMode>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SdiMode3g> getSdiMode3g() const;
    bool sdiMode3gIsSet() const;
    void unsetSdiMode3g();

    void setSdiMode3g(const std::shared_ptr<SdiMode3g>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Colorimetry> getColorimetry() const;
    bool colorimetryIsSet() const;
    void unsetColorimetry();

    void setColorimetry(const std::shared_ptr<Colorimetry>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Transfer> getTransfer() const;
    bool transferIsSet() const;
    void unsetTransfer();

    void setTransfer(const std::shared_ptr<Transfer>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VideoFormat> getFormat() const;
    bool formatIsSet() const;
    void unsetFormat();

    void setFormat(const std::shared_ptr<VideoFormat>& value);



protected:
    std::shared_ptr<ColorSpace> m_ColorSpace;
    bool m_ColorSpaceIsSet;
    std::shared_ptr<RgbRange> m_RgbRange;
    bool m_RgbRangeIsSet;
    std::shared_ptr<BitDepth> m_BitDepth;
    bool m_BitDepthIsSet;
    std::shared_ptr<ScanMode> m_ScanMode;
    bool m_ScanModeIsSet;
    std::shared_ptr<SdiMode3g> m_SdiMode3g;
    bool m_SdiMode3gIsSet;
    std::shared_ptr<Colorimetry> m_Colorimetry;
    bool m_ColorimetryIsSet;
    std::shared_ptr<Transfer> m_Transfer;
    bool m_TransferIsSet;
    std::shared_ptr<VideoFormat> m_Format;
    bool m_FormatIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SDI_H_ */
