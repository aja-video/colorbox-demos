/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "NetParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NetParams::NetParams()
{
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Subnet = utility::conversions::to_string_t("");
    m_SubnetIsSet = false;
    m_Gateway = utility::conversions::to_string_t("");
    m_GatewayIsSet = false;
    m_DnsServer1 = utility::conversions::to_string_t("");
    m_DnsServer1IsSet = false;
    m_DnsServer2 = utility::conversions::to_string_t("");
    m_DnsServer2IsSet = false;
    m_DnsSearch = utility::conversions::to_string_t("");
    m_DnsSearchIsSet = false;
}

NetParams::~NetParams()
{
}

void NetParams::validate()
{
    // TODO: implement validation
}

bool NetParams::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	if (addressIsSet())
	{
		bool addressChanged = false;
		utility::string_t v = getAddress();
		if (addressChanged) { setAddress(v); anyMinMaxValueChanged = true; }
	}
	if (subnetIsSet())
	{
		bool subnetChanged = false;
		utility::string_t v = getSubnet();
		if (subnetChanged) { setSubnet(v); anyMinMaxValueChanged = true; }
	}
	if (gatewayIsSet())
	{
		bool gatewayChanged = false;
		utility::string_t v = getGateway();
		if (gatewayChanged) { setGateway(v); anyMinMaxValueChanged = true; }
	}
	if (dnsServer1IsSet())
	{
		bool dnsServer1Changed = false;
		utility::string_t v = getDnsServer1();
		if (dnsServer1Changed) { setDnsServer1(v); anyMinMaxValueChanged = true; }
	}
	if (dnsServer2IsSet())
	{
		bool dnsServer2Changed = false;
		utility::string_t v = getDnsServer2();
		if (dnsServer2Changed) { setDnsServer2(v); anyMinMaxValueChanged = true; }
	}
	if (dnsSearchIsSet())
	{
		bool dnsSearchChanged = false;
		utility::string_t v = getDnsSearch();
		if (dnsSearchChanged) { setDnsSearch(v); anyMinMaxValueChanged = true; }
	}
	return anyMinMaxValueChanged;
}

web::json::value NetParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_SubnetIsSet)
    {
        val[utility::conversions::to_string_t(U("subnet"))] = ModelBase::toJson(m_Subnet);
    }
    if(m_GatewayIsSet)
    {
        val[utility::conversions::to_string_t(U("gateway"))] = ModelBase::toJson(m_Gateway);
    }
    if(m_DnsServer1IsSet)
    {
        val[utility::conversions::to_string_t(U("dnsServer1"))] = ModelBase::toJson(m_DnsServer1);
    }
    if(m_DnsServer2IsSet)
    {
        val[utility::conversions::to_string_t(U("dnsServer2"))] = ModelBase::toJson(m_DnsServer2);
    }
    if(m_DnsSearchIsSet)
    {
        val[utility::conversions::to_string_t(U("dnsSearch"))] = ModelBase::toJson(m_DnsSearch);
    }

    return val;
}

bool NetParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_address;
            ok &= ModelBase::fromJson(fieldValue, refVal_address);
            setAddress(refVal_address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subnet"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subnet")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subnet;
            ok &= ModelBase::fromJson(fieldValue, refVal_subnet);
            setSubnet(refVal_subnet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gateway"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gateway")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gateway;
            ok &= ModelBase::fromJson(fieldValue, refVal_gateway);
            setGateway(refVal_gateway);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnsServer1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnsServer1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnsServer1;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnsServer1);
            setDnsServer1(refVal_dnsServer1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnsServer2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnsServer2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnsServer2;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnsServer2);
            setDnsServer2(refVal_dnsServer2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnsSearch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnsSearch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnsSearch;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnsSearch);
            setDnsSearch(refVal_dnsSearch);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void NetParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_SubnetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subnet")), m_Subnet));
    }
    if(m_GatewayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gateway")), m_Gateway));
    }
    if(m_DnsServer1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnsServer1")), m_DnsServer1));
    }
    if(m_DnsServer2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnsServer2")), m_DnsServer2));
    }
    if(m_DnsSearchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnsSearch")), m_DnsSearch));
    }
}

bool NetParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_address );
        setAddress(refVal_address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subnet"))))
    {
        utility::string_t refVal_subnet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subnet"))), refVal_subnet );
        setSubnet(refVal_subnet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gateway"))))
    {
        utility::string_t refVal_gateway;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gateway"))), refVal_gateway );
        setGateway(refVal_gateway);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnsServer1"))))
    {
        utility::string_t refVal_dnsServer1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnsServer1"))), refVal_dnsServer1 );
        setDnsServer1(refVal_dnsServer1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnsServer2"))))
    {
        utility::string_t refVal_dnsServer2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnsServer2"))), refVal_dnsServer2 );
        setDnsServer2(refVal_dnsServer2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnsSearch"))))
    {
        utility::string_t refVal_dnsSearch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnsSearch"))), refVal_dnsSearch );
        setDnsSearch(refVal_dnsSearch);
    }
    
    applyMinMaxConstraints();
    return ok;
}

utility::string_t NetParams::getAddress() const
{
    return m_Address;
}

void NetParams::setAddress(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Address = v;
    m_AddressIsSet = true;
}

bool NetParams::addressIsSet() const
{
    return m_AddressIsSet;
}

void NetParams::unsetAddress()
{
    m_AddressIsSet = false;
}



utility::string_t NetParams::getSubnet() const
{
    return m_Subnet;
}

void NetParams::setSubnet(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Subnet = v;
    m_SubnetIsSet = true;
}

bool NetParams::subnetIsSet() const
{
    return m_SubnetIsSet;
}

void NetParams::unsetSubnet()
{
    m_SubnetIsSet = false;
}



utility::string_t NetParams::getGateway() const
{
    return m_Gateway;
}

void NetParams::setGateway(const utility::string_t& value)
{
	utility::string_t v = value;
    m_Gateway = v;
    m_GatewayIsSet = true;
}

bool NetParams::gatewayIsSet() const
{
    return m_GatewayIsSet;
}

void NetParams::unsetGateway()
{
    m_GatewayIsSet = false;
}



utility::string_t NetParams::getDnsServer1() const
{
    return m_DnsServer1;
}

void NetParams::setDnsServer1(const utility::string_t& value)
{
	utility::string_t v = value;
    m_DnsServer1 = v;
    m_DnsServer1IsSet = true;
}

bool NetParams::dnsServer1IsSet() const
{
    return m_DnsServer1IsSet;
}

void NetParams::unsetDnsServer1()
{
    m_DnsServer1IsSet = false;
}



utility::string_t NetParams::getDnsServer2() const
{
    return m_DnsServer2;
}

void NetParams::setDnsServer2(const utility::string_t& value)
{
	utility::string_t v = value;
    m_DnsServer2 = v;
    m_DnsServer2IsSet = true;
}

bool NetParams::dnsServer2IsSet() const
{
    return m_DnsServer2IsSet;
}

void NetParams::unsetDnsServer2()
{
    m_DnsServer2IsSet = false;
}



utility::string_t NetParams::getDnsSearch() const
{
    return m_DnsSearch;
}

void NetParams::setDnsSearch(const utility::string_t& value)
{
	utility::string_t v = value;
    m_DnsSearch = v;
    m_DnsSearchIsSet = true;
}

bool NetParams::dnsSearchIsSet() const
{
    return m_DnsSearchIsSet;
}

void NetParams::unsetDnsSearch()
{
    m_DnsSearchIsSet = false;
}



}
}
}
}


