/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * OrionConfig.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrionConfig_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrionConfig_H_


#include "ModelBase.h"

#include "model/OrionMethod.h"
#include "model/OrionSourceRange.h"
#include "model/OrionClamping.h"
#include "model/OrionImplementation.h"
#include "model/OrionConversion.h"
#include "model/OrionMode.h"
#include "model/OrionSdrEotf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  OrionConfig
    : public ModelBase
{
public:
    OrionConfig();
    virtual ~OrionConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrionConfig members

    /// <summary>
    /// true if stage is enabled else disabled (unity passthru)
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionConversion> getConversion() const;
    bool conversionIsSet() const;
    void unsetConversion();

    void setConversion(const std::shared_ptr<OrionConversion>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionMode> getMode() const;
    bool modeIsSet() const;
    void unsetMode();

    void setMode(const std::shared_ptr<OrionMode>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionMethod> getMethod() const;
    bool methodIsSet() const;
    void unsetMethod();

    void setMethod(const std::shared_ptr<OrionMethod>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionSourceRange> getSourceRange() const;
    bool sourceRangeIsSet() const;
    void unsetSourceRange();

    void setSourceRange(const std::shared_ptr<OrionSourceRange>& value);


    /// <summary>
    /// 
    /// </summary>
    double getHdrRef() const;
    bool hdrRefIsSet() const;
    void unsetHdrRef();

    void setHdrRef(double value);

    double hdrRefMin() const;
    double hdrRefMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getSdrRef() const;
    bool sdrRefIsSet() const;
    void unsetSdrRef();

    void setSdrRef(double value);

    double sdrRefMin() const;
    double sdrRefMax() const;

    /// <summary>
    /// 
    /// </summary>
    int32_t getHdrPeak() const;
    bool hdrPeakIsSet() const;
    void unsetHdrPeak();

    void setHdrPeak(int32_t value);

    int32_t hdrPeakMin() const;
    int32_t hdrPeakMax() const;

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionSdrEotf> getSdrEotf() const;
    bool sdrEotfIsSet() const;
    void unsetSdrEotf();

    void setSdrEotf(const std::shared_ptr<OrionSdrEotf>& value);


    /// <summary>
    /// 
    /// </summary>
    double getPreKnee() const;
    bool preKneeIsSet() const;
    void unsetPreKnee();

    void setPreKnee(double value);

    double preKneeMin() const;
    double preKneeMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getPreAmount() const;
    bool preAmountIsSet() const;
    void unsetPreAmount();

    void setPreAmount(double value);

    double preAmountMin() const;
    double preAmountMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getPostKnee() const;
    bool postKneeIsSet() const;
    void unsetPostKnee();

    void setPostKnee(double value);

    double postKneeMin() const;
    double postKneeMax() const;

    /// <summary>
    /// 
    /// </summary>
    double getPostAmount() const;
    bool postAmountIsSet() const;
    void unsetPostAmount();

    void setPostAmount(double value);

    double postAmountMin() const;
    double postAmountMax() const;

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionClamping> getClamping() const;
    bool clampingIsSet() const;
    void unsetClamping();

    void setClamping(const std::shared_ptr<OrionClamping>& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrionImplementation> getImplementation() const;
    bool implementationIsSet() const;
    void unsetImplementation();

    void setImplementation(const std::shared_ptr<OrionImplementation>& value);



protected:
    bool m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<OrionConversion> m_Conversion;
    bool m_ConversionIsSet;
    std::shared_ptr<OrionMode> m_Mode;
    bool m_ModeIsSet;
    std::shared_ptr<OrionMethod> m_Method;
    bool m_MethodIsSet;
    std::shared_ptr<OrionSourceRange> m_SourceRange;
    bool m_SourceRangeIsSet;
    double m_HdrRef;
    bool m_HdrRefIsSet;
    double m_SdrRef;
    bool m_SdrRefIsSet;
    int32_t m_HdrPeak;
    bool m_HdrPeakIsSet;
    std::shared_ptr<OrionSdrEotf> m_SdrEotf;
    bool m_SdrEotfIsSet;
    double m_PreKnee;
    bool m_PreKneeIsSet;
    double m_PreAmount;
    bool m_PreAmountIsSet;
    double m_PostKnee;
    bool m_PostKneeIsSet;
    double m_PostAmount;
    bool m_PostAmountIsSet;
    std::shared_ptr<OrionClamping> m_Clamping;
    bool m_ClampingIsSet;
    std::shared_ptr<OrionImplementation> m_Implementation;
    bool m_ImplementationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrionConfig_H_ */
