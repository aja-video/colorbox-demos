/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */



#include "PipelineStages.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PipelineStages::PipelineStages()
{
    m_Lut1d_1IsSet = false;
    m_M3x3_2IsSet = false;
    m_Lut1d_2IsSet = false;
    m_Lut3d_1IsSet = false;
    m_Lut1d_3IsSet = false;
    m_M3x3_3IsSet = false;
    m_Lut1d_4IsSet = false;
    m_InColorimetryIsSet = false;
    m_InRangeIsSet = false;
    m_OutColorimetryIsSet = false;
    m_OutRangeIsSet = false;
    m_TransferCharacteristicIsSet = false;
    m_CscFilterIsSet = false;
}

PipelineStages::~PipelineStages()
{
}

void PipelineStages::validate()
{
    // TODO: implement validation
}

bool PipelineStages::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value PipelineStages::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Lut1d_1IsSet)
    {
        val[utility::conversions::to_string_t(U("lut1d_1"))] = ModelBase::toJson(m_Lut1d_1);
    }
    if(m_M3x3_2IsSet)
    {
        val[utility::conversions::to_string_t(U("m3x3_2"))] = ModelBase::toJson(m_M3x3_2);
    }
    if(m_Lut1d_2IsSet)
    {
        val[utility::conversions::to_string_t(U("lut1d_2"))] = ModelBase::toJson(m_Lut1d_2);
    }
    if(m_Lut3d_1IsSet)
    {
        val[utility::conversions::to_string_t(U("lut3d_1"))] = ModelBase::toJson(m_Lut3d_1);
    }
    if(m_Lut1d_3IsSet)
    {
        val[utility::conversions::to_string_t(U("lut1d_3"))] = ModelBase::toJson(m_Lut1d_3);
    }
    if(m_M3x3_3IsSet)
    {
        val[utility::conversions::to_string_t(U("m3x3_3"))] = ModelBase::toJson(m_M3x3_3);
    }
    if(m_Lut1d_4IsSet)
    {
        val[utility::conversions::to_string_t(U("lut1d_4"))] = ModelBase::toJson(m_Lut1d_4);
    }
    if(m_InColorimetryIsSet)
    {
        val[utility::conversions::to_string_t(U("inColorimetry"))] = ModelBase::toJson(m_InColorimetry);
    }
    if(m_InRangeIsSet)
    {
        val[utility::conversions::to_string_t(U("inRange"))] = ModelBase::toJson(m_InRange);
    }
    if(m_OutColorimetryIsSet)
    {
        val[utility::conversions::to_string_t(U("outColorimetry"))] = ModelBase::toJson(m_OutColorimetry);
    }
    if(m_OutRangeIsSet)
    {
        val[utility::conversions::to_string_t(U("outRange"))] = ModelBase::toJson(m_OutRange);
    }
    if(m_TransferCharacteristicIsSet)
    {
        val[utility::conversions::to_string_t(U("transferCharacteristic"))] = ModelBase::toJson(m_TransferCharacteristic);
    }
    if(m_CscFilterIsSet)
    {
        val[utility::conversions::to_string_t(U("cscFilter"))] = ModelBase::toJson(m_CscFilter);
    }

    return val;
}

bool PipelineStages::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("lut1d_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut1d_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut1d_1;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut1d_1);
            setLut1d1(refVal_lut1d_1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("m3x3_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("m3x3_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_m3x3_2;
            ok &= ModelBase::fromJson(fieldValue, refVal_m3x3_2);
            setM3x32(refVal_m3x3_2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lut1d_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut1d_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut1d_2;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut1d_2);
            setLut1d2(refVal_lut1d_2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lut3d_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut3d_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut3d_1;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut3d_1);
            setLut3d1(refVal_lut3d_1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lut1d_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut1d_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut1d_3;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut1d_3);
            setLut1d3(refVal_lut1d_3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("m3x3_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("m3x3_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_m3x3_3;
            ok &= ModelBase::fromJson(fieldValue, refVal_m3x3_3);
            setM3x33(refVal_m3x3_3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lut1d_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lut1d_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Stage> refVal_lut1d_4;
            ok &= ModelBase::fromJson(fieldValue, refVal_lut1d_4);
            setLut1d4(refVal_lut1d_4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inColorimetry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inColorimetry")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Colorimetry> refVal_inColorimetry;
            ok &= ModelBase::fromJson(fieldValue, refVal_inColorimetry);
            setInColorimetry(refVal_inColorimetry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inRange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inRange")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineRange> refVal_inRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_inRange);
            setInRange(refVal_inRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outColorimetry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outColorimetry")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Colorimetry> refVal_outColorimetry;
            ok &= ModelBase::fromJson(fieldValue, refVal_outColorimetry);
            setOutColorimetry(refVal_outColorimetry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outRange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outRange")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineRange> refVal_outRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_outRange);
            setOutRange(refVal_outRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transferCharacteristic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transferCharacteristic")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Transfer> refVal_transferCharacteristic;
            ok &= ModelBase::fromJson(fieldValue, refVal_transferCharacteristic);
            setTransferCharacteristic(refVal_transferCharacteristic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cscFilter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cscFilter")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CSCFilter> refVal_cscFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_cscFilter);
            setCscFilter(refVal_cscFilter);
        }
    }
    
    applyMinMaxConstraints();
    return ok;
}

void PipelineStages::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Lut1d_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut1d_1")), m_Lut1d_1));
    }
    if(m_M3x3_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("m3x3_2")), m_M3x3_2));
    }
    if(m_Lut1d_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut1d_2")), m_Lut1d_2));
    }
    if(m_Lut3d_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut3d_1")), m_Lut3d_1));
    }
    if(m_Lut1d_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut1d_3")), m_Lut1d_3));
    }
    if(m_M3x3_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("m3x3_3")), m_M3x3_3));
    }
    if(m_Lut1d_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lut1d_4")), m_Lut1d_4));
    }
    if(m_InColorimetryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inColorimetry")), m_InColorimetry));
    }
    if(m_InRangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inRange")), m_InRange));
    }
    if(m_OutColorimetryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outColorimetry")), m_OutColorimetry));
    }
    if(m_OutRangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outRange")), m_OutRange));
    }
    if(m_TransferCharacteristicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transferCharacteristic")), m_TransferCharacteristic));
    }
    if(m_CscFilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cscFilter")), m_CscFilter));
    }
}

bool PipelineStages::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("lut1d_1"))))
    {
        std::shared_ptr<Stage> refVal_lut1d_1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut1d_1"))), refVal_lut1d_1 );
        setLut1d1(refVal_lut1d_1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("m3x3_2"))))
    {
        std::shared_ptr<Stage> refVal_m3x3_2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("m3x3_2"))), refVal_m3x3_2 );
        setM3x32(refVal_m3x3_2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lut1d_2"))))
    {
        std::shared_ptr<Stage> refVal_lut1d_2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut1d_2"))), refVal_lut1d_2 );
        setLut1d2(refVal_lut1d_2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lut3d_1"))))
    {
        std::shared_ptr<Stage> refVal_lut3d_1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut3d_1"))), refVal_lut3d_1 );
        setLut3d1(refVal_lut3d_1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lut1d_3"))))
    {
        std::shared_ptr<Stage> refVal_lut1d_3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut1d_3"))), refVal_lut1d_3 );
        setLut1d3(refVal_lut1d_3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("m3x3_3"))))
    {
        std::shared_ptr<Stage> refVal_m3x3_3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("m3x3_3"))), refVal_m3x3_3 );
        setM3x33(refVal_m3x3_3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lut1d_4"))))
    {
        std::shared_ptr<Stage> refVal_lut1d_4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lut1d_4"))), refVal_lut1d_4 );
        setLut1d4(refVal_lut1d_4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inColorimetry"))))
    {
        std::shared_ptr<Colorimetry> refVal_inColorimetry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inColorimetry"))), refVal_inColorimetry );
        setInColorimetry(refVal_inColorimetry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inRange"))))
    {
        std::shared_ptr<PipelineRange> refVal_inRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inRange"))), refVal_inRange );
        setInRange(refVal_inRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outColorimetry"))))
    {
        std::shared_ptr<Colorimetry> refVal_outColorimetry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outColorimetry"))), refVal_outColorimetry );
        setOutColorimetry(refVal_outColorimetry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outRange"))))
    {
        std::shared_ptr<PipelineRange> refVal_outRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outRange"))), refVal_outRange );
        setOutRange(refVal_outRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transferCharacteristic"))))
    {
        std::shared_ptr<Transfer> refVal_transferCharacteristic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transferCharacteristic"))), refVal_transferCharacteristic );
        setTransferCharacteristic(refVal_transferCharacteristic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cscFilter"))))
    {
        std::shared_ptr<CSCFilter> refVal_cscFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cscFilter"))), refVal_cscFilter );
        setCscFilter(refVal_cscFilter);
    }
    
    applyMinMaxConstraints();
    return ok;
}

std::shared_ptr<Stage> PipelineStages::getLut1d1() const
{
    return m_Lut1d_1;
}

void PipelineStages::setLut1d1(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut1d_1 = v;
    m_Lut1d_1IsSet = true;
}

bool PipelineStages::lut1d1IsSet() const
{
    return m_Lut1d_1IsSet;
}

void PipelineStages::unsetLut1d_1()
{
    m_Lut1d_1IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getM3x32() const
{
    return m_M3x3_2;
}

void PipelineStages::setM3x32(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_M3x3_2 = v;
    m_M3x3_2IsSet = true;
}

bool PipelineStages::m3x32IsSet() const
{
    return m_M3x3_2IsSet;
}

void PipelineStages::unsetM3x3_2()
{
    m_M3x3_2IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getLut1d2() const
{
    return m_Lut1d_2;
}

void PipelineStages::setLut1d2(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut1d_2 = v;
    m_Lut1d_2IsSet = true;
}

bool PipelineStages::lut1d2IsSet() const
{
    return m_Lut1d_2IsSet;
}

void PipelineStages::unsetLut1d_2()
{
    m_Lut1d_2IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getLut3d1() const
{
    return m_Lut3d_1;
}

void PipelineStages::setLut3d1(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut3d_1 = v;
    m_Lut3d_1IsSet = true;
}

bool PipelineStages::lut3d1IsSet() const
{
    return m_Lut3d_1IsSet;
}

void PipelineStages::unsetLut3d_1()
{
    m_Lut3d_1IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getLut1d3() const
{
    return m_Lut1d_3;
}

void PipelineStages::setLut1d3(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut1d_3 = v;
    m_Lut1d_3IsSet = true;
}

bool PipelineStages::lut1d3IsSet() const
{
    return m_Lut1d_3IsSet;
}

void PipelineStages::unsetLut1d_3()
{
    m_Lut1d_3IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getM3x33() const
{
    return m_M3x3_3;
}

void PipelineStages::setM3x33(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_M3x3_3 = v;
    m_M3x3_3IsSet = true;
}

bool PipelineStages::m3x33IsSet() const
{
    return m_M3x3_3IsSet;
}

void PipelineStages::unsetM3x3_3()
{
    m_M3x3_3IsSet = false;
}


std::shared_ptr<Stage> PipelineStages::getLut1d4() const
{
    return m_Lut1d_4;
}

void PipelineStages::setLut1d4(const std::shared_ptr<Stage>& value)
{
	std::shared_ptr<Stage> v = value;
    m_Lut1d_4 = v;
    m_Lut1d_4IsSet = true;
}

bool PipelineStages::lut1d4IsSet() const
{
    return m_Lut1d_4IsSet;
}

void PipelineStages::unsetLut1d_4()
{
    m_Lut1d_4IsSet = false;
}


std::shared_ptr<Colorimetry> PipelineStages::getInColorimetry() const
{
    return m_InColorimetry;
}

void PipelineStages::setInColorimetry(const std::shared_ptr<Colorimetry>& value)
{
	std::shared_ptr<Colorimetry> v = value;
    m_InColorimetry = v;
    m_InColorimetryIsSet = true;
}

bool PipelineStages::inColorimetryIsSet() const
{
    return m_InColorimetryIsSet;
}

void PipelineStages::unsetInColorimetry()
{
    m_InColorimetryIsSet = false;
}


std::shared_ptr<PipelineRange> PipelineStages::getInRange() const
{
    return m_InRange;
}

void PipelineStages::setInRange(const std::shared_ptr<PipelineRange>& value)
{
	std::shared_ptr<PipelineRange> v = value;
    m_InRange = v;
    m_InRangeIsSet = true;
}

bool PipelineStages::inRangeIsSet() const
{
    return m_InRangeIsSet;
}

void PipelineStages::unsetInRange()
{
    m_InRangeIsSet = false;
}


std::shared_ptr<Colorimetry> PipelineStages::getOutColorimetry() const
{
    return m_OutColorimetry;
}

void PipelineStages::setOutColorimetry(const std::shared_ptr<Colorimetry>& value)
{
	std::shared_ptr<Colorimetry> v = value;
    m_OutColorimetry = v;
    m_OutColorimetryIsSet = true;
}

bool PipelineStages::outColorimetryIsSet() const
{
    return m_OutColorimetryIsSet;
}

void PipelineStages::unsetOutColorimetry()
{
    m_OutColorimetryIsSet = false;
}


std::shared_ptr<PipelineRange> PipelineStages::getOutRange() const
{
    return m_OutRange;
}

void PipelineStages::setOutRange(const std::shared_ptr<PipelineRange>& value)
{
	std::shared_ptr<PipelineRange> v = value;
    m_OutRange = v;
    m_OutRangeIsSet = true;
}

bool PipelineStages::outRangeIsSet() const
{
    return m_OutRangeIsSet;
}

void PipelineStages::unsetOutRange()
{
    m_OutRangeIsSet = false;
}


std::shared_ptr<Transfer> PipelineStages::getTransferCharacteristic() const
{
    return m_TransferCharacteristic;
}

void PipelineStages::setTransferCharacteristic(const std::shared_ptr<Transfer>& value)
{
	std::shared_ptr<Transfer> v = value;
    m_TransferCharacteristic = v;
    m_TransferCharacteristicIsSet = true;
}

bool PipelineStages::transferCharacteristicIsSet() const
{
    return m_TransferCharacteristicIsSet;
}

void PipelineStages::unsetTransferCharacteristic()
{
    m_TransferCharacteristicIsSet = false;
}


std::shared_ptr<CSCFilter> PipelineStages::getCscFilter() const
{
    return m_CscFilter;
}

void PipelineStages::setCscFilter(const std::shared_ptr<CSCFilter>& value)
{
	std::shared_ptr<CSCFilter> v = value;
    m_CscFilter = v;
    m_CscFilterIsSet = true;
}

bool PipelineStages::cscFilterIsSet() const
{
    return m_CscFilterIsSet;
}

void PipelineStages::unsetCscFilter()
{
    m_CscFilterIsSet = false;
}


}
}
}
}


