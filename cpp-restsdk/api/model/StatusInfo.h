/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */

/*
 * StatusInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_StatusInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_StatusInfo_H_


#include "ModelBase.h"

#include "model/StatusState.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  StatusInfo
    : public ModelBase
{
public:
    StatusInfo();
    virtual ~StatusInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// StatusInfo members

    /// <summary>
    /// The upper bound for the state to be considered StatusStateGood
    /// </summary>
    double getUpperBoundGood() const;
    bool upperBoundGoodIsSet() const;
    void unsetUpperBoundGood();

    void setUpperBoundGood(double value);


    /// <summary>
    /// The upper bound for the state to be considered StatusStateMaybe
    /// </summary>
    double getUpperBoundMaybe() const;
    bool upperBoundMaybeIsSet() const;
    void unsetUpperBoundMaybe();

    void setUpperBoundMaybe(double value);


    /// <summary>
    /// The instantaneous value for this status object
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const utility::string_t& value);


    /// <summary>
    /// The instantaneous value for this status object
    /// </summary>
    double getValueInt() const;
    bool valueIntIsSet() const;
    void unsetValueInt();

    void setValueInt(double value);


    /// <summary>
    /// A descriptive label of what this status object represents
    /// </summary>
    utility::string_t getLabel() const;
    bool labelIsSet() const;
    void unsetLabel();

    void setLabel(const utility::string_t& value);


    /// <summary>
    /// A second value that is optional
    /// </summary>
    utility::string_t getExtraValue() const;
    bool extraValueIsSet() const;
    void unsetExtraValue();

    void setExtraValue(const utility::string_t& value);


    /// <summary>
    /// A second descriptive label for the extraValue
    /// </summary>
    utility::string_t getExtraLabel() const;
    bool extraLabelIsSet() const;
    void unsetExtraLabel();

    void setExtraLabel(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StatusState> getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const std::shared_ptr<StatusState>& value);



protected:
    double m_UpperBoundGood;
    bool m_UpperBoundGoodIsSet;
    double m_UpperBoundMaybe;
    bool m_UpperBoundMaybeIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
    double m_ValueInt;
    bool m_ValueIntIsSet;
    utility::string_t m_Label;
    bool m_LabelIsSet;
    utility::string_t m_ExtraValue;
    bool m_ExtraValueIsSet;
    utility::string_t m_ExtraLabel;
    bool m_ExtraLabelIsSet;
    std::shared_ptr<StatusState> m_State;
    bool m_StateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_StatusInfo_H_ */
