/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems Inc.  All rights reserved.
 */

/*
 * WiFiDeviceConfig.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_WiFiDeviceConfig_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_WiFiDeviceConfig_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  WiFiDeviceConfig
    : public ModelBase
{
public:
    WiFiDeviceConfig();
    virtual ~WiFiDeviceConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;
    bool applyMinMaxConstraints() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WiFiDeviceConfig members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWifiControl() const;
    bool wifiControlIsSet() const;
    void unsetWifiControl();

    void setWifiControl(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWifiNetwork() const;
    bool wifiNetworkIsSet() const;
    void unsetWifiNetwork();

    void setWifiNetwork(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWifiPassword() const;
    bool wifiPasswordIsSet() const;
    void unsetWifiPassword();

    void setWifiPassword(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWifiSecurity() const;
    bool wifiSecurityIsSet() const;
    void unsetWifiSecurity();

    void setWifiSecurity(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWifiIpConfig() const;
    bool wifiIpConfigIsSet() const;
    void unsetWifiIpConfig();

    void setWifiIpConfig(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubnet() const;
    bool subnetIsSet() const;
    void unsetSubnet();

    void setSubnet(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGateway() const;
    bool gatewayIsSet() const;
    void unsetGateway();

    void setGateway(const utility::string_t& value);


    /// <summary>
    /// 
    /// </summary>
    int32_t getWifiIpChangeCommit() const;
    bool wifiIpChangeCommitIsSet() const;
    void unsetWifiIpChangeCommit();

    void setWifiIpChangeCommit(int32_t value);



protected:
    utility::string_t m_WifiControl;
    bool m_WifiControlIsSet;
    utility::string_t m_WifiNetwork;
    bool m_WifiNetworkIsSet;
    utility::string_t m_WifiPassword;
    bool m_WifiPasswordIsSet;
    utility::string_t m_WifiSecurity;
    bool m_WifiSecurityIsSet;
    utility::string_t m_WifiIpConfig;
    bool m_WifiIpConfigIsSet;
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Subnet;
    bool m_SubnetIsSet;
    utility::string_t m_Gateway;
    bool m_GatewayIsSet;
    int32_t m_WifiIpChangeCommit;
    bool m_WifiIpChangeCommitIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_WiFiDeviceConfig_H_ */
