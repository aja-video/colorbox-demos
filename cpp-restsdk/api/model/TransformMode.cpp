/**
 * OpenAPI ColorBox
 * This is a REST API for the AJA ColorBox product.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aja.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Copyright (C) 2020-2022 AJA Video Systems, Inc.  All rights reserved.
 */



#include "TransformMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



namespace
{
using EnumUnderlyingType = utility::string_t;

TransformMode::eTransformMode toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("LUT")))
        return TransformMode::eTransformMode::TransformMode_LUT;
    if (val == utility::conversions::to_string_t(U("COLORFRONT")))
        return TransformMode::eTransformMode::TransformMode_COLORFRONT;
    if (val == utility::conversions::to_string_t(U("ORION")))
        return TransformMode::eTransformMode::TransformMode_ORION;
    if (val == utility::conversions::to_string_t(U("BBC")))
        return TransformMode::eTransformMode::TransformMode_BBC;
    if (val == utility::conversions::to_string_t(U("NBC")))
        return TransformMode::eTransformMode::TransformMode_NBC;
    return {};
}

EnumUnderlyingType fromEnum(TransformMode::eTransformMode e)
{
    switch (e)
    {
    case TransformMode::eTransformMode::TransformMode_LUT:
        return U("LUT");
    case TransformMode::eTransformMode::TransformMode_COLORFRONT:
        return U("COLORFRONT");
    case TransformMode::eTransformMode::TransformMode_ORION:
        return U("ORION");
    case TransformMode::eTransformMode::TransformMode_BBC:
        return U("BBC");
    case TransformMode::eTransformMode::TransformMode_NBC:
        return U("NBC");
    default:
        break;
    }
    return {};
}
}

TransformMode::TransformMode()
{
}

TransformMode::~TransformMode()
{
}

void TransformMode::validate()
{
    // TODO: implement validation
}

bool TransformMode::applyMinMaxConstraints()
{
	bool anyMinMaxValueChanged = false;
	return anyMinMaxValueChanged;
}

web::json::value TransformMode::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool TransformMode::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void TransformMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool TransformMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

TransformMode::eTransformMode TransformMode::getValue() const
{
   return m_value;
}

void TransformMode::setValue(TransformMode::eTransformMode const value)
{
   m_value = value;
}


}
}
}
}


